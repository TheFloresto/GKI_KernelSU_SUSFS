name: Build Kernels

permissions:
  contents: write
  actions: write

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: "Choose Release Type"
        required: true
        type: choice
        options:
          - Actions
          - Pre-Release
          - Release
        default: Pre-Release
      include_wild:
        description: 'Include WKSU?'
        required: true
        type: boolean
        default: false
      include_ksu:
        description: 'Include KSU?'
        required: true
        type: boolean
        default: false
      include_next:
        description: 'Include NEXT?'
        required: true
        type: boolean
        default: true
      include_mksu:
        description: 'Include MKSU?'
        required: true
        type: boolean
        default: false
      kernelsu_branch:
        description: "Choose ksu branch"
        required: true
        type: choice
        options:
          - Stable
          - Dev
          - Other
        default: Dev
      kernelsu_branch_other:
        description: "If 'Other' is selected, specify your custom branch"
        required: false
        type: string
        default: ""
          
jobs:
  build-a12-5-10:
    needs: set-matrix
    uses: ./.github/workflows/kernel-a12-5-10.yml
    secrets: inherit
    strategy:
      fail-fast: true
      matrix: ${{ fromJson(needs.set-matrix.outputs.matrix) }}
    with:
      kernelsu_variant: ${{ matrix.kernelsu_variant }}
      kernelsu_branch: ${{ inputs.kernelsu_branch }}
      kernelsu_branch_other: ${{ inputs.kernelsu_branch_other }}    

  build-a13-5-10:
    needs: set-matrix
    uses: ./.github/workflows/kernel-a13-5-10.yml
    secrets: inherit
    strategy:
      fail-fast: true
      matrix: ${{ fromJson(needs.set-matrix.outputs.matrix) }}
    with:
      kernelsu_variant: ${{ matrix.kernelsu_variant }}
      kernelsu_branch: ${{ inputs.kernelsu_branch }}
      kernelsu_branch_other: ${{ inputs.kernelsu_branch_other }}    

  build-a13-5-15:
    needs: set-matrix
    uses: ./.github/workflows/kernel-a13-5-15.yml
    secrets: inherit
    strategy:
      fail-fast: true
      matrix: ${{ fromJson(needs.set-matrix.outputs.matrix) }}
    with:
      kernelsu_variant: ${{ matrix.kernelsu_variant }}
      kernelsu_branch: ${{ inputs.kernelsu_branch }}
      kernelsu_branch_other: ${{ inputs.kernelsu_branch_other }}    

  build-a14-5-15:
    needs: set-matrix
    uses: ./.github/workflows/kernel-a14-5-15.yml
    secrets: inherit
    strategy:
      fail-fast: true
      matrix: ${{ fromJson(needs.set-matrix.outputs.matrix) }}
    with:
      kernelsu_variant: ${{ matrix.kernelsu_variant }}
      kernelsu_branch: ${{ inputs.kernelsu_branch }}
      kernelsu_branch_other: ${{ inputs.kernelsu_branch_other }}    

  build-a14-6-1:
    needs: set-matrix
    uses: ./.github/workflows/kernel-a14-6-1.yml
    secrets: inherit
    strategy:
      fail-fast: true
      matrix: ${{ fromJson(needs.set-matrix.outputs.matrix) }}
    with:
      kernelsu_variant: ${{ matrix.kernelsu_variant }}
      kernelsu_branch: ${{ inputs.kernelsu_branch }}
      kernelsu_branch_other: ${{ inputs.kernelsu_branch_other }}    

  build-a15-6-6:
    needs: set-matrix
    uses: ./.github/workflows/kernel-a15-6-6.yml
    secrets: inherit
    strategy:
      fail-fast: true
      matrix: ${{ fromJson(needs.set-matrix.outputs.matrix) }}
    with:
      kernelsu_variant: ${{ matrix.kernelsu_variant }}
      kernelsu_branch: ${{ inputs.kernelsu_branch }}
      kernelsu_branch_other: ${{ inputs.kernelsu_branch_other }}    

  set-matrix:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          VARIANTS=()
          [[ "${{ inputs.include_wild }}" == "true" ]] && VARIANTS+=("\"WILD\"")
          [[ "${{ inputs.include_ksu }}" == "true" ]] && VARIANTS+=("\"KSU\"")
          [[ "${{ inputs.include_next }}" == "true" ]] && VARIANTS+=("\"NEXT\"")
          [[ "${{ inputs.include_mksu }}" == "true" ]] && VARIANTS+=("\"MKSU\"")
          echo "matrix={\"kernelsu_variant\": [$(IFS=,; echo "${VARIANTS[*]}")]}" >> $GITHUB_OUTPUT

  release:
    if: ${{ inputs.release_type == 'Release' || inputs.release_type == 'Pre-Release' }}  
    runs-on: ubuntu-latest
    needs:
      - build-a12-5-10
      - build-a13-5-10
      - build-a13-5-15
      - build-a14-5-15
      - build-a14-6-1
      - build-a15-6-6

    env:
      GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
      RELEASE_NAME: "GKI Kernels With WKSU & SUSFS v1.5.9"
      RELEASE_BODY:
    steps:
      - name: Maximize Build Space
        uses: AdityaGarg8/remove-unwanted-software@v5
        with:
          # remove-dotnet: 'true'          # Frees ~2 GB
          # remove-android: 'true'         # Frees ~9 GB
          # remove-haskell: 'true'         # Frees ~5.2 GB
          # remove-codeql: 'true'          # Frees ~5.4 GB
          # remove-docker-images: 'true'   # Frees ~3.2 GB
          # remove-large-packages: 'true'  # Frees ~3.1 GB
          remove-swapfile: 'true'        # Frees ~4 GB
          # remove-cached-tools: 'false'   # Avoid unless confirmed safe
          verbose: 'true'                # Enable detailed logging

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get commit hashes and generate commit URLs
        run: |
          GITLAB_OWNER="simonpunk"
          GITLAB_REPO="susfs4ksu"
          
          declare -A BRANCH_MAP=(
            ["gki_android12_5_10"]="gki-android12-5.10"
            ["gki_android13_5_10"]="gki-android13-5.10"
            ["gki_android13_5_15"]="gki-android13-5.15"
            ["gki_android14_5_15"]="gki-android14-5.15"
            ["gki_android14_6_1"]="gki-android14-6.1"
            ["gki_android15_6_6"]="gki-android15-6.6"
          )
          
          for var_name in "${!BRANCH_MAP[@]}"; do
            branch_name="${BRANCH_MAP[$var_name]}"
            COMMIT_HASH=$(git ls-remote https://gitlab.com/$GITLAB_OWNER/$GITLAB_REPO.git refs/heads/$branch_name | awk '{ print $1 }')
            
            if [[ -n "$COMMIT_HASH" ]]; then
              COMMIT_URL="https://gitlab.com/$GITLAB_OWNER/$GITLAB_REPO/-/commit/$COMMIT_HASH"
              echo "$branch_name Commit: $COMMIT_HASH"
              echo "$branch_name Commit URL: $COMMIT_URL"
              
              echo "COMMIT_HASH_${var_name}=$COMMIT_HASH" >> "$GITHUB_ENV"
              echo "COMMIT_URL_${var_name}=$COMMIT_URL" >> "$GITHUB_ENV"
            fi
          done

      - name: Get KernelSU variant refs and links
        run: |
          BRANCH="${{ inputs.kernelsu_branch }}"
      
          get_ref() {
            local name="$1" repo="$2" path="$3" mode="$4"
            if [[ "$mode" == "tag" ]]; then
              ref=$(git ls-remote --tags --sort=-v:refname "$repo" | grep -o 'refs/tags/.*' | cut -d/ -f3 | head -n1)
              url="https://github.com/$path/releases/tag/$ref"
            else
              ref=$(git ls-remote "$repo" HEAD | awk '{print $1}')
              url="https://github.com/$path/commit/$ref"
            fi
            echo "${name}_REF=$ref" >> $GITHUB_ENV
            echo "${name}_URL=$url" >> $GITHUB_ENV
          }
      
          [[ "$BRANCH" == "Stable" ]] && MODE="tag" || MODE="commit"

          get_ref "WILD" "https://github.com/WildKernels/Wild_KSU.git" "WildKernels/Wild_KSU" "$MODE"
          get_ref "KSU" "https://github.com/tiann/KernelSU.git" "tiann/KernelSU" "$MODE"
          get_ref "NEXT" "https://github.com/KernelSU-Next/KernelSU-Next.git" "KernelSU-Next/KernelSU-Next" "$MODE"
          get_ref "MKSU" "https://github.com/5ec1cff/KernelSU.git" "5ec1cff/KernelSU" "commit"

      - name: Generate New Tag
        env:
          GH_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        run: |
          # Получаем последний тег из публичного репозитория NerestKernels
          LATEST_TAG=$(gh api repos/NerestKernels/GKI_KernelSU_SUSFS/tags --jq '.[0].name' 2>/dev/null || echo "")
          
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="v1.5.9-r0"
          fi
          
          echo "Latest tag from NerestKernels/GKI_KernelSU_SUSFS: $LATEST_TAG"
          
          # Генерируем новый тег с увеличенным номером ревизии
          NEW_TAG=$(echo "$LATEST_TAG" | awk -F'-r' '{
            if (NF > 1) {
              suffix = $NF + 1
              gsub(/-r[0-9]+$/, "", $0)
              printf "%s-r%d", $0, suffix
            } else {
              printf "%s-r1", $0
            }
          }')
          
          echo "Proposed new tag: $NEW_TAG"
          
          # Проверяем, существует ли тег в публичном репозитории NerestKernels
          TAG_EXISTS=$(gh api repos/NerestKernels/GKI_KernelSU_SUSFS/tags --jq ".[] | select(.name == \"$NEW_TAG\") | .name" 2>/dev/null || echo "")
          
          if [ -n "$TAG_EXISTS" ]; then
            echo "Tag $NEW_TAG already exists in NerestKernels repository, finding next available tag"
            
            # Находим следующий доступный тег
            BASE_VERSION=$(echo "$NEW_TAG" | sed 's/-r[0-9]*$//')
            BASE_REVISION=$(echo "$LATEST_TAG" | grep -o 'r[0-9]*$' | sed 's/r//' || echo "0")
            COUNTER=$((BASE_REVISION + 1))
            
            while true; do
              CANDIDATE_TAG="${BASE_VERSION}-r${COUNTER}"
              TAG_CHECK=$(gh api repos/NerestKernels/GKI_KernelSU_SUSFS/tags --jq ".[] | select(.name == \"$CANDIDATE_TAG\") | .name" 2>/dev/null || echo "")
              
              if [ -z "$TAG_CHECK" ]; then
                NEW_TAG="$CANDIDATE_TAG"
                echo "Found available tag: $NEW_TAG"
                break
              fi
              
              COUNTER=$((COUNTER + 1))
              
              # Защита от бесконечного цикла
              if [ "$COUNTER" -gt $((BASE_REVISION + 100)) ]; then
                echo "Error: Could not find available tag after 100 attempts"
                exit 1
              fi
            done
          fi
          
          echo "Final new tag: $NEW_TAG"
          echo "NEW_TAG=${NEW_TAG}" >> $GITHUB_ENV

      - name: Download Artifacts
        uses: actions/download-artifact@v5
        with:
          path: ./downloaded-artifacts
          pattern: '*-make'

      - name: Set release body
        run: |
          cat << 'EOF' > release_body.md
      
          **IMPORTANT DISCLAIMER**
          This software is provided for testing and educational purposes only. Use at your own risk.
          The developers are not responsible for any damage, data loss, or issues that may occur.
          Please ensure you have proper backups before installation.
      
          Features:
          -> Wild KSU
          -> Multi Manager Support for WKSU Manager & KernelSU-Next Manager & other (Only Install One)
          -> SUSFS ඞ v1.5.9
          -> Scope-Minimized Manual hooks v1.5         
          -> Magic Mount Support
          -> Simple Maphide for LineageOS Detections
          -> Futile Maphide for jit-zygote-cache Detections
          -> Ptrace Patch Support for Older Kernels (<5.16)
          -> IPSet Support for Advanced Network Filtering
          -> Wireguard Support
          -> BBR v1 Support
      
          Notes:
          -> SUS SU Mode 2 will show as disabled or not compatble due to non-kprobe hooks and is not needed anymore!
          -> Official Kernel Flasher is broken with latest susfs, try https://github.com/fatalcoder524/KernelFlasher/
          -> **Warning**: boot.img files may not boot on some Android 16 devices
      
          Module: 
          -> https://github.com/sidex15/ksu_module_susfs
      
          Managers:
          -> WKSU: https://github.com/WildKernels/Wild_KSU / https://t.me/Wild_Kernels/26618
          -> KernelSU: https://github.com/tiann/KernelSU / https://t.me/KernelSU_group
          -> KernelSU-Next: https://github.com/rifsxd/KernelSU-Next / https://t.me/ksunext_group
          -> MKSU KernelSU: https://github.com/5ec1cff/KernelSU / https://t.me/mksu_ci                    
          
          Commit Hashes (at the time of release):
          -> WKSU: [${{ env.WKSU_REF }}](${{ env.WKSU_URL }})
          -> KernelSU: [${{ env.KSU_REF }}](${{ env.KSU_URL }})
          -> KernelSU Next: [${{ env.NEXT_REF }}](${{ env.NEXT_URL }})
          -> MKSU: [${{ env.MKSU_REF }}](${{ env.MKSU_URL }})          

          -> SUSFS4KSU: 
            -> gki-android12-5.10: [${{ env.COMMIT_HASH_gki_android12_5_10 }}](${{ env.COMMIT_URL_gki_android12_5_10 }})
            -> gki-android13-5.10: [${{ env.COMMIT_HASH_gki_android13_5_10 }}](${{ env.COMMIT_URL_gki_android13_5_10 }})
            -> gki-android13-5.15: [${{ env.COMMIT_HASH_gki_android13_5_15 }}](${{ env.COMMIT_URL_gki_android13_5_15 }})
            -> gki-android14-5.15: [${{ env.COMMIT_HASH_gki_android14_5_15 }}](${{ env.COMMIT_URL_gki_android14_5_15 }})
            -> gki-android14-6.1: [${{ env.COMMIT_HASH_gki_android14_6_1 }}](${{ env.COMMIT_URL_gki_android14_6_1 }})
            -> gki-android15-6.6: [${{ env.COMMIT_HASH_gki_android15_6_6 }}](${{ env.COMMIT_URL_gki_android15_6_6 }})
          EOF

      - name: Create GitHub Release in NerestKernels Repository
        env:
          GH_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        run: |
          # Debug: Show what artifacts were actually downloaded
          echo "=== DEBUG: Listing downloaded artifacts structure ==="
          if [ -d "./downloaded-artifacts" ]; then
            find ./downloaded-artifacts -type f -name "*" | head -20
            echo "Total files found: $(find ./downloaded-artifacts -type f | wc -l)"
          else
            echo "ERROR: ./downloaded-artifacts directory does not exist!"
            exit 1
          fi
          
          echo "=== DEBUG: Directory structure ==="
          ls -la ./downloaded-artifacts/ || echo "Cannot list ./downloaded-artifacts/"
          
          # Collect all files for upload with better pattern matching
          UPLOAD_FILES=()
          
          # Try different patterns to find kernel files
          echo "=== DEBUG: Searching for kernel files ==="
          
          # Pattern 1: Find all files in downloaded-artifacts recursively
          while IFS= read -r -d '' file; do
            if [ -f "$file" ]; then
              # Skip if it's a directory or hidden file
              if [[ ! "$(basename "$file")" =~ ^\. ]]; then
                UPLOAD_FILES+=("$file")
                echo "Found file: $file"
              fi
            fi
          done < <(find ./downloaded-artifacts -type f -print0 2>/dev/null)
          
          # Alternative: try glob patterns with nullglob option
          if [ ${#UPLOAD_FILES[@]} -eq 0 ]; then
            echo "=== DEBUG: Trying alternative patterns ==="
            shopt -s nullglob
            
            # Try various patterns
            for pattern in \
              "./downloaded-artifacts/*/*" \
              "./downloaded-artifacts/*kernel*/*" \
              "./downloaded-artifacts/*/kernel*" \
              "./downloaded-artifacts/*/*.img" \
              "./downloaded-artifacts/*/*.zip" \
              "./downloaded-artifacts/**/*" \
            ; do
              echo "Trying pattern: $pattern"
              for file in $pattern; do
                if [ -f "$file" ]; then
                  UPLOAD_FILES+=("$file")
                  echo "Found with pattern $pattern: $file"
                fi
              done
            done
            
            shopt -u nullglob
          fi
          
          echo "=== DEBUG: Final file list ==="
          printf '%s\n' "${UPLOAD_FILES[@]}"
          echo "Total files to upload: ${#UPLOAD_FILES[@]}"
          
          # Create release in NerestKernels repository
          if [ ${#UPLOAD_FILES[@]} -gt 0 ]; then
            echo "Creating release in NerestKernels/GKI_KernelSU_SUSFS..."
            
            # Create release with first file
            echo "Creating release with first file: ${UPLOAD_FILES[0]}"
            gh release create "$NEW_TAG" \
              --repo "NerestKernels/GKI_KernelSU_SUSFS" \
              --title "$RELEASE_NAME" \
              --notes-file release_body.md \
              $([ "${{ inputs.release_type }}" == "Pre-Release" ] && echo "--prerelease") \
              "${UPLOAD_FILES[0]}"
            
            # Upload additional files if they exist
            if [ ${#UPLOAD_FILES[@]} -gt 1 ]; then
              echo "Uploading additional files..."
              for i in "${!UPLOAD_FILES[@]}"; do
                if [ $i -gt 0 ]; then
                  echo "Uploading file $((i+1))/${#UPLOAD_FILES[@]}: ${UPLOAD_FILES[$i]}"
                  gh release upload "$NEW_TAG" \
                    --repo "NerestKernels/GKI_KernelSU_SUSFS" \
                    "${UPLOAD_FILES[$i]}" || echo "Failed to upload ${UPLOAD_FILES[$i]}"
                fi
              done
            fi
            
            echo "Release created successfully!"
          else
            echo "ERROR: No files found to upload!"
            echo "=== DEBUG: Final directory check ==="
            find ./downloaded-artifacts -type f -exec ls -la {} \; 2>/dev/null || echo "No files found anywhere"
            exit 1
          fi

      - name: Display Files Uploaded
        run: |
          echo "GitHub release created with the following files:"
          ls ./downloaded-artifacts/**/*
            
      - name: Send Telegram Notification
        run: |
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -F chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -F message_thread_id="${{ secrets.TELEGRAM_MESSAGE_THREAD_ID }}" \
            -F text="
            🌽 *New Kernel Release Uploaded*  
            📦 *Repository:* [${{ github.repository }}](https://github.com/${{ github.repository }})  
            ✏️ *Commit:* [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})  
            [🔗 View GitHub Release](https://github.com/NerestKernels/GKI_KernelSU_SUSFS/releases/tag/${{ env.NEW_TAG }})" \
            -F parse_mode="Markdown"
            
