name: Build GKI

permissions:
  contents: write
  actions: write

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: "Choose Release Type"
        required: true
        type: choice
        options:
          - Actions
          - Pre-Release
          - Release
        default: Pre-Release
      include_wild:
        description: 'Include WILD?'
        required: true
        type: boolean
        default: false
      include_ksu:
        description: 'Include KSU?'
        required: true
        type: boolean
        default: false
      include_next:
        description: 'Include NEXT?'
        required: true
        type: boolean
        default: true
      include_mksu:
        description: 'Include MKSU?'
        required: true
        type: boolean
        default: false
      kernelsu_branch:
        description: "Choose ksu branch"
        required: true
        type: choice
        options:
          - Stable
          - Dev
          - Other
        default: Dev
      kernelsu_branch_other:
        description: "If 'Other' is selected, specify your custom branch"
        required: false
        type: string
        default: ""

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Send Telegram Notification
        run: |
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -F chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -F message_thread_id="${{ secrets.TELEGRAM_MESSAGE_THREAD_ID }}" \
            -F text="
            üöÄ Build started for Kernel! 
            üì¶ *Repository:* [${{ github.repository }}](https://github.com/${{ github.repository }})
            üóÇÔ∏è *Branch:* ${{ github.ref_name }}
            ‚úèÔ∏è *Commit:* [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
            [üîó View GitHub Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" \
            -F parse_mode="Markdown"
            
  set-matrix:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          VARIANTS=()
          [[ "${{ inputs.include_wild }}" == "true" ]] && VARIANTS+=("\"WILD\"")
          [[ "${{ inputs.include_ksu }}" == "true" ]] && VARIANTS+=("\"KSU\"")
          [[ "${{ inputs.include_next }}" == "true" ]] && VARIANTS+=("\"NEXT\"")
          [[ "${{ inputs.include_mksu }}" == "true" ]] && VARIANTS+=("\"MKSU\"")
          echo "matrix={\"kernelsu_variant\": [$(IFS=,; echo "${VARIANTS[*]}")]}" >> $GITHUB_OUTPUT

  build-kernels-a12:
    needs: set-matrix
    uses: ./.github/workflows/kernel-a12.yml
    secrets: inherit
    strategy:
      fail-fast: true
      matrix: ${{ fromJson(needs.set-matrix.outputs.matrix) }}
    with:
      kernelsu_variant: ${{ matrix.kernelsu_variant }}
      kernelsu_branch: ${{ inputs.kernelsu_branch }}
      kernelsu_branch_other: ${{ inputs.kernelsu_branch_other }}

  build-kernels-a13:
    needs: set-matrix
    uses: ./.github/workflows/kernel-a13.yml
    secrets: inherit
    strategy:
      fail-fast: true
      matrix: ${{ fromJson(needs.set-matrix.outputs.matrix) }}
    with:
      kernelsu_variant: ${{ matrix.kernelsu_variant }}
      kernelsu_branch: ${{ inputs.kernelsu_branch }}
      kernelsu_branch_other: ${{ inputs.kernelsu_branch_other }}

  build-kernels-a14:
    needs: set-matrix
    uses: ./.github/workflows/kernel-a14.yml
    secrets: inherit
    strategy:
      fail-fast: true
      matrix: ${{ fromJson(needs.set-matrix.outputs.matrix) }}
    with:
      kernelsu_variant: ${{ matrix.kernelsu_variant }}
      kernelsu_branch: ${{ inputs.kernelsu_branch }}
      kernelsu_branch_other: ${{ inputs.kernelsu_branch_other }}

  build-kernels-a15:
    needs: set-matrix
    uses: ./.github/workflows/kernel-a15.yml
    secrets: inherit
    strategy:
      fail-fast: true
      matrix: ${{ fromJson(needs.set-matrix.outputs.matrix) }}
    with:
      kernelsu_variant: ${{ matrix.kernelsu_variant }}
      kernelsu_branch: ${{ inputs.kernelsu_branch }}
      kernelsu_branch_other: ${{ inputs.kernelsu_branch_other }}

  release:
    if: ${{ inputs.release_type == 'Release' || inputs.release_type == 'Pre-Release' }}
    runs-on: ubuntu-latest
    needs:
      - build-kernels-a12
      - build-kernels-a13
      - build-kernels-a14
      - build-kernels-a15
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      RELEASE_NAME: "GKI Kernels With WildKSU & SUSFS v1.5.9"
      RELEASE_BODY:
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get commit hashes and generate commit URLs
        run: |
          GITLAB_OWNER="simonpunk"
          GITLAB_REPO="susfs4ksu"
          
          declare -A BRANCH_MAP=(
            ["gki_android12_5_10"]="gki-android12-5.10"
            ["gki_android13_5_10"]="gki-android13-5.10"
            ["gki_android13_5_15"]="gki-android13-5.15"
            ["gki_android14_5_15"]="gki-android14-5.15"
            ["gki_android14_6_1"]="gki-android14-6.1"
            ["gki_android15_6_6"]="gki-android15-6.6"
          )
          
          for var_name in "${!BRANCH_MAP[@]}"; do
            branch_name="${BRANCH_MAP[$var_name]}"
            COMMIT_HASH=$(git ls-remote https://gitlab.com/$GITLAB_OWNER/$GITLAB_REPO.git refs/heads/$branch_name | awk '{ print $1 }')
            
            if [[ -n "$COMMIT_HASH" ]]; then
              COMMIT_URL="https://gitlab.com/$GITLAB_OWNER/$GITLAB_REPO/-/commit/$COMMIT_HASH"
              echo "$branch_name Commit: $COMMIT_HASH"
              echo "$branch_name Commit URL: $COMMIT_URL"
              
              echo "COMMIT_HASH_${var_name}=$COMMIT_HASH" >> "$GITHUB_ENV"
              echo "COMMIT_URL_${var_name}=$COMMIT_URL" >> "$GITHUB_ENV"
            fi
          done

      - name: Get KernelSU variant refs and links
        run: |
          BRANCH="${{ inputs.kernelsu_branch }}"
      
          get_ref() {
            local name="$1" repo="$2" path="$3" mode="$4"
            if [[ "$mode" == "tag" ]]; then
              ref=$(git ls-remote --tags --sort=-v:refname "$repo" | grep -o 'refs/tags/.*' | cut -d/ -f3 | head -n1)
              url="https://github.com/$path/releases/tag/$ref"
            else
              ref=$(git ls-remote "$repo" HEAD | awk '{print $1}')
              url="https://github.com/$path/commit/$ref"
            fi
            echo "${name}_REF=$ref" >> $GITHUB_ENV
            echo "${name}_URL=$url" >> $GITHUB_ENV
          }
      
          [[ "$BRANCH" == "Stable" ]] && MODE="tag" || MODE="commit"

          get_ref "WILD" "https://github.com/WildKernels/Wild_KSU.git" "WildKernels/Wild_KSU" "$MODE"
          get_ref "KSU" "https://github.com/tiann/KernelSU.git" "tiann/KernelSU" "$MODE"
          get_ref "NEXT" "https://github.com/KernelSU-Next/KernelSU-Next.git" "KernelSU-Next/KernelSU-Next" "$MODE"
          get_ref "MKSU" "https://github.com/5ec1cff/KernelSU.git" "5ec1cff/KernelSU" "commit"

      - name: Generate and Create New Tag
        run: |
          # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–≥ –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è NerestKernels
          LATEST_TAG=$(gh api repos/NerestKernels/GKI_KernelSU_SUSFS/tags --jq '.[0].name' 2>/dev/null || echo "")
          
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="v1.5.9-r0"
          fi
          
          echo "Latest tag from NerestKernels/GKI_KernelSU_SUSFS: $LATEST_TAG"
          
          # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–µ–≥ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º —Ä–µ–≤–∏–∑–∏–∏
          NEW_TAG=$(echo "$LATEST_TAG" | awk -F'-r' '{
            if (NF > 1) {
              suffix = $NF + 1
              gsub(/-r[0-9]+$/, "", $0)
              printf "%s-r%d", $0, suffix
            } else {
              printf "%s-r1", $0
            }
          }')
          
          echo "Proposed new tag: $NEW_TAG"
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ–≥ –≤ —Ç–µ–∫—É—â–µ–º (–ø—Ä–∏–≤–∞—Ç–Ω–æ–º) —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
          # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–≥–∏ –∏–∑ remote
          git fetch --tags 2>/dev/null || true
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –∏ –Ω–∞ remote
          TAG_EXISTS_LOCAL=$(git tag -l "$NEW_TAG" | wc -l)
          TAG_EXISTS_REMOTE=$(git ls-remote --tags origin "refs/tags/$NEW_TAG" 2>/dev/null | wc -l)
          
          if [ "$TAG_EXISTS_LOCAL" -gt 0 ] || [ "$TAG_EXISTS_REMOTE" -gt 0 ]; then
            echo "Tag $NEW_TAG already exists in current repository, finding next available tag"
            
            # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ç–µ–≥
            BASE_VERSION=$(echo "$NEW_TAG" | sed 's/-r[0-9]*$//')
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ä–µ–≤–∏–∑–∏–∏ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ–≥–∞ NerestKernels
            BASE_REVISION=$(echo "$LATEST_TAG" | grep -o 'r[0-9]*$' | sed 's/r//' || echo "0")
            COUNTER=$((BASE_REVISION + 1))
            
            while true; do
              CANDIDATE_TAG="${BASE_VERSION}-r${COUNTER}"
              LOCAL_EXISTS=$(git tag -l "$CANDIDATE_TAG" | wc -l)
              REMOTE_EXISTS=$(git ls-remote --tags origin "refs/tags/$CANDIDATE_TAG" 2>/dev/null | wc -l)
              
              if [ "$LOCAL_EXISTS" -eq 0 ] && [ "$REMOTE_EXISTS" -eq 0 ]; then
                NEW_TAG="$CANDIDATE_TAG"
                echo "Found available tag: $NEW_TAG"
                break
              fi
              
              COUNTER=$((COUNTER + 1))
              
              # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
              if [ "$COUNTER" -gt $((BASE_REVISION + 100)) ]; then
                echo "Error: Could not find available tag after 100 attempts"
                exit 1
              fi
            done
          fi
          
          echo "Final new tag: $NEW_TAG"
          echo "NEW_TAG=${NEW_TAG}" >> $GITHUB_ENV
          
          # –°–æ–∑–¥–∞–µ–º –∏ –ø—É—à–∏–º —Ç–µ–≥ –≤ —Ç–µ–∫—É—â–∏–π (–ø—Ä–∏–≤–∞—Ç–Ω—ã–π) —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
          git tag "$NEW_TAG"
          
          # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—à–∏—Ç—å —Ç–µ–≥, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø—Ä–∏—á–∏–Ω—É
          if ! git push origin "$NEW_TAG"; then
            echo "Normal push failed, checking if tag exists on remote..."
            
            # –î–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –º–æ–∂–µ—Ç —Ç–µ–≥ –ø–æ—è–≤–∏–ª—Å—è –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
            REMOTE_CHECK=$(git ls-remote --tags origin "refs/tags/$NEW_TAG" 2>/dev/null | wc -l)
            
            if [ "$REMOTE_CHECK" -gt 0 ]; then
              echo "Tag $NEW_TAG appeared on remote, generating new one..."
              # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–≥
              CURRENT_COUNTER=$(echo "$NEW_TAG" | grep -o 'r[0-9]*$' | sed 's/r//')
              COUNTER=$((CURRENT_COUNTER + 1))
              BASE_VERSION=$(echo "$NEW_TAG" | sed 's/-r[0-9]*$//')
              NEW_TAG="${BASE_VERSION}-r${COUNTER}"
              
              # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π —Ç–µ–≥ –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
              git tag -d "$(echo "$NEW_TAG" | sed "s/r${COUNTER}/r${CURRENT_COUNTER}/")" 2>/dev/null || true
              git tag "$NEW_TAG"
              git push origin "$NEW_TAG"
              
              echo "NEW_TAG=${NEW_TAG}" >> $GITHUB_ENV
              echo "Created and pushed new tag $NEW_TAG"
            else
              echo "Push failed for unknown reason"
              exit 1
            fi
          else
            echo "Successfully created and pushed tag $NEW_TAG"
          fi

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./downloaded-artifacts

      - name: Set release body
        run: |
          cat << 'EOF' > release_body.md
          
          Branch type for KSU: ${{ inputs.kernelsu_branch }}
          Nerest Current Kernel Tag: ${{ env.NEW_TAG }}
      
          Features:
          -> Nerest KSU Kernels & Others
          -> Multi Manager Support for Wild Kernels & Next Kernels (Not Recommended)
          -> SUSFS ‡∂û v1.5.9
          -> Scope-Minimized Manual hooks v1.5
          -> Magic Mount Support
          -> Simple Maphide for LineageOS Detections
          -> Futile Maphide for jit-zygote-cache Detections
          -> Wireguard Support
          -> BBR Support
          -> LTO = full
      
          Notes:
          -> Wild KSU & KernelSU-Next, SUS SU Mode 2 will show as disabled or not compatble due to non-kprobe hooks and is not needed anymore!
          -> Official Kernel Flasher is broken with latest susfs, try https://github.com/fatalcoder524/KernelFlasher/ or https://github.com/libxzr/HorizonKernelFlasher!
      
          Module: 
          -> https://github.com/sidex15/ksu_module_susfs
      
          Managers:
          -> Wild KSU: https://github.com/WildKernels/Wild_KSU / https://t.me/NerestKernels
          -> KernelSU: https://github.com/tiann/KernelSU / https://t.me/KernelSU_group
          -> 5ec1cff's KernelSU: https://github.com/5ec1cff/KernelSU / https://t.me/mksu_ci
          -> KernelSU-Next: https://github.com/rifsxd/KernelSU-Next / https://t.me/ksunext_group
          -> rsuntk: https://github.com/rsuntk/KernelSU / https://t.me/rsukrnlsu
          -> backslashxx: https://github.com/backslashxx/KernelSU
      
          Commit Hashes (at the time of release):
          -> Wild KSU: [${{ env.WILD_REF }}](${{ env.WILD_URL }})
          -> KernelSU: [${{ env.KSU_REF }}](${{ env.KSU_URL }})
          -> 5ec1cff: [${{ env.MKSU_REF }}](${{ env.MKSU_URL }})
          -> KernelSU Next: [${{ env.NEXT_REF }}](${{ env.NEXT_URL }})
          -> SUSFS4KSU: 
            -> gki-android12-5.10: [${{ env.COMMIT_HASH_gki_android12_5_10 }}](${{ env.COMMIT_URL_gki_android12_5_10 }})
            -> gki-android13-5.10: [${{ env.COMMIT_HASH_gki_android13_5_10 }}](${{ env.COMMIT_URL_gki_android13_5_10 }})
            -> gki-android13-5.15: [${{ env.COMMIT_HASH_gki_android13_5_15 }}](${{ env.COMMIT_URL_gki_android13_5_15 }})
            -> gki-android14-5.15: [${{ env.COMMIT_HASH_gki_android14_5_15 }}](${{ env.COMMIT_URL_gki_android14_5_15 }})
            -> gki-android14-6.1: [${{ env.COMMIT_HASH_gki_android14_6_1 }}](${{ env.COMMIT_URL_gki_android14_6_1 }})
            -> gki-android15-6.6: [${{ env.COMMIT_HASH_gki_android15_6_6 }}](${{ env.COMMIT_URL_gki_android15_6_6 }})
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.NEW_TAG }}
          prerelease: ${{ inputs.release_type == 'Pre-Release' }}
          files: ""
          name: ${{ env.RELEASE_NAME }}
          body_path: release_body.md

      - name: Upload Release Assets
        run: |
          for file in ./downloaded-artifacts/*-kernel-*/*; do
            if [ -d "$file" ]; then
              continue
            fi
            echo "Uploading $file..."
            gh release upload ${{ env.NEW_TAG }} "$file"
          done

      - name: Display Files Uploaded
        run: |
          echo "GitHub release created with the following files:"
          ls ./downloaded-artifacts/**/*
            
      - name: Send Telegram Notification
        run: |
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -F chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -F message_thread_id="${{ secrets.TELEGRAM_MESSAGE_THREAD_ID }}" \
            -F text="
            üåΩ *New Kernel Release Uploaded*  
            üì¶ *Repository:* [${{ github.repository }}](https://github.com/${{ github.repository }})  
            üóÇÔ∏è *Branch:* ${{ github.ref_name }}  
            ‚úèÔ∏è *Commit:* [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})  
            [üîó View GitHub Release](https://github.com/${{ github.repository }}/releases/tag/${{ env.NEW_TAG }})" \
            -F parse_mode="Markdown"
            
