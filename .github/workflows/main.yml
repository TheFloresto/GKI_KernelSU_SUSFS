name: Build and Release SukiSU Kernels

permissions:
  contents: write # Allow writing to repository contents (for pushing tags)
  actions: write # Allows triggering actions

on:
  workflow_dispatch:
    inputs:
      build_a12_510:
        description: "Build a12 5.10?"
        required: true
        type: boolean
        default: true
      build_a13_510:
        description: "Build a13 5.10?"
        required: true
        type: boolean
        default: true
      build_a13_515:
        description: "Build a13 5.15?"
        required: true
        type: boolean
        default: true
      build_a14_515:
        description: "Build a14 5.15?"
        required: true
        type: boolean
        default: true
      build_a14_61:
        description: "Build a14 6.1?"
        required: true
        type: boolean
        default: true
      build_a15_66:
        description: "Build a15  6.6?"
        required: true
        type: boolean
        default: true
      make_release:
        description: "Do you want to create a release?"
        required: true
        type: boolean
        default: true
      kernelsu_variant:
        description: "Choose KernelSU"
        required: true
        type: choice
        options:
          - SukiSU
        default: SukiSU
      kernelsu_branch:
        description: "Choose ksu branch"
        required: true
        type: choice
        options:
          - Stable
          - Dev
          - Other
        default: Dev
      kernelsu_branch_other:
        description: "If 'Other' is selected, specify your custom branch"
        required: false
        type: string # This input is required if 'Other' is chosen
        default: "" # Default is empty, but can be filled in if 'Other' is selected

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Send Telegram Notification
        run: |
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -F chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -F message_thread_id="${{ secrets.TELEGRAM_MESSAGE_THREAD_ID }}" \
            -F text="
            🚀 Build started for Kernel! 
            📦 *Repository:* [${{ github.repository }}](https://github.com/${{ github.repository }})
            🗂️ *Branch:* ${{ github.ref_name }}
            ✏️ *Commit:* [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
            [🔗 View GitHub Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" \
            -F parse_mode="Markdown"

  build-kernel-a12-5-10:
    if: ${{ inputs.build_a12_510 }}
    uses: ./.github/workflows/kernel-a12-5.10.yml
    secrets: inherit
    with:
      make_release: ${{ inputs.make_release }}
      kernelsu_variant: ${{ inputs.kernelsu_variant }}
      kernelsu_branch: ${{ inputs.kernelsu_branch }}
      kernelsu_branch_other: ${{ inputs.kernelsu_branch_other }}

  build-kernel-a13-5-10:
    if: ${{ inputs.build_a13_510 }}
    uses: ./.github/workflows/kernel-a13-5.10.yml
    secrets: inherit
    with:
      make_release: ${{ inputs.make_release }}
      kernelsu_variant: ${{ inputs.kernelsu_variant }}
      kernelsu_branch: ${{ inputs.kernelsu_branch }}
      kernelsu_branch_other: ${{ inputs.kernelsu_branch_other }}

  build-kernel-a13-5-15:
    if: ${{ inputs.build_a13_515 }}
    uses: ./.github/workflows/kernel-a13-5.15.yml
    secrets: inherit
    with:
      make_release: ${{ inputs.make_release }}
      kernelsu_variant: ${{ inputs.kernelsu_variant }}
      kernelsu_branch: ${{ inputs.kernelsu_branch }}
      kernelsu_branch_other: ${{ inputs.kernelsu_branch_other }}

  build-kernel-a14-5-15:
    if: ${{ inputs.build_a14_515 }}
    uses: ./.github/workflows/kernel-a14-5.15.yml
    secrets: inherit
    with:
      make_release: ${{ inputs.make_release }}
      kernelsu_variant: ${{ inputs.kernelsu_variant }}
      kernelsu_branch: ${{ inputs.kernelsu_branch }}
      kernelsu_branch_other: ${{ inputs.kernelsu_branch_other }}

  build-kernel-a14-6-1:
    if: ${{ inputs.build_a14_61 }}
    uses: ./.github/workflows/kernel-a14-6.1.yml
    secrets: inherit
    with:
      make_release: ${{ inputs.make_release }}
      kernelsu_variant: ${{ inputs.kernelsu_variant }}
      kernelsu_branch: ${{ inputs.kernelsu_branch }}
      kernelsu_branch_other: ${{ inputs.kernelsu_branch_other }}

  build-kernel-a15-6-6:
    if: ${{ inputs.build_a15_66 }}
    uses: ./.github/workflows/kernel-a15-6.6.yml
    secrets: inherit
    with:
      make_release: ${{ inputs.make_release }}
      kernelsu_variant: ${{ inputs.kernelsu_variant }}
      kernelsu_branch: ${{ inputs.kernelsu_branch }}
      kernelsu_branch_other: ${{ inputs.kernelsu_branch_other }}

  trigger-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
    needs:
      - build-kernel-a12-5-10
      - build-kernel-a13-5-10
      - build-kernel-a13-5-15
      - build-kernel-a14-5-15
      - build-kernel-a14-6-1
      - build-kernel-a15-6-6
    if: ${{ inputs.make_release && always() }}
    env:
      REPO_OWNER: TheFloresto
      REPO_NAME: GKI_KernelSU_SUSFS
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      # Get Date
      - name: Get current date
        id: date
        run: |
          echo "currentdate=$(date +"%Y-%m-%d-%H-%M-%S")" >> $GITHUB_ENV

      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine the branch for KernelSU-${{ inputs.kernelsu_variant }}
        if: ${{ inputs.kernelsu_branch == 'Dev' || inputs.kernelsu_variant == 'SukiSU' }}
        run: |
          # Determine the branch based on user input
          if [[ "${{ inputs.kernelsu_variant }}" == "SukiSU" ]]; then
            BRANCH="main"
          elif [[ "${{ inputs.kernelsu_branch }}" == "Other" && -n "${{ inputs.kernelsu_branch_other }}" ]]; then
            BRANCH="${{ inputs.kernelsu_branch_other }}"
          else
            echo "Error: Custom branch not provided for 'Other'" >&2
            exit 1
          fi

          # Store the selected branch in GITHUB_ENV
          echo "KSU_BRANCH=$BRANCH" >> $GITHUB_ENV

      - name: Get commit hash or tag and generate URL for KernelSU-${{ inputs.kernelsu_variant }}
        run: |
          if [ "${{ inputs.kernelsu_variant }}" == "SukiSU" ]; then
            echo "This is the SukiSU variant"
            REPO_URL="https://github.com/SukiSU-Ultra/SukiSU-Ultra.git"
            REPO_URL2="SukiSU-Ultra/SukiSU-Ultra"
          else
            echo "Unknown variant"
          fi

          if [[ "${{ inputs.kernelsu_branch }}" == "Stable" && "${{ inputs.kernelsu_variant }}" != "SukiSU" ]]; then
            # Fetch the latest tag
            TAG=$(git ls-remote --tags --sort=-v:refname $REPO_URL | grep -o 'refs/tags/.*' | cut -d'/' -f3 | head -n1)
            if [[ -z "$TAG" ]]; then
              echo "Error: Could not fetch latest tag for Stable" >&2
              exit 1
            fi
            KSU_REF=$TAG
            KSU_URL="https://github.com/$REPO_URL2/releases/tag/$TAG"

          elif [[ "${{ inputs.kernelsu_branch }}" == "Dev" || "${{ inputs.kernelsu_variant }}" == "SukiSU" ]]; then
            # Fetch the latest commit from "main" branch for SukiSU
            COMMIT_HASH=$(git ls-remote $REPO_URL refs/heads/$KSU_BRANCH | awk '{ print $1 }')
            if [[ -z "$COMMIT_HASH" ]]; then
              echo "Error: Could not fetch latest commit for Dev" >&2
              exit 1
            fi
            KSU_REF=$COMMIT_HASH
            KSU_URL="https://github.com/$REPO_URL2/commit/$COMMIT_HASH"

          else
            # Fetch the specific tag
            TAG=${{ inputs.kernelsu_branch_other }}
            if git ls-remote --tags $REPO_URL | grep -q "refs/tags/$TAG"; then
              KSU_REF=$TAG
              KSU_URL="https://github.com/$REPO_URL2/releases/tag/$TAG"
            else
              echo "Error: Specified tag '$TAG' not found in SukiSU-Ultra" >&2
              exit 1
            fi
          fi

          # Echo the values to GitHub environment for later use
          echo "KSU_REF=$KSU_REF" >> $GITHUB_ENV
          echo "KSU_URL=$KSU_URL" >> $GITHUB_ENV
          echo "KernelSU Reference: $KSU_REF"
          echo "KernelSU URL: $KSU_URL"

      - name: Get commit hashes and generate commit URLs
        run: |
          GITLAB_OWNER="simonpunk"
          GITLAB_REPO="susfs4ksu"

          declare -A BRANCH_MAP=(
            ["gki_android12_5_10"]="gki-android12-5.10"
            ["gki_android13_5_10"]="gki-android13-5.10"
            ["gki_android13_5_15"]="gki-android13-5.15"
            ["gki_android14_5_15"]="gki-android14-5.15"
            ["gki_android14_6_1"]="gki-android14-6.1"
            ["gki_android15_6_6"]="gki-android15-6.6"
          )

          for var_name in "${!BRANCH_MAP[@]}"; do
            branch_name="${BRANCH_MAP[$var_name]}"
            COMMIT_HASH=$(git ls-remote https://gitlab.com/$GITLAB_OWNER/$GITLAB_REPO.git refs/heads/$branch_name | awk '{ print $1 }')

            if [[ -n "$COMMIT_HASH" ]]; then
              COMMIT_URL="https://gitlab.com/$GITLAB_OWNER/$GITLAB_REPO/-/commit/$COMMIT_HASH"
              echo "$branch_name Commit: $COMMIT_HASH"
              echo "$branch_name Commit URL: $COMMIT_URL"

              # Store commit hash and commit URL in GitHub environment
              echo "COMMIT_HASH_${var_name}=$COMMIT_HASH" >> "$GITHUB_ENV"
              echo "COMMIT_URL_${var_name}=$COMMIT_URL" >> "$GITHUB_ENV"
            fi
          done

      - name: Build Release Notes
        run: |
          cat << 'EOF' > release_notes.md
          > [!CAUTION]
          > Take your own risk! Nobody tested. `fastboot boot` before flash it.

          Features:
            -> ${{ inputs.kernelsu_variant }} (${{ inputs.kernelsu_branch }})
            -> SukiSU Ultra Kernels
            -> Multi Manager Support (Not Recommended)
            -> SUSFS ඞ v1.5.9
            -> Scope-Minimized syscall hooks
            -> Magic Mount Support
            -> Simple Maphide for LineageOS Detections
            -> Futile Maphide for jit-zygote-cache Detections
            -> Wireguard Support
            -> BBR Support
            -> LTO = thin
            
          Notes:
            -> SukiSU Ultra, SUS SU Mode 2 will show as disabled or not compatible due to non-kprobe hooks and is not needed anymore!
            -> Official Kernel Flasher is broken with latest susfs, try https://github.com/fatalcoder524/KernelFlasher/ or https://github.com/libxzr/HorizonKernelFlasher!

          Usage: 
            - Use [HorizonKernelFlasher](https://github.com/libxzr/HorizonKernelFlasher). Don't use Kernel Flasher, it is broken.
            - Another way (same as update), is, touch "Working"(status) card in SukiSU Ultra, touch GKI/non-GKI installation, touch Install Anykernel3, then select AnyKernel3 zip file.
            
          Module: 
            -> https://github.com/sidex15/ksu_module_susfs
        
          Managers:
            -> SukiSU Ultra: https://github.com/SukiSU-Ultra/SukiSU-Ultra / https://t.me/Sukiksu

          > [!NOTE]  
          > SUS SU Mode 2 will show as disabled or not compatible due to non-kprobe hooks and is not needed anymore! 

          SUSFS manage WebUI: 
          - https://github.com/sidex15/susfs4ksu-module

          <details>
          <summary>Commit Hashes and Links</summary>

          - SukiSU Ultra:
            - ${{ inputs.kernelsu_variant }}-${{ inputs.kernelsu_branch }}: [${{ env.KSU_REF }}](${{ env.KSU_URL }})
          - SUSFS4KSU:
            - gki-android12-5.10: [${{ env.COMMIT_HASH_gki_android12_5_10 }}](${{ env.COMMIT_URL_gki_android12_5_10 }})
            - gki-android13-5.10: [${{ env.COMMIT_HASH_gki_android13_5_10 }}](${{ env.COMMIT_URL_gki_android13_5_10 }})
            - gki-android13-5.15: [${{ env.COMMIT_HASH_gki_android13_5_15 }}](${{ env.COMMIT_URL_gki_android13_5_15 }})
            - gki-android14-5.15: [${{ env.COMMIT_HASH_gki_android14_5_15 }}](${{ env.COMMIT_URL_gki_android14_5_15 }})
            - gki-android14-6.1: [${{ env.COMMIT_HASH_gki_android14_6_1 }}](${{ env.COMMIT_URL_gki_android14_6_1 }})
            - gki-android15-6.6: [${{ env.COMMIT_HASH_gki_android15_6_6 }}](${{ env.COMMIT_URL_gki_android15_6_6 }})

          </details>
          EOF

          # Store the release notes in environment variable
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          cat release_notes.md >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # Get the Latest Tag from GitHub and Create New Tag
      - name: Generate and Create New Tag
        run: |
          # Fetch the latest tag from GitHub
          LATEST_TAG=$(gh api repos/$REPO_OWNER/$REPO_NAME/tags --jq '.[0].name')
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="v1.5.9-r0"
          fi

          # Generate incremental tag like in the second script
          NEW_TAG=$(echo "$LATEST_TAG" | awk -F'-r' '{suffix=$2; if (!suffix) suffix=0; suffix++; printf "%s-r%d", $1, suffix}')

          # Output the new tag to be used
          echo "New tag: $NEW_TAG"

          # Set the new tag as an environment variable to be used in later steps
          echo "NEW_TAG=${NEW_TAG}" >> $GITHUB_ENV

          # Create the tag in the repository
          git tag $NEW_TAG
          git push origin $NEW_TAG

      # Download Artifacts
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./downloaded-artifacts

      # Create GitHub Release and upload files if make_release is true
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.NEW_TAG }}
          prerelease: true
          name: ${{ env.NEW_TAG }}
          body: ${{ env.RELEASE_NOTES }}

      - name: Upload Release Assets Dynamically
        run: |
          # Loop through all files in the downloaded-artifacts directory
          for file in ./downloaded-artifacts/kernel-*/*; do
              # Skip directories
              if [ -d "$file" ]; then
                  continue
              fi

              # Upload the file to the GitHub release
              echo "Uploading $file..."
              gh release upload ${{ env.NEW_TAG }} "$file"
          done

      # Display Files Uploaded
      - name: Display Files Uploaded
        run: |
          echo "GitHub release created with the following files:"
          ls ./downloaded-artifacts/**/*

      - name: Send Telegram Notification
        run: |
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -F chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -F message_thread_id="${{ secrets.TELEGRAM_MESSAGE_THREAD_ID }}" \
            -F text="
            🌽 *New SukiSU Kernel Release Uploaded*  
            📦 *Repository:* [${{ github.repository }}](https://github.com/${{ github.repository }})  
            🗂️ *Branch:* ${{ github.ref_name }}  
            ✏️ *Commit:* [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})  
            [🔗 View GitHub Release](https://github.com/${{ github.repository }}/releases/tag/${{ env.NEW_TAG }})" \
            -F parse_mode="Markdown"
