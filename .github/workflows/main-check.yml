name: Build Kernels

permissions:
  contents: write
  actions: write

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: "Choose Release Type"
        required: true
        type: choice
        options:
          - Actions
          - Pre-Release
          - Release
        default: Pre-Release
      include_wild:
        description: 'Include WKSU?'
        required: true
        type: boolean
        default: false
      include_ksu:
        description: 'Include KSU?'
        required: true
        type: boolean
        default: false
      include_next:
        description: 'Include NEXT?'
        required: true
        type: boolean
        default: true
      include_mksu:
        description: 'Include MKSU?'
        required: true
        type: boolean
        default: false
      kernelsu_branch:
        description: "Choose ksu branch"
        required: true
        type: choice
        options:
          - Stable
          - Dev
          - Other
        default: Dev
      kernelsu_branch_other:
        description: "If 'Other' is selected, specify your custom branch"
        required: false
        type: string
        default: ""

jobs:
  set-matrix:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          VARIANTS=()
          [[ "${{ inputs.include_wild }}" == "true" ]] && VARIANTS+=("\"WILD\"")
          [[ "${{ inputs.include_ksu }}" == "true" ]] && VARIANTS+=("\"KSU\"")
          [[ "${{ inputs.include_next }}" == "true" ]] && VARIANTS+=("\"NEXT\"")
          [[ "${{ inputs.include_mksu }}" == "true" ]] && VARIANTS+=("\"MKSU\"")
          echo "matrix={\"kernelsu_variant\": [$(IFS=,; echo "${VARIANTS[*]}")]}" >> $GITHUB_OUTPUT

  build-all-lts:
    needs: set-matrix
    uses: ./.github/workflows/build-check-lts.yml
    secrets: inherit
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.set-matrix.outputs.matrix) }}
    with:
      kernelsu_variant: ${{ matrix.kernelsu_variant }}
      kernelsu_branch: ${{ inputs.kernelsu_branch }}
      kernelsu_branch_other: ${{ inputs.kernelsu_branch_other }}

  release:
    if: ${{ inputs.release_type == 'Release' || inputs.release_type == 'Pre-Release' }}    
    runs-on: ubuntu-latest
    needs: build-all-lts

    steps:
      - name: Maximize Build Space
        uses: AdityaGarg8/remove-unwanted-software@v5
        with:
          remove-swapfile: 'true'
          verbose: 'true'

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get commit hashes and generate commit URLs
        run: |
          GITLAB_OWNER="simonpunk"
          GITLAB_REPO="susfs4ksu"
          
          declare -A BRANCH_MAP=(
            ["gki_android12_5_10"]="gki-android12-5.10"
            ["gki_android13_5_10"]="gki-android13-5.10"
            ["gki_android13_5_15"]="gki-android13-5.15"
            ["gki_android14_5_15"]="gki-android14-5.15"
            ["gki_android14_6_1"]="gki-android14-6.1"
            ["gki_android15_6_6"]="gki-android15-6.6"
          )
          
          for var_name in "${!BRANCH_MAP[@]}"; do
            branch_name="${BRANCH_MAP[$var_name]}"
            COMMIT_HASH=$(git ls-remote https://gitlab.com/$GITLAB_OWNER/$GITLAB_REPO.git refs/heads/$branch_name | awk '{ print $1 }')
            
            if [[ -n "$COMMIT_HASH" ]]; then
              COMMIT_URL="https://gitlab.com/$GITLAB_OWNER/$GITLAB_REPO/-/commit/$COMMIT_HASH"
              echo "$branch_name Commit: $COMMIT_HASH"
              echo "$branch_name Commit URL: $COMMIT_URL"
              
              echo "COMMIT_HASH_${var_name}=$COMMIT_HASH" >> "$GITHUB_ENV"
              echo "COMMIT_URL_${var_name}=$COMMIT_URL" >> "$GITHUB_ENV"
            fi
          done

      - name: Get KernelSU variant refs and links
        run: |
          BRANCH="${{ inputs.kernelsu_branch }}"
      
          get_ref() {
            local name="$1" repo="$2" path="$3" mode="$4"
            if [[ "$mode" == "tag" ]]; then
              ref=$(git ls-remote --tags --sort=-v:refname "$repo" | grep -o 'refs/tags/.*' | cut -d/ -f3 | head -n1)
              url="https://github.com/$path/releases/tag/$ref"
            else
              ref=$(git ls-remote "$repo" HEAD | awk '{print $1}')
              url="https://github.com/$path/commit/$ref"
            fi
            echo "${name}_REF=$ref" >> $GITHUB_ENV
            echo "${name}_URL=$url" >> $GITHUB_ENV
          }
      
          [[ "$BRANCH" == "Stable" ]] && MODE="tag" || MODE="commit"

          get_ref "WILD" "https://github.com/WildKernels/Wild_KSU.git" "WildKernels/Wild_KSU" "$MODE"
          get_ref "KSU" "https://github.com/tiann/KernelSU.git" "tiann/KernelSU" "$MODE"
          get_ref "NEXT" "https://github.com/KernelSU-Next/KernelSU-Next.git" "KernelSU-Next/KernelSU-Next" "$MODE"
          get_ref "MKSU" "https://github.com/5ec1cff/KernelSU.git" "5ec1cff/KernelSU" "commit"

      - name: Generate New Tag
        env:
          GH_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        run: |
          LATEST_TAG=$(gh api repos/NerestKernels/GKI_KernelSU_SUSFS/tags --jq '.[0].name' 2>/dev/null || echo "")
          
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="v1.5.9-r0"
          fi
          
          echo "Latest tag from NerestKernels/GKI_KernelSU_SUSFS: $LATEST_TAG"
          
          NEW_TAG=$(echo "$LATEST_TAG" | awk -F'-r' '{
            if (NF > 1) {
              suffix = $NF + 1
              gsub(/-r[0-9]+$/, "", $0)
              printf "%s-r%d", $0, suffix
            } else {
              printf "%s-r1", $0
            }
          }')
          
          echo "Proposed new tag: $NEW_TAG"
          
          TAG_EXISTS=$(gh api repos/NerestKernels/GKI_KernelSU_SUSFS/tags --jq ".[] | select(.name == \"$NEW_TAG\") | .name" 2>/dev/null || echo "")
          
          if [ -n "$TAG_EXISTS" ]; then
            echo "Tag $NEW_TAG already exists in NerestKernels repository, finding next available tag"
            
            BASE_VERSION=$(echo "$NEW_TAG" | sed 's/-r[0-9]*$//')
            BASE_REVISION=$(echo "$LATEST_TAG" | grep -o 'r[0-9]*$' | sed 's/r//' || echo "0")
            COUNTER=$((BASE_REVISION + 1))
            
            while true; do
              CANDIDATE_TAG="${BASE_VERSION}-r${COUNTER}"
              TAG_CHECK=$(gh api repos/NerestKernels/GKI_KernelSU_SUSFS/tags --jq ".[] | select(.name == \"$CANDIDATE_TAG\") | .name" 2>/dev/null || echo "")
              
              if [ -z "$TAG_CHECK" ]; then
                NEW_TAG="$CANDIDATE_TAG"
                echo "Found available tag: $NEW_TAG"
                break
              fi
              
              COUNTER=$((COUNTER + 1))
              
              if [ "$COUNTER" -gt $((BASE_REVISION + 100)) ]; then
                echo "Error: Could not find available tag after 100 attempts"
                exit 1
              fi
            done
          fi
          
          echo "Final new tag: $NEW_TAG"
          echo "NEW_TAG=${NEW_TAG}" >> $GITHUB_ENV

      - name: Download Artifacts
        uses: actions/download-artifact@v5
        with:
          path: ./downloaded-artifacts
          pattern: '*-make'

      - name: Set release body
        run: |
          cat << 'EOF' > release_body.md
      
          **IMPORTANT DISCLAIMER**
          This software is provided for testing and educational purposes only. Use at your own risk.
          The developers are not responsible for any damage, data loss, or issues that may occur.
          Please ensure you have proper backups before installation.
      
          Features:
          -> Wild KSU
          -> Multi Manager Support for WKSU Manager & KernelSU-Next Manager & KernelSU Manager & MKSU & RKSU & xxKSU (Only Install One)
          -> SUSFS ඞ v1.5.9
          -> Scope-Minimized Manual hooks v1.5
          -> Magic Mount Support
          -> Simple Maphide for LineageOS Detections
          -> Futile Maphide for jit-zygote-cache Detections
          -> Ptrace Patch Support for Older Kernels (<5.16)
          -> IPSet Support for Advanced Network Filtering
          -> Wireguard Support
          -> BBR v1 Support
      
          Build Types:
          -> **Make Build**: Built using traditional make
          -> **Normal Build**: Built using Bazel or build.sh
          -> **For avbroot users**: Try the normal build from CI to get proper KMI (Kernel Module Interface) compatibility

          Notes:
          -> SUS SU Mode 2 will show as disabled or not compatble due to non-kprobe hooks and is not needed anymore!
          -> Official Kernel Flasher is broken with latest susfs, try https://github.com/fatalcoder524/KernelFlasher/
          -> **Warning**: boot.img files may not boot on some Android 16 devices
      
          Module: 
          -> https://github.com/sidex15/ksu_module_susfs
      
          Managers:
          -> WKSU: https://github.com/WildKernels/Wild_KSU / https://t.me/Wild_Kernels/26618
          -> KernelSU: https://github.com/tiann/KernelSU / https://t.me/KernelSU_group
          -> KernelSU-Next: https://github.com/rifsxd/KernelSU-Next / https://t.me/ksunext_group
          -> MKSU: https://github.com/5ec1cff/KernelSU / https://t.me/mksu_ci      
          
          Commit Hashes (at the time of release):
          EOF
          
          # Add commit hashes conditionally
          echo "-> WKSU: [${{ env.WILD_REF }}](${{ env.WILD_URL }})" >> release_body.md
          echo "-> KernelSU: [${{ env.KSU_REF }}](${{ env.KSU_URL }})" >> release_body.md
          echo "-> KernelSU Next: [${{ env.NEXT_REF }}](${{ env.NEXT_URL }})" >> release_body.md
          echo "-> MKSU: [${{ env.MKSU_REF }}](${{ env.MKSU_URL }})" >> release_body.md

          cat << 'EOF' >> release_body.md
          
          -> SUSFS4KSU: 
            -> gki-android12-5.10: [${{ env.COMMIT_HASH_gki_android12_5_10 }}](${{ env.COMMIT_URL_gki_android12_5_10 }})
            -> gki-android13-5.10: [${{ env.COMMIT_HASH_gki_android13_5_10 }}](${{ env.COMMIT_URL_gki_android13_5_10 }})
            -> gki-android13-5.15: [${{ env.COMMIT_HASH_gki_android13_5_15 }}](${{ env.COMMIT_URL_gki_android13_5_15 }})
            -> gki-android14-5.15: [${{ env.COMMIT_HASH_gki_android14_5_15 }}](${{ env.COMMIT_URL_gki_android14_5_15 }})
            -> gki-android14-6.1: [${{ env.COMMIT_HASH_gki_android14_6_1 }}](${{ env.COMMIT_URL_gki_android14_6_1 }})
            -> gki-android15-6.6: [${{ env.COMMIT_HASH_gki_android15_6_6 }}](${{ env.COMMIT_URL_gki_android15_6_6 }})
          EOF

      - name: Verify artifacts exist
        run: |
          echo "Checking downloaded artifacts structure..."
          if [ ! -d "./downloaded-artifacts" ]; then
            echo "ERROR: ./downloaded-artifacts directory does not exist!"
            exit 1
          fi
          
          echo "Contents of ./downloaded-artifacts:"
          ls -la ./downloaded-artifacts/
          
          echo "All files in downloaded-artifacts (recursive):"
          find ./downloaded-artifacts -type f -name "*.zip" -o -name "*.img" | head -20
          
          ARTIFACT_COUNT=$(find ./downloaded-artifacts -type f \( -name "*.zip" -o -name "*.img" \) | wc -l)
          echo "Total artifacts found: $ARTIFACT_COUNT"
          
          if [ "$ARTIFACT_COUNT" -eq 0 ]; then
            echo "ERROR: No artifacts found!"
            exit 1
          fi

      - name: Create GitHub Release in NerestKernels Repository
        env:
          GH_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        run: |
          echo "Creating release $NEW_TAG in NerestKernels/GKI_KernelSU_SUSFS..."
          
          # Create the release first
          gh release create "$NEW_TAG" \
            --repo "NerestKernels/GKI_KernelSU_SUSFS" \
            --title "GKI Kernels With KSU & SUSFS v1.5.9" \
            --notes-file release_body.md \
            $([ "${{ inputs.release_type }}" == "Pre-Release" ] && echo "--prerelease")
          
          echo "Release created successfully!"

      - name: Upload Release Assets
        env:
          GH_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        run: |
          echo "Starting file upload process..."
          
          # Collect all files to upload
          UPLOAD_FILES=()
          while IFS= read -r -d '' file; do
            UPLOAD_FILES+=("$file")
          done < <(find ./downloaded-artifacts -type f \( -name "*.zip" -o -name "*.img" \) -print0)
          
          echo "Found ${#UPLOAD_FILES[@]} files to upload:"
          for file in "${UPLOAD_FILES[@]}"; do
            echo "  - $(basename "$file") ($(du -h "$file" | cut -f1))"
          done
          
          # Upload files
          for file in "${UPLOAD_FILES[@]}"; do
            echo "Uploading: $(basename "$file")"
            if ! gh release upload "$NEW_TAG" "$file" --repo "NerestKernels/GKI_KernelSU_SUSFS" --clobber; then
              echo "ERROR: Failed to upload $file"
              exit 1
            fi
            echo "Successfully uploaded: $(basename "$file")"
          done
          
          echo "All files uploaded successfully!"

      - name: Display Files Uploaded
        run: |
          echo "GitHub release created with the following files:"
          find ./downloaded-artifacts -type f \( -name "*.zip" -o -name "*.img" \) -exec basename {} \;
            
      - name: Send Telegram Notification
        run: |
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -F chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -F message_thread_id="${{ secrets.TELEGRAM_MESSAGE_THREAD_ID }}" \
            -F text="
            🌽 *New Kernel Release Uploaded*  
            📦 *Repository:* [${{ github.repository }}](https://github.com/${{ github.repository }})  
            ✏️ *Commit:* [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})  
            [🔗 View GitHub Release](https://github.com/NerestKernels/GKI_KernelSU_SUSFS/releases/tag/${{ env.NEW_TAG }})" \
            -F parse_mode="Markdown"
