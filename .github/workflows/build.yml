name: Kernel Build Process
permissions:
  contents: write
  actions: write 

on:
  workflow_call:
    inputs:
      use_make:
        required: true
        type: boolean
      android_version:
        required: true
        type: string
      kernel_version:
        required: true
        type: string
      sub_level:
        required: true
        type: string
      os_patch_level:
        required: true
        type: string
      kernelsu_variant:
        required: true
        type: string
      kernelsu_branch:
        required: true
        type: string
      kernelsu_branch_other:
        required: false
        type: string
      revision:
        required: false
        type: string

jobs:
  build-gki:
    runs-on: ubuntu-latest
    timeout-minutes: 120

    steps:
      - name: Maximize Build Space
        if: ${{ inputs.use_make == false }}    
        uses: AdityaGarg8/remove-unwanted-software@v5
        with:
          remove-dotnet: 'true'          # Frees ~2 GB
          remove-android: 'true'         # Frees ~9 GB
          remove-haskell: 'true'         # Frees ~5.2 GB
          remove-codeql: 'true'          # Frees ~5.4 GB
          remove-docker-images: 'true'   # Frees ~3.2 GB
          remove-large-packages: 'true'  # Frees ~3.1 GB
          remove-swapfile: 'true'        # Frees ~4 GB
          remove-cached-tools: 'false'   # Avoid unless confirmed safe
          verbose: 'true'                # Enable detailed logging
          
      - name: Setup SWAP
        if: ${{ inputs.use_make == false }}   
        shell: bash
        run: |
          sudo swapoff -a
          sudo fallocate -l 15G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon -p 1 /swapfile
          echo 'vm.swappiness=1' | sudo tee -a /etc/sysctl.conf
          echo 'vm.vfs_cache_pressure=50' | sudo tee -a /etc/sysctl.conf
          echo 'vm.overcommit_memory=1' | sudo tee -a /etc/sysctl.conf
          sudo sysctl -p
          free -h      
          
      - name: Set CONFIG Environment Variable
        run: |
          # Set CONFIG dynamically based on inputs values
          CONFIG="${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ inputs.sub_level }}"

          # Set CONFIG as an environment variable for future steps
          echo "CONFIG=$CONFIG" >> $GITHUB_ENV

          echo "CONFIG set to: $CONFIG"

      - name: Install dependencies
        if: ${{ inputs.use_make == true }}
        run: sudo apt update && sudo apt install -y libelf-dev libssl-dev build-essential dwarves

      - name: Install Repo
        run: |
          mkdir -p ./git-repo
          echo "Downloading repo tool..."
          curl https://storage.googleapis.com/git-repo-downloads/repo > ./git-repo/repo
          chmod a+rx ./git-repo/repo
          echo "REPO=$GITHUB_WORKSPACE/./git-repo/repo" >> $GITHUB_ENV

      - name: Clone AnyKernel3 and Other Dependencies
        run: |
          echo "Cloning AnyKernel3 and other dependencies..."
          ANYKERNEL_BRANCH="gki-2.0"
          SUSFS_BRANCH="gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}"
          echo "Using branch for AnyKernel3: $ANYKERNEL_BRANCH"
          echo "Using branch for SUSFS: $SUSFS_BRANCH"
          git clone https://github.com/TheFloresto/AnyKernel3.git -b "$ANYKERNEL_BRANCH"
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b "$SUSFS_BRANCH"
          git clone https://github.com/TheFloresto/kernel_patches.git -b main
          
      - name: Setup ZyCromerZ Clang Toolchain
        if: ${{ inputs.use_make == true }}      
        shell: bash  
        run: |
          echo "Downloading ZyCromerZ Clang 22.0.0..."
          mkdir -p clang-zyc
          cd clang-zyc
          curl -LO https://github.com/ZyCromerZ/Clang/releases/download/22.0.0git-20250903-release/Clang-22.0.0git-20250903.tar.gz
          tar -xzf Clang-22.0.0git-20250903.tar.gz
          cd ..
          echo "CLANG_SOURCE=zyc" >> $GITHUB_ENV
          echo "CLANG_PATH=$GITHUB_WORKSPACE/clang-zyc/bin" >> $GITHUB_ENV
          echo "CLANG_VERSION=zyc-22.0.0" >> $GITHUB_ENV
          echo "CLANG_BIN_PATH=$GITHUB_WORKSPACE/clang-zyc/bin" >> $GITHUB_ENV

      - name: Initialize and Sync Kernel Source
        run: |
          echo "Creating folder for configuration: $CONFIG..."
          mkdir -p "$CONFIG"
          cd "$CONFIG"
          echo "Initializing and syncing kernel source..."
          FORMATTED_BRANCH="${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ inputs.os_patch_level }}"
          $REPO init --depth=1 --u https://android.googlesource.com/kernel/manifest -b common-${FORMATTED_BRANCH} --repo-rev=v2.16
          REMOTE_BRANCH=$(git ls-remote https://android.googlesource.com/kernel/common ${FORMATTED_BRANCH})
          DEFAULT_MANIFEST_PATH=.repo/manifests/default.xml
          if grep -q deprecated <<< "$REMOTE_BRANCH"; then
            echo "Found deprecated branch: $FORMATTED_BRANCH"
            sed -i "s/\"${FORMATTED_BRANCH}\"/\"deprecated\/${FORMATTED_BRANCH}\"/g" $DEFAULT_MANIFEST_PATH
          fi
          $REPO --version
          $REPO --trace sync -c -j$(nproc --all) --no-tags --fail-fast

      - name: Clean Up ABI Protected Exports
        shell: bash
        run: |
           cd "$CONFIG"
           rm -rf ./common/android/abi_gki_protected_exports_* || echo "No protected exports in common!"
           perl -pi -e 's/^\s*"protected_exports_list"\s*:\s*"android\/abi_gki_protected_exports_aarch64",\s*$//;' ./common/BUILD.bazel || echo "No protected exports in common!"           
           df -h

      - name: Apply glibc 2.38 Compatibility Fix
        if: inputs.android_version == 'android14' && inputs.kernel_version == '6.1'
        run: |
          if [ ! -e build/build.sh ]; then 
            GLIBC_VERSION=$(ldd --version 2>/dev/null | head -n 1 | awk '{print $NF}') 
            echo "GLIBC_VERSION: $GLIBC_VERSION" 
            if [ "$(printf '%s\n' "2.38" "$GLIBC_VERSION" | sort -V | head -n1)" = "2.38" ]; then 
              echo "Patching resolve_btfids/Makefile" 
              cd $CONFIG/common/ && sed -i '/\$(Q)\$(MAKE) -C \$(SUBCMD_SRC) OUTPUT=\$(abspath \$(dir \$@))\/ \$(abspath \$@)/s//$(Q)$(MAKE) -C $(SUBCMD_SRC) EXTRA_CFLAGS="$(CFLAGS)" OUTPUT=$(abspath $(dir $@))\/ $(abspath $@)/' tools/bpf/resolve_btfids/Makefile || echo "No patch needed." 
            fi 
          fi

      - name: Fix Less Then 6.6.50 Builds
        if: inputs.android_version == 'android15' && inputs.kernel_version == '6.6'
        run: |
          cd "$CONFIG/common"
          if ! grep -qxF '#include <trace/hooks/fs.h>' ./fs/namespace.c; then
              sed -i '/#include <trace\/hooks\/blk.h>/a #include <trace\/hooks\/fs.h>' ./fs/namespace.c
          else
              echo "Line already present. Skipping insert."
          fi

      - name: Apply ptrace patch for older kernels
        if: fromJSON(inputs.kernel_version) < 5.16
        run: |
          cd "$CONFIG/common"
          echo "Patching ptrace!"
          patch -p1 -F 3 < "../../kernel_patches/gki_ptrace.patch"

      - name: Determine the branch for KernelSU
        run: |
          case "${{ inputs.kernelsu_branch }}" in
            "Stable")
              echo "BRANCH=-" >> $GITHUB_ENV
              ;;
            "Dev")
              if [[ "${{ inputs.kernelsu_variant }}" == "KSU" ]]; then
                echo "BRANCH=-s main" >> $GITHUB_ENV
              elif [[ "${{ inputs.kernelsu_variant }}" == "NEXT" ]]; then
                echo "BRANCH=-s next" >> $GITHUB_ENV
              elif [[ "${{ inputs.kernelsu_variant }}" == "WKSU" ]]; then
                echo "BRANCH=-s wild" >> $GITHUB_ENV
              fi
              ;;
            "Other")
              if [[ -n "${{ inputs.kernelsu_branch_other }}" ]]; then
                echo "BRANCH=-s ${{ inputs.kernelsu_branch_other }}" >> $GITHUB_ENV
              else
                echo "Error: Custom branch not provided for 'Other'" >&2
                exit 1
              fi
              ;;
          esac
      
      - name: Add KernelSU
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
      
          case "${{ inputs.kernelsu_variant }}" in
            "WKSU")
              echo "Adding WKSU..."
              curl -LSs "https://raw.githubusercontent.com/WildKernels/Wild_KSU/wild/kernel/setup.sh" | bash ${{ env.BRANCH }}
              ;;
            "KSU")
              echo "Adding KernelSU Official..."
              curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash ${{ env.BRANCH }}
              ;;
            "NEXT")
              echo "Adding KernelSU Next..."
              curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash ${{ env.BRANCH }}
              ;;

          esac
          
      - name: Apply SUSFS Patches for KernelSU Variants
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          
          echo "Applying SUSFS patches..."
          
          # Copy SUSFS patches
          cp -v ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch ./common/
          cd common
          patch -p1 --forward < 50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch
          cd ..
          cp -v ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp -v ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
          
          case "${{ inputs.kernelsu_variant }}" in
            "WKSU")
              echo "Applying SUSFS patches for WKSU..."
              cd ./Wild_KSU
              cp -v ../../kernel_patches/next/0001-Susfs-1.5.9.patch ./
              patch -p1 --forward < 0001-Susfs-1.5.9.patch
              ;;
            "KSU")
              echo "Applying SUSFS patches for Official KernelSU..."
              cd ./KernelSU
              cp -v ../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./
              patch -p1 --forward < 10_enable_susfs_for_ksu.patch
              ;;
            "NEXT")
              echo "Applying SUSFS patches for KernelSU Next..."
              cd ./KernelSU-Next
              cp -v ../../kernel_patches/next/0001-Susfs-1.5.9.patch ./
              patch -p1 --forward < 0001-Susfs-1.5.9.patch

              cp -v ../../kernel_patches/next/0001-james.patch ./
              patch -p1 --forward < 0001-james.patch   
              ;;

          esac

      - name: Getting KernelSU Version
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          
          case "${{ inputs.kernelsu_variant }}" in
            "WKSU")
              echo "Getting KSU Version for WKSU..."
              cd ./Wild_KSU
              BASE_VERSION=10200
              ;;
            "KSU")
              echo "Getting KSU Version for Official KernelSU..."
              cd ./KernelSU
              BASE_VERSION=10200
              ;;
            "NEXT")
              cd ./KernelSU-Next
              BASE_VERSION=10200
              ;;

          esac
          
          cd ./kernel
          KSU_VERSION=$(expr $(/usr/bin/git rev-list --count HEAD) "+" $BASE_VERSION)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV

      - name: Apply Hide Stuff Patches
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG/common"
          cp -v ../../kernel_patches/69_hide_stuff.patch ./
          patch -p1 --forward -F 3 < 69_hide_stuff.patch
          
      - name: Apply Hooks Patches
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG/common"
          
          if [ "${{ inputs.kernelsu_variant }}" == "NEXT" ]; then
            echo "Applying hooks for KernelSU-Next..."
            cp -v  ../../kernel_patches/next/60_scope-minimized_manual_hooks.patch ./
            patch -p1 --forward < 60_scope-minimized_manual_hooks.patch
          elif [ "${{ inputs.kernelsu_variant }}" == "WKSU" ]; then
            echo "Applying hooks for WKSU..."
            cp -v ../../kernel_patches/wild/hooks/60_scope-minimized_manual_hooks.patch ./
            patch -p1 --forward < 60_scope-minimized_manual_hooks.patch
          fi

      - name: Fix WiFi and Bluetooth on Samsung 6.6 GKI devices
        if: ${{ ( inputs.kernel_version == '6.6' ) }}
        run: |
          echo "[+] Adding Samsung KDP exported symbols to abi_gki_aarch64_galaxy"
          SYMBOL_LIST=$CONFIG/common/android/abi_gki_aarch64_galaxy
          echo "kdp_set_cred_non_rcu" >> $SYMBOL_LIST
          echo "kdp_usecount_dec_and_test" >> $SYMBOL_LIST
          echo "kdp_usecount_inc" >> $SYMBOL_LIST
          echo "[+] Adding Samsung KDP exported symbols definition to abi_gki_aarch64.stg"
          cd $CONFIG/common
          PATCH="../../kernel_patches/samsung/min_kdp/add-min_kdp-symbols.patch"
          if patch -p1 --dry-run < $PATCH; then
            echo "[+] Successfully added Samsung KDP exported symbols definition to abi_gki_aarch64.stg"
            patch -p1 --no-backup-if-mismatch < $PATCH
          fi
          echo "[+] Adding Samsung minimal KDP driver"
          cd drivers
          cp "../../../kernel_patches/samsung/min_kdp/min_kdp.c" min_kdp.c
          echo "obj-y += min_kdp.o" >> Makefile

      - name: Set Build Info Environment Variables
        shell: bash
        run: |          
          BUILD_USER="TheFloresto"
          BUILD_HOST="thefloresto-labs" 
          echo "BUILD_USER=$BUILD_USER" >> $GITHUB_ENV
          echo "BUILD_HOST=$BUILD_HOST" >> $GITHUB_ENV        

      - name: Add Configuration Settings
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          echo "Adding configuration settings to gki_defconfig..."

          # Add KSU configuration settings
          echo "CONFIG_KSU=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          
          if [ "${{ inputs.kernelsu_variant }}" == "NEXT" ] || [ "${{ inputs.kernelsu_variant }}" == "WKSU" ]; then
             echo "CONFIG_KSU_KPROBES_HOOK=n" | tee -a ./common/arch/arm64/configs/gki_defconfig
            fi                    

      - name: Add SUSFS Configuration Settings
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"

          # Add SUSFS configuration settings
          echo 'CONFIG_LOCALVERSION_AUTO=n' | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo 'CONFIG_LOCALVERSION="-GKI-@NoFloresto+@mr_vokintos"' | tee -a ./common/arch/arm64/configs/gki_defconfig          
          echo "CONFIG_KSU_SUSFS=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" | tee -a ./common/arch/arm64/configs/gki_defconfig

          if [ "${{ inputs.kernelsu_variant }}" == "NEXT" ] || [ "${{ inputs.kernelsu_variant }}" == "WKSU" ]; then
            echo "CONFIG_KSU_SUSFS_SUS_SU=n" | tee -a ./common/arch/arm64/configs/gki_defconfig
          else
            echo "CONFIG_KSU_SUSFS_SUS_SU=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          fi

          # Add additional tmpfs config setting
          echo "CONFIG_TMPFS_XATTR=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TMPFS_POSIX_ACL=y" | tee -a ./common/arch/arm64/configs/gki_defconfig

          # Add additional config setting
          echo "CONFIG_IP_NF_TARGET_TTL=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP6_NF_TARGET_HL=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP6_NF_MATCH_HL=y" | tee -a ./common/arch/arm64/configs/gki_defconfig

          # Add BBR Config
          echo "CONFIG_TCP_CONG_ADVANCED=y" | tee -a ./common/arch/arm64/configs/gki_defconfig 
          echo "CONFIG_TCP_CONG_BBR=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_NET_SCH_FQ=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_BIC=n" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_WESTWOOD=n" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_HTCP=n" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_NET_SCH_FQ=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_NET_SCH_FQ_CODEL=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SWITCH_MANAGER=y" | tee -a ./common/arch/arm64/configs/gki_defconfig 

          # === ipset support ===
          echo "CONFIG_IP_SET=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP_SET_MAX=256" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP_SET_BITMAP_IP=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP_SET_BITMAP_IPMAC=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP_SET_BITMAP_PORT=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP_SET_HASH_IP=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP_SET_HASH_IPPORT=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP_SET_HASH_IPPORTIP=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP_SET_HASH_IPPORTNET=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP_SET_HASH_NET=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP_SET_HASH_NETNET=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP_SET_HASH_NETPORT=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP_SET_HASH_NETIFACE=y" | tee -a ./common/arch/arm64/configs/gki_defconfig

          # Remove check_defconfig
          sed -i '2s/check_defconfig//' ./common/build.config.gki

      - name: Change Kernel Name
        if: ${{ inputs.use_make == false }}
        run: |
          cd "$CONFIG"
          if [ -f "build/build.sh" ]; then
              perl -pi -e 's/-dirty//' ./common/scripts/setlocalversion
              perl -0777 -pi -e 's/(echo "\$res")(?!.*echo "\$res")/echo "\$res-GKI-@NoFloresto+@mr_vokintos"/s' ./common/scripts/setlocalversion
              perl -pi -e 's{UTS_VERSION="\$\(echo \$UTS_VERSION \$CONFIG_FLAGS \$TIMESTAMP \| cut -b -\$UTS_LEN\)"}{UTS_VERSION="#1 SMP PREEMPT Mon Apr 20 08:09:31 UTC 2025"}' ./common/scripts/mkcompile_h

              # Fix user and host
              perl -pi -e "s/LINUX_COMPILE_BY=.*/LINUX_COMPILE_BY=\"${{ env.BUILD_USER }}\"/" ./common/scripts/mkcompile_h
              perl -pi -e "s/LINUX_COMPILE_HOST=.*/LINUX_COMPILE_HOST=\"${{ env.BUILD_HOST }}\"/" ./common/scripts/mkcompile_h              
             else
              #Remove -maybe-dirty
              perl -pi -e 's/-maybe-dirty//g' ./build/kernel/kleaf/impl/stamp.bzl
              
              #Set Kernel Name
              echo "CONFIG_LOCALVERSION=\"-GKI-@NoFloresto+@mr_vokintos\"" >> ./common/arch/arm64/configs/gki_defconfig

              #Set Kernel Timestamp
              perl -pi -e 's/build-timestamp = \$\(or \$\(KBUILD_BUILD_TIMESTAMP\), \$\(build-timestamp-auto\)\)/build-timestamp = "Mon Apr 20 08:09:31 UTC 2025"/' ./common/init/Makefile

              # Try to find and replace user/host in all possible locations
              find . -type f \( -name "*.bzl" -o -name "*.mk" -o -name "Makefile*" -o -name "BUILD*" \) | \
               xargs sed -i "s/\$(shell whoami)/${{ env.BUILD_USER }}/g" 2>/dev/null || true
              find . -type f \( -name "*.bzl" -o -name "*.mk" -o -name "Makefile*" -o -name "BUILD*" \) | \
               xargs sed -i "s/\$(shell hostname)/${{ env.BUILD_HOST }}/g" 2>/dev/null || true
              find . -type f \( -name "*.bzl" -o -name "*.mk" -o -name "Makefile*" -o -name "BUILD*" \) | \
               xargs sed -i "s/\$(shell uname -n)/${{ env.BUILD_HOST }}/g" 2>/dev/null || true
               
               # Alternative: modify init/Makefile directly if it exists
               perl -pi -e "s/build-user = .*/build-user = ${{ env.BUILD_USER }}/" ./common/init/Makefile
               perl -pi -e "s/build-host = .*/build-host = ${{ env.BUILD_HOST }}/" ./common/init/Makefile
          fi


      - name: Add Build based configs
        if: ${{ inputs.use_make == false }}
        shell: bash
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          echo "CONFIG_LTO_CLANG_FULL=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_LTO_CLANG=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3=n" | tee -a "./common/arch/arm64/configs/gki_defconfig"

          echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          # Ativar ccache
          echo "CONFIG_CCACHE=y" | tee -a ./common/arch/arm64/configs/gki_defconfig

      - name: Build
        if: ${{ inputs.use_make == false }}
        run : |
          set -e
          set -x
          cd "$CONFIG"
          echo "Building the kernel..."
          if [ -f "build/build.sh" ]; then
            LTO=full BUILD_CONFIG=common/build.config.gki.aarch64 build/build.sh || exit 1
          else
            tools/bazel build --config=fast --lto=full //common:kernel_aarch64_dist || exit 1
          fi

      - name: Change Kernel Name
        if: ${{ inputs.use_make == true }}
        run: |
          cd "$CONFIG"
          perl -pi -e 's/-dirty//' ./common/scripts/setlocalversion
          sed -i '/# Check for uncommitted changes\./,/fi/d' ./common/scripts/setlocalversion
          
          #Set Kernel Timestamp
          perl -pi -e 's{UTS_VERSION="\$\(echo \$UTS_VERSION \$CONFIG_FLAGS \$TIMESTAMP \| cut -b -\$UTS_LEN\)"}{UTS_VERSION="#1 SMP PREEMPT Mon Apr 20 08:09:31 UTC 2025"}' ./common/scripts/mkcompile_h
          
          #Set Kernel Name
          if [ "${{ inputs.kernel_version }}" = "6.6" ]; then
            perl -0777 -pi -e 's/(echo "\$\{KERNELVERSION\}\$\{file_localversion\}\$\{config_localversion\}\$\{LOCALVERSION\}\$\{scm_version\}")(?!.*\1)/echo "\$\{KERNELVERSION\}-GKI-@NoFloresto+@mr_vokintos"/s' ./common/scripts/setlocalversion
          else
            perl -0777 -pi -e 's/(echo "\$res")(?!.*\1)/echo "\-GKI-@NoFloresto+@mr_vokintos"/s' ./common/scripts/setlocalversion
          fi
              
          #Set Kernel Timestamp
          perl -pi -e 's/build-timestamp = \$\(or \$\(KBUILD_BUILD_TIMESTAMP\), \$\(build-timestamp-auto\)\)/build-timestamp = "Mon Apr 20 08:09:31 UTC 2025"/' ./common/init/Makefile
              
          # Try to find and replace user/host in all possible locations
            find . -type f \( -name "*.bzl" -o -name "*.mk" -o -name "Makefile*" -o -name "BUILD*" \) | \
             xargs sed -i "s/\$(shell whoami)/${{ env.BUILD_USER }}/g" 2>/dev/null || true
            find . -type f \( -name "*.bzl" -o -name "*.mk" -o -name "Makefile*" -o -name "BUILD*" \) | \
             xargs sed -i "s/\$(shell hostname)/${{ env.BUILD_HOST }}/g" 2>/dev/null || true
            find . -type f \( -name "*.bzl" -o -name "*.mk" -o -name "Makefile*" -o -name "BUILD*" \) | \
             xargs sed -i "s/\$(shell uname -n)/${{ env.BUILD_HOST }}/g" 2>/dev/null || true
               
           # Alternative: modify init/Makefile directly if it existed 
             perl -pi -e "s/LINUX_COMPILE_BY=.*/LINUX_COMPILE_BY=\"${{ env.BUILD_USER }}\"/" ./common/scripts/mkcompile_h
             perl -pi -e "s/LINUX_COMPILE_HOST=.*/LINUX_COMPILE_HOST=\"${{ env.BUILD_HOST }}\"/" ./common/scripts/mkcompile_h 

      - name: Add Build based configs
        if: ${{ inputs.use_make == true }}
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          echo "CONFIG_LTO_CLANG_THIN=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_LTO_CLANG=y" | tee -a ./common/arch/arm64/configs/gki_defconfig

          echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          # Ativar ccache
          echo "CONFIG_CCACHE=y" | tee -a ./common/arch/arm64/configs/gki_defconfig        

      - name: Override Clang Detection for ZyC
        if: ${{ inputs.use_make == true }}     
        shell: bash
        run: |
         # Force use ZyC Clang instead of auto-detection
         echo "Forcing ZyC Clang usage..."
         echo "CLANG_VERSION=zyc-22.0.0" >> $GITHUB_ENV
         echo "CLANG_BIN_PATH=$GITHUB_WORKSPACE/clang-zyc/bin" >> $GITHUB_ENV
         echo "Using ZyC Clang: $GITHUB_WORKSPACE/clang-zyc/bin/clang"

      - name: Optimized Clang
        if: ${{ inputs.use_make == true }}  
        shell: bash
        run: |                
            echo "Configuring gki_defconfig for GKI..."
            CONFIG_FILE="$CONFIG/common/arch/arm64/configs/gki_defconfig"

            # Super bloco seguro de otimizações usando array
            opts=(
              "CONFIG_ARM64_VA_BITS=48"
              "CONFIG_ARM64_PA_BITS=48"
              "CONFIG_ARM64_TAGGED_ADDR_ABI=y"
              "CONFIG_SCHED_MC=y"
              "CONFIG_ENERGY_MODEL=y"
              "CONFIG_UCLAMP_TASK=y"
              "CONFIG_UCLAMP_TASK_GROUP=y"
              "CONFIG_SCHEDUTIL=y"
              "CONFIG_CPU_FREQ=y"
              "CONFIG_CPUFREQ_DT=y"
              "CONFIG_CPU_FREQ_GOV_SCHEDUTIL=y"
              "CONFIG_CPU_FREQ_DEFAULT_GOV_SCHEDUTIL=y"
              "CONFIG_OPP=y"
              "CONFIG_CPU_IDLE=y"
              "CONFIG_ARM_PSCI_CPUIDLE=y"
              "CONFIG_THERMAL=y"
              "CONFIG_CPU_THERMAL=y"
              "CONFIG_DEVFREQ_THERMAL=y"
              "CONFIG_THERMAL_GOV_POWER_ALLOCATOR=y"
              "CONFIG_THERMAL_GOV_STEP_WISE=y"
              "CONFIG_THERMAL_GOV_FAIR_SHARE=y"
              "CONFIG_THERMAL_EMULATION=y"
              "CONFIG_THERMAL_WRITABLE_TRIPS=y"
              "CONFIG_POWER_CAP=y"
              "CONFIG_PERF_EVENTS=y"
              "CONFIG_CMA=y"
              "CONFIG_CMA_AREAS=7"
            )

            # Применяем каждую опцию, если она не существует
            for opt in "${opts[@]}"; do
                grep -q "$opt" "$CONFIG_FILE" || echo "$opt" >> "$CONFIG_FILE"
            done

            echo "gki_defconfig configured successfully for GKI"

      - name: Build Kernel
        if: ${{ inputs.use_make == true }}  
        shell: bash
        run: |
          KERNEL_PATH="$GITHUB_WORKSPACE/$CONFIG"
          CLANG_BIN_PATH="${{ env.CLANG_BIN_PATH }}"
          CLANG_VERSION="${{ env.CLANG_VERSION }}"
          if [ -d "$CLANG_BIN_PATH" ] && [ -x "$CLANG_BIN_PATH/clang" ]; then
            echo "Adding Clang to PATH: $CLANG_BIN_PATH"
            export PATH="$CLANG_BIN_PATH:$PATH"
            SELECTED_CLANG="$CLANG_BIN_PATH/clang"
          elif command -v clang >/dev/null 2>&1; then
            SELECTED_CLANG="$(command -v clang)"
            echo "Using system Clang: $SELECTED_CLANG"
          else
            echo "Error: No valid Clang binary found"
            exit 1
          fi
          echo "Using Clang version: $($SELECTED_CLANG --version | head -n1)"
          LLVM_TOOLS="clang ld.lld llvm-ar llvm-objcopy llvm-objdump llvm-nm"
          MISSING_TOOLS=""
          for tool in $LLVM_TOOLS; do
            if ! command -v $tool >/dev/null 2>&1; then
              MISSING_TOOLS="$MISSING_TOOLS $tool"
            fi
          done
          if [ -n "$MISSING_TOOLS" ]; then
            echo "Installing missing LLVM tools:$MISSING_TOOLS"
            sudo apt-get update
            sudo apt-get install -yq --no-install-recommends llvm
            for tool in $MISSING_TOOLS; do
              if ! command -v $tool >/dev/null 2>&1; then
                echo "Error: Failed to install $tool"
                exit 1
              fi
            done
          fi
          KERNEL_VERSION="${{ inputs.kernel_version }}"
          if [[ "$KERNEL_VERSION" == "5.10" ]]; then
            USE_LLVM_IAS=true
          fi
          cd "$KERNEL_PATH/common" || exit 1
          MAKE_ARGS="LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-android- \
            RUSTC=$GITHUB_WORKSPACE/clang-zyc/bin/rustc \
            PAHOLE=$KERNEL_PATH/prebuilts/kernel-build-tools/linux-x86/bin/pahole \
            LD=ld.lld HOSTLD=ld.lld"
          if [[ -v USE_LLVM_IAS ]]; then
            MAKE_ARGS="LLVM_IAS=1 $MAKE_ARGS"
          fi

           if [[ "${{ inputs.android_version }}" == "android15" && "${{ inputs.kernel_version }}" == "6.6" ]]; then
           make -j$(nproc --all) O=out $MAKE_ARGS KCFLAGS+="-Wno-error -O3 -flto=thin -fno-stack-protector -ffunction-sections" gki_defconfig || exit 1
           make -j$(nproc --all) O=out $MAKE_ARGS KCFLAGS+="-Wno-error -O3 -flto=thin -fno-stack-protector -ffunction-sections" || exit 1          
          else     
           make -j$(nproc --all) O=out $MAKE_ARGS KCFLAGS+="-Wno-error -O3 -flto=thin -fno-stack-protector -ffunction-sections -fdata-sections" gki_defconfig || exit 1
           make -j$(nproc --all) O=out $MAKE_ARGS KCFLAGS+="-Wno-error -O3 -flto=thin -fno-stack-protector -ffunction-sections -fdata-sections" || exit 1

      - name: Create Kernel ZIP
        run: |
          echo "Creating kernel ZIP..."
          
          if [ ${{ inputs.use_make }} == true ]; then
            # Copy Image for make=true builds
            cp $CONFIG/common/out/arch/arm64/boot/Image AnyKernel3/Image
          else
            # Copy Image for make=false builds based on Android version
            if [ "${{ inputs.android_version }}" = "android12" ] || [ "${{ inputs.android_version }}" = "android13" ]; then
              echo "Copying images for Android 12/13..."
              cp ./$CONFIG/out/${{ inputs.android_version }}-${{ inputs.kernel_version }}/dist/Image AnyKernel3/Image
            elif [ "${{ inputs.android_version }}" = "android14" ] || [ "${{ inputs.android_version }}" = "android15" ]; then
              echo "Copying images for Android 14/15..."
              cp ./$CONFIG/bazel-bin/common/kernel_aarch64/Image AnyKernel3/Image
            fi
          fi
          
          # Create ZIP file
          cd AnyKernel3
          ZIP_NAME="${{ inputs.kernelsu_variant }}-$KSUVER-${{ inputs.android_version }}-${{ inputs.kernel_version }}.${{ inputs.sub_level }}-${{ inputs.os_patch_level }}-AK3.zip"
          echo "Creating zip file: $ZIP_NAME..."
          zip -r "../$ZIP_NAME" ./*
  
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.kernelsu_variant }}-kernel-${{ env.CONFIG }}
          path: |
            *.zip
            *.img.gz
            *Image*
            
