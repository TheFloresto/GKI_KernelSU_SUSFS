name: Build GKI
permissions:
  contents: write
  actions: write 

on:
  workflow_call:
    inputs:
      android_version:
        required: true
        type: string
      kernel_version:
        required: true
        type: string
      sub_level:
        required: true
        type: string
      os_patch_level:
        required: true
        type: string
      kernelsu_variant:
        required: true
        type: string
      kernelsu_branch:
        required: true
        type: string
      kernelsu_branch_other:
        required: false
        type: string
      revision:
        required: false
        type: string

jobs:
  build-gki:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    env:
      CCACHE_COMPILERCHECK: "mtime"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      CCACHE_DEPEND: "1"
      CCACHE_DIRECT: "1"

    steps:
      - name: Maximize Build Space
        uses: AdityaGarg8/remove-unwanted-software@v5
        with:
          remove-dotnet: 'true'          # Frees ~2 GB
          remove-android: 'true'         # Frees ~9 GB
          remove-haskell: 'true'         # Frees ~5.2 GB
          remove-codeql: 'true'          # Frees ~5.4 GB
          remove-docker-images: 'true'   # Frees ~3.2 GB
          remove-large-packages: 'true'  # Frees ~3.1 GB
          remove-swapfile: 'true'        # Frees ~4 GB
          remove-cached-tools: 'false'   # Avoid unless confirmed safe
          verbose: 'true'                # Enable detailed logging

      - name: Optimize disk space and setup tmpfs
        run: |
          # Более агрессивная очистка в фоне
          sudo apt-get clean &
          sudo rm -rf /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL &
          sudo rm -rf /usr/share/dotnet /usr/local/share/boost &
          sudo rm -rf /var/lib/gems /usr/local/share/chromium &
          
          # Настройка tmpfs для временных файлов
          sudo mount -t tmpfs -o size=3G tmpfs /tmp
          
          wait  # Ждем завершения очистки
          echo "Available space after cleanup:"
          df -h

      - name: Setup optimized SWAP
        run: |
         sudo swapoff -a
         sudo fallocate -l 16G /swapfile
         sudo chmod 600 /swapfile
         sudo mkswap /swapfile
         sudo swapon -p 1 /swapfile
         echo 'vm.swappiness=10' | sudo tee -a /etc/sysctl.conf
         echo 'vm.vfs_cache_pressure=50' | sudo tee -a /etc/sysctl.conf
         echo 'vm.overcommit_memory=1' | sudo tee -a /etc/sysctl.conf
         echo 'vm.dirty_ratio=15' | sudo tee -a /etc/sysctl.conf
         echo 'vm.dirty_background_ratio=5' | sudo tee -a /etc/sysctl.conf
         sudo sysctl -p
         free -h
          
      - name: Set CONFIG Environment Variable
        run: |
          CONFIG="${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ inputs.sub_level }}"
          echo "CONFIG=$CONFIG" >> $GITHUB_ENV
          echo "CONFIG set to: $CONFIG"

      - name: Install ccache and clang
        run: |
          sudo apt update
          sudo apt install -y ccache clang aria2 parallel

      - name: Set up ccache with advanced optimizations
        run: |
          mkdir -p ~/.ccache ~/.cache/bazel
          ccache --version
          ccache --max-size=8G  # Увеличено с 5G
          ccache --set-config=compression=true
          ccache --set-config=compression_level=6
          ccache --set-config=sloppiness=file_macro,locale,time_macros,include_file_mtime,include_file_ctime,pch_defines
          ccache --set-config=hash_dir=false
          ccache --set-config=hard_link=true
          ccache --set-config=depend_mode=true
          ccache --set-config=compiler_check=mtime
          ccache --set-config=stats=true
          echo "CCACHE_DIR=$HOME/.ccache" >> $GITHUB_ENV

      - name: Cache ccache and bazel with versioning
        uses: actions/cache@v4
        id: ccache-restore
        with:
          path: |
            ${{ env.CCACHE_DIR }}
            ~/.cache/bazel
          key: ccache-v3-${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ inputs.sub_level }}-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            ccache-v3-${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ inputs.sub_level }}-${{ runner.os }}-
            ccache-v3-${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ runner.os }}-
            ccache-v3-${{ inputs.android_version }}-${{ runner.os }}-
            ccache-v3-${{ runner.os }}-

      - name: Show ccache stats and configure
        run: |
          echo "Initial ccache status:"
          ccache -s
          
          if [ "${{ steps.ccache-restore.outputs.cache-hit }}" == 'true' ]; then
            echo "ccache restored from cache"
            ccache -sv
          else
            echo "ccache starting fresh"
          fi

      - name: Download toolchain
        run: |
          AOSP_MIRROR=https://android.googlesource.com
          BRANCH=main-kernel-build-2024
          git clone $AOSP_MIRROR/kernel/prebuilts/build-tools -b $BRANCH --depth 1 kernel-build-tools
          git clone $AOSP_MIRROR/platform/system/tools/mkbootimg -b $BRANCH --depth 1 mkbootimg

      - name: Set environment variables
        run: |
          echo "AVBTOOL=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/bin/avbtool" >> $GITHUB_ENV
          echo "MKBOOTIMG=$GITHUB_WORKSPACE/mkbootimg/mkbootimg.py" >> $GITHUB_ENV
          echo "UNPACK_BOOTIMG=$GITHUB_WORKSPACE/mkbootimg/unpack_bootimg.py" >> $GITHUB_ENV

      - name: Set boot sign key
        env:
          BOOT_SIGN_KEY: ${{ secrets.BOOT_SIGN_KEY }}
        run: |
          if [ ! -z "$BOOT_SIGN_KEY" ]; then
            echo "$BOOT_SIGN_KEY" > ./kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem
            echo "BOOT_SIGN_KEY_PATH=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem" >> $GITHUB_ENV
          else
            echo "BOOT_SIGN_KEY is not set. Using AOSP sign key..."
            echo "BOOT_SIGN_KEY_PATH=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem" >> $GITHUB_ENV
          fi

      - name: Install Repo
        run: |
          mkdir -p ./git-repo
          echo "Downloading repo tool..."
          curl https://storage.googleapis.com/git-repo-downloads/repo > ./git-repo/repo
          chmod a+rx ./git-repo/repo
          echo "REPO=$GITHUB_WORKSPACE/./git-repo/repo" >> $GITHUB_ENV

      - name: Clone AnyKernel3 and Other Dependencies
        run: |
          ANYKERNEL_BRANCH="gki-2.0"
          SUSFS_BRANCH="gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}"
          git clone https://github.com/TheFloresto/AnyKernel3.git -b "$ANYKERNEL_BRANCH"
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b "$SUSFS_BRANCH"
          git clone https://github.com/TheFloresto/kernel_patches.git -b main

      - name: Cache kernel source by branch
        uses: actions/cache@v4
        id: kernel-cache
        with:
          path: ${{ env.CONFIG }}
          key: kernel-source-${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ inputs.os_patch_level }}-v2
          restore-keys: |
            kernel-source-${{ inputs.android_version }}-${{ inputs.kernel_version }}-

      - name: Initialize and Sync Kernel Source
        if: steps.kernel-cache.outputs.cache-hit != 'true'
        run: |
          echo "Cache miss - syncing kernel source..."
          echo "Creating folder for configuration: $CONFIG..."
          mkdir -p "$CONFIG"
          cd "$CONFIG"
          
          FORMATTED_BRANCH="${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ inputs.os_patch_level }}"
          echo "Initializing kernel source for branch: $FORMATTED_BRANCH"
          
          $REPO init --depth=1 --u https://android.googlesource.com/kernel/manifest -b common-${FORMATTED_BRANCH} --repo-rev=v2.16
          
          # Проверка на deprecated ветку
          REMOTE_BRANCH=$(git ls-remote https://android.googlesource.com/kernel/common ${FORMATTED_BRANCH})
          DEFAULT_MANIFEST_PATH=.repo/manifests/default.xml
          if grep -q deprecated <<< $REMOTE_BRANCH; then
            echo "Found deprecated branch: $FORMATTED_BRANCH"
            sed -i "s/\"${FORMATTED_BRANCH}\"/\"deprecated\/${FORMATTED_BRANCH}\"/g" $DEFAULT_MANIFEST_PATH
          fi
          
          # Оптимизированная синхронизация
          JOBS=$(($(nproc) + 2))
          echo "Syncing with $JOBS parallel jobs..."
          $REPO --trace sync -c -j$JOBS --no-tags --fail-fast --optimized-fetch --prune

      - name: Determine the branch for KernelSU
        run: |
          case "${{ inputs.kernelsu_branch }}" in
            "Stable")
              echo "BRANCH=-" >> $GITHUB_ENV
              ;;
            "Dev")
              if [[ "${{ inputs.kernelsu_variant }}" =~ ^(KSU|MKSU)$ ]]; then
                echo "BRANCH=-s main" >> $GITHUB_ENV
              elif [[ "${{ inputs.kernelsu_variant }}" == "NEXT" ]]; then
                echo "BRANCH=-s next" >> $GITHUB_ENV
              elif [[ "${{ inputs.kernelsu_variant }}" == "WILD" ]]; then
                echo "BRANCH=-s wild" >> $GITHUB_ENV
              fi
              ;;
            "Other")
              if [[ -n "${{ inputs.kernelsu_branch_other }}" ]]; then
                echo "BRANCH=-s ${{ inputs.kernelsu_branch_other }}" >> $GITHUB_ENV
              else
                echo "Error: Custom branch not provided for 'Other'" >&2
                exit 1
              fi
              ;;
          esac
      
      - name: Add KernelSU
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
      
          case "${{ inputs.kernelsu_variant }}" in
            "WILD")
              echo "Adding Wild KSU..."
              curl -LSs "https://raw.githubusercontent.com/WildKernels/Wild_KSU/wild/kernel/setup.sh" | bash ${{ env.BRANCH }}
              ;;
            "KSU")
              echo "Adding KernelSU Official..."
              curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash ${{ env.BRANCH }}
              ;;
            "NEXT")
              echo "Adding KernelSU Next..."
              curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash ${{ env.BRANCH }}
              ;;
            "MKSU")
              echo "Adding KernelSU MKSU..."
              curl -LSs "https://raw.githubusercontent.com/5ec1cff/KernelSU/main/kernel/setup.sh" | bash ${{ env.BRANCH }}
              ;;
          esac

      - name: Apply SUSFS Patches for KernelSU Variants
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          
          echo "Applying SUSFS patches..."
          
          # Copy SUSFS patches
          cp -v ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch ./common/
          cd common
          patch -p1 --forward < 50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch
          cd ..
          cp -v ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp -v ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
          
          case "${{ inputs.kernelsu_variant }}" in
            "WILD")
              echo "Applying SUSFS patches for Official KernelSU..."
              cd ./Wild_KSU
              ;;
            "KSU")
              echo "Applying SUSFS patches for Official KernelSU..."
              cd ./KernelSU
              cp -v ../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./
              patch -p1 --forward < 10_enable_susfs_for_ksu.patch
              ;;
            "NEXT")
              echo "Applying SUSFS patches for KernelSU Next..."
              cd ./KernelSU-Next
              cp -v ../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./
              patch -p1 --forward < 10_enable_susfs_for_ksu.patch || true
              
              cp -v ../../kernel_patches/next/susfs_fix_patches/v1.5.9/fix_apk_sign.c.patch ./
              patch -p1 --forward < fix_apk_sign.c.patch
              
              cp -v ../../kernel_patches/next/susfs_fix_patches/v1.5.9/fix_core_hook.c.patch ./
              patch -p1 --forward --fuzz=3 < fix_core_hook.c.patch
              
              cp -v ../../kernel_patches/next/susfs_fix_patches/v1.5.9/fix_selinux.c.patch ./
              patch -p1 --forward < fix_selinux.c.patch
              
              cp -v ../../kernel_patches/next/susfs_fix_patches/v1.5.9/fix_ksud.c.patch ./
              patch -p1 --forward < fix_ksud.c.patch

              cp -v ../../kernel_patches/next/susfs_fix_patches/v1.5.9/fix_rules.c.patch ./
              patch -p1 --forward < fix_rules.c.patch

              cp -v ../../kernel_patches/next/susfs_fix_patches/v1.5.9/fix_sucompat.c.patch ./
              patch -p1 --forward < fix_sucompat.c.patch

              cp -v ../../kernel_patches/next/susfs_fix_patches/v1.5.9/fix_kernel_compat.c.patch ./
              patch -p1 --forward < fix_kernel_compat.c.patch
              ;;
            "MKSU")
              echo "Applying SUSFS patches for MKSU..."
              cd ./KernelS
              ;;
          esac

      - name: Getting KernelSU Version
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          
          case "${{ inputs.kernelsu_variant }}" in
            "WILD")
              echo "Applying SUSFS patches for Official KernelSU..."
              cd ./Wild_KSU
              BASE_VERSION=10200
              ;;
            "KSU")
              echo "Applying SUSFS patches for Official KernelSU..."
              cd ./KernelSU
              BASE_VERSION=10200
              ;;
            "NEXT")
              cd ./KernelSU-Next
              BASE_VERSION=10200
              ;;
            "MKSU")
              ;;
          esac
          
          cd ./kernel
          KSU_VERSION=$(expr $(/usr/bin/git rev-list --count HEAD) "+" $BASE_VERSION)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV

      - name: Apply Hide Stuff Patches
        run: |
          cd "$CONFIG/common"
          cp -v ../../kernel_patches/69_hide_stuff.patch ./
          patch -p1 --forward -F 3 < 69_hide_stuff.patch

      - name: Apply Hooks Patches
        run: |
          cd "$CONFIG/common"
          
          if [ "${{ inputs.kernelsu_variant }}" == "NEXT" ]; then
            cp -v ../../kernel_patches/next/syscall_hooks.patch  ./
            patch -p1 --forward -F 3 < syscall_hooks.patch
          elif [ "${{ inputs.kernelsu_variant }}" == "WILD" ]; then
            cp -v ../../kernel_patches/wild/syscall_hooks.patch ./
            patch -p1 --forward -F 3 < syscall_hooks.patch
          fi

      - name: Fix WiFi and Bluetooth on Samsung 6.6 GKI devices
        if: ${{ ( inputs.kernel_version == '6.6' ) }}
        run: |
          echo "[+] Adding Samsung KDP exported symbols to abi_gki_aarch64_galaxy"
          SYMBOL_LIST=$CONFIG/common/android/abi_gki_aarch64_galaxy
          echo "kdp_set_cred_non_rcu" >> $SYMBOL_LIST
          echo "kdp_usecount_dec_and_test" >> $SYMBOL_LIST
          echo "kdp_usecount_inc" >> $SYMBOL_LIST
          echo "[+] Adding Samsung KDP exported symbols definition to abi_gki_aarch64.stg"
          cd $CONFIG/common
          PATCH="../../kernel_patches/samsung/min_kdp/add-min_kdp-symbols.patch"
          if patch -p1 --dry-run < $PATCH; then
            echo "[+] Successfully added Samsung KDP exported symbols definition to abi_gki_aarch64.stg"
            patch -p1 --no-backup-if-mismatch < $PATCH
          fi
          echo "[+] Adding Samsung minimal KDP driver"
          cd drivers
          cp "../../../kernel_patches/samsung/min_kdp/min_kdp.c" min_kdp.c
          echo "obj-y += min_kdp.o" >> Makefile

      - name: Add Configuration Settings
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          echo "Adding configuration settings to gki_defconfig..."

          # Add KSU configuration settings
          echo "CONFIG_KSU=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          
          if [ "${{ inputs.kernelsu_variant }}" == "NEXT" ] || [ "${{ inputs.kernelsu_variant }}" == "WILD" ]; then
            echo "CONFIG_KSU_KPROBES_HOOK=n" | tee -a ./common/arch/arm64/configs/gki_defconfig
          fi

      - name: Add SUSFS Configuration Settings
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"

          # Add SUSFS configuration settings in batch
          cat >> ./common/arch/arm64/configs/gki_defconfig << 'EOF'
          CONFIG_KSU_SUSFS=y
          CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y
          CONFIG_KSU_SUSFS_SUS_PATH=y
          CONFIG_KSU_SUSFS_SUS_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SUS_KSTAT=y
          CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n
          CONFIG_KSU_SUSFS_TRY_UMOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SPOOF_UNAME=y
          CONFIG_KSU_SUSFS_ENABLE_LOG=y
          CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y
          CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y
          CONFIG_KSU_SUSFS_OPEN_REDIRECT=y
          CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y
          CONFIG_TMPFS_XATTR=y
          CONFIG_TMPFS_POSIX_ACL=y
          CONFIG_IP_NF_TARGET_TTL=y
          CONFIG_IP6_NF_TARGET_HL=y
          CONFIG_IP6_NF_MATCH_HL=y
          CONFIG_TCP_CONG_ADVANCED=y
          CONFIG_TCP_CONG_BBR=y
          CONFIG_NET_SCH_FQ=y
          CONFIG_TCP_CONG_BIC=n
          CONFIG_TCP_CONG_WESTWOOD=n
          CONFIG_TCP_CONG_HTCP=n
          EOF

          if [ "${{ inputs.kernelsu_variant }}" == "NEXT" ] || [ "${{ inputs.kernelsu_variant }}" == "WILD" ]; then
            echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./common/arch/arm64/configs/gki_defconfig
          else
            echo "CONFIG_KSU_SUSFS_SUS_SU=y" >> ./common/arch/arm64/configs/gki_defconfig
          fi

          # Remove check_defconfig
          sed -i '2s/check_defconfig//' ./common/build.config.gki

      - name: Change Kernel Name
        run: |
          cd "$CONFIG"

          # Get current date in the required format
          CURRENT_DATE=$(date -u +"%a %b %d %H:%M:%S UTC %Y")

          if [ -f "build/build.sh" ]; then
              perl -pi -e 's/-dirty//' ./common/scripts/setlocalversion
              sed -i '$s|echo "\$res"|echo "\$res-@NoFloresto+@mr_vokintos"|' ./common/scripts/setlocalversion
              perl -pi -e "s{UTS_VERSION=\"\\\$\(echo \\\$UTS_VERSION \\\$CONFIG_FLAGS \\\$TIMESTAMP \| cut -b -\\\$UTS_LEN\)\"}{UTS_VERSION=\"#1 SMP PREEMPT $CURRENT_DATE\"}" ./common/scripts/mkcompile_h
          else
              # Remove -maybe-dirty
              perl -pi -e 's/-maybe-dirty//g' ./build/kernel/kleaf/impl/stamp.bzl
              
              # Set Kernel Name
              echo "CONFIG_LOCALVERSION=\"-@NoFloresto+@mr_vokintos\"" >> ./common/arch/arm64/configs/gki_defconfig

              # Set Kernel Timestamp
              perl -pi -e "s/build-timestamp = \\\$\(or \\\$\(KBUILD_BUILD_TIMESTAMP\), \\\$\(build-timestamp-auto\)\)/build-timestamp = \"$CURRENT_DATE\"/" ./common/init/Makefile

              # Remove Abi Exports and Error
              rm -rf ./common/android/abi_gki_protected_exports_*
              perl -pi -e 's/^\s*"protected_exports_list"\s*:\s*"android\/abi_gki_protected_exports_aarch64",\s*$//;' ./common/BUILD.bazel
          fi

      - name: Pre-compile headers for faster builds
        run: |
          cd "$CONFIG"
          
          # Предкомпилируем часто используемые заголовки для ускорения
          if [ -f "build/build.sh" ]; then
            echo "Pre-compiling headers..."
            export PATH="/usr/lib/ccache:$PATH"
            LTO=full BUILD_CONFIG=common/build.config.gki.aarch64 \
            CCACHE_EXEC="/usr/bin/ccache" \
            build/build.sh CC="ccache clang" prepare -j$(nproc) || echo "Header pre-compilation failed, continuing..."
          fi

      - name: Build with optimized settings
        run : |
          set -e
          set -x
          cd "$CONFIG"
          
          # Оптимизируем переменные окружения для ccache
          export PATH="/usr/lib/ccache:$PATH"
          export CCACHE_COMPILERCHECK=mtime
          export CCACHE_DEPEND=1
          export CCACHE_DIRECT=1
          export CCACHE_STATS=1
          
          # Используем все доступные ядра + 2 для I/O операций
          JOBS=$(($(nproc) + 2))
          echo "Building with $JOBS parallel jobs..."

          echo "Checking kernel version for bazel configuration..."
          if [[ "$CONFIG" == *"6.6"* ]]; then
            echo "Fetching .bazelrc with sm8635-polly-66 configuration (cortex-a76)..."
            curl -LSs https://raw.githubusercontent.com/TheFloresto/kernel_patches/main/next/sm8635-polly-66.bazelrc -o .bazelrc || exit 1
            EXTRA_BAZEL_FLAGS="--config=sm8635-polly-66"
          else
            echo "Fetching .bazelrc with sm8635-polly configuration (cortex-a720)..."
            curl -LSs https://raw.githubusercontent.com/TheFloresto/kernel_patches/main/next/sm8635-polly.bazelrc -o .bazelrc || exit 1
            EXTRA_BAZEL_FLAGS="--config=sm8635-polly"
          fi

          echo "Building the kernel..."
          if [ -f "build/build.sh" ]; then
            # Традиционная сборка с оптимизациями
            # Проверяем доступность компилятора
            echo "Checking compiler availability..."
            clang --version || (echo "ERROR: clang not found" && exit 1)
            ccache --version || (echo "ERROR: ccache not found" && exit 1)
            
            # Устанавливаем переменные окружения для сборки
            export CC="ccache clang"
            export CXX="ccache clang++"
            export HOSTCC="ccache clang"
            export HOSTCXX="ccache clang++"
            
            # Запускаем сборку
            LTO=full BUILD_CONFIG=common/build.config.gki.aarch64 \
            CCACHE_EXEC="/usr/bin/ccache" \
            build/build.sh -j$JOBS || exit 1
          else
            # Bazel сборка с оптимизированными флагами
            BAZEL_FLAGS="
              --sandbox_writable_path=/home/runner/.ccache
              --disk_cache=~/.cache/bazel
              --config=fast
              --lto=full
              --jobs=$JOBS
              --local_cpu_resources=$JOBS
              --local_ram_resources=HOST_RAM*0.75
              --experimental_multi_threaded_digest
              --experimental_remote_merkle_tree_cache
              --experimental_repository_cache_hardlinks
              --experimental_worker_multiplex
              $EXTRA_BAZEL_FLAGS
            "
            
            # Убираем флаг для 6.6 если нужно
            if [[ "${{ inputs.kernel_version }}" == "6.6" ]]; then
              BAZEL_FLAGS=$(echo $BAZEL_FLAGS | sed 's/--experimental_multi_threaded_digest//')
            fi
            
            tools/bazel build $BAZEL_FLAGS //common:kernel_aarch64_dist || exit 1
          fi
          
          echo "Build completed successfully!"
          echo "ccache final statistics:"
          ccache -s
          echo "Disk space after build:"
          df -h

      - name: Create Bootimgs Folder and Copy Images for Android 12/13
        if: ${{ inputs.android_version == 'android12' || inputs.android_version == 'android13' }}
        run: |
          mkdir bootimgs

          echo "Creating bootimgs folder and copying images..."
          cp ./$CONFIG/out/${{ inputs.android_version }}-${{ inputs.kernel_version }}/dist/Image ./bootimgs
          cp ./$CONFIG/out/${{ inputs.android_version }}-${{ inputs.kernel_version }}/dist/Image.lz4 ./bootimgs
          cp ./$CONFIG/out/${{ inputs.android_version }}-${{ inputs.kernel_version }}/dist/Image ./
          cp ./$CONFIG/out/${{ inputs.android_version }}-${{ inputs.kernel_version }}/dist/Image.lz4 ./

          # Create gzip of the Image file
          gzip -n -k -f -9 ./Image > ./Image.gz

      - name: Create Bootimgs Folder and Copy Images for Android 14/15
        if: ${{ inputs.android_version == 'android14' || inputs.android_version == 'android15' }}
        run: |
          mkdir bootimgs

          echo "Creating bootimgs folder and copying images..."
          cp ./$CONFIG/bazel-bin/common/kernel_aarch64/Image ./bootimgs
          cp ./$CONFIG/bazel-bin/common/kernel_aarch64/Image.lz4 ./bootimgs
          cp ./$CONFIG/bazel-bin/common/kernel_aarch64/Image ./
          cp ./$CONFIG/bazel-bin/common/kernel_aarch64/Image.lz4 ./

          # Create gzip of the Image file
          gzip -n -k -f -9 ./Image > ./Image.gz

      - name: Create ZIP Files for Different Formats
        run: |
          echo "Creating zip files for all formats..."
          cd ./AnyKernel3
          
          # Create and upload zip for each format in parallel
          create_zip() {
            local format=$1
            local image_file=$2
            local zip_name="${{ inputs.kernelsu_variant }}-$KSUVER-${{ inputs.android_version }}-${{ inputs.kernel_version }}.${{ inputs.sub_level }}-${{ inputs.os_patch_level }}-AK3-${format}.zip"
            
            echo "Creating zip file: $zip_name..."
            cp "../$image_file" "./$image_file"
            zip -r "../$zip_name" ./* -q
            rm "./$image_file"
          }
          
          # Создаем zip файлы параллельно
          create_zip "" "Image" &
          create_zip "lz4" "Image.lz4" &  
          create_zip "gz" "Image.gz" &
          
          wait

      - name: Android 12 boot image build script
        if: ${{ inputs.android_version == 'android12' }}
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd bootimgs
          
          GKI_URL=https://dl.google.com/android/gki/gki-certified-boot-android12-5.10-"${{ inputs.os_patch_level }}"_"${{ inputs.revision }}".zip
          FALLBACK_URL=https://dl.google.com/android/gki/gki-certified-boot-android12-5.10-2023-01_r1.zip
          
          # Check if the GKI URL is available
          echo "Checking if GKI kernel URL is reachable: $GKI_URL"
          status=$(curl -sL -w "%{http_code}" "$GKI_URL" -o /dev/null)
          
          if [ "$status" = "200" ]; then
              echo "[+] Downloading from GKI_URL"
              curl -Lo gki-kernel.zip "$GKI_URL"
          else
              echo "[+] $GKI_URL not found, using $FALLBACK_URL"
              curl -Lo gki-kernel.zip "$FALLBACK_URL"
          fi
          
          # Unzip the downloaded kernel and remove the zip
          echo "Unzipping the downloaded kernel..."
          unzip gki-kernel.zip && rm gki-kernel.zip
          
          echo "Unpacking boot.img..."
          FULL_PATH=$(pwd)/boot-5.10.img
          echo "Unpacking using: $FULL_PATH"
          
          echo "Running unpack_bootimg.py..."
          $UNPACK_BOOTIMG --boot_img="$FULL_PATH"
          
          # Create gzip of the Image file
          gzip -n -k -f -9 ./Image > ./Image.gz
          
          # Функция для создания boot образов
          create_boot_image() {
            local kernel_image=$1
            local output_name=$2
            local suffix=$3
            
            echo "Building $output_name..."
            $MKBOOTIMG --header_version 4 --kernel $kernel_image --output $output_name --ramdisk out/ramdisk --os_version 12.0.0 --os_patch_level "${{ inputs.os_patch_level }}"
            $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image $output_name --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
            cp ./$output_name ../${{ inputs.kernelsu_variant }}-$KSUVER-${{ inputs.android_version }}-${{ inputs.kernel_version }}.${{ inputs.sub_level }}-${{ inputs.os_patch_level }}-boot${suffix}.img
          }
          
          # Создаем boot образы параллельно
          create_boot_image "Image" "boot.img" "" &
          create_boot_image "Image.gz" "boot-gz.img" "-gz" &
          create_boot_image "Image.lz4" "boot-lz4.img" "-lz4" &
          
          wait

      - name: Android 13/14/15 boot image build script
        if: ${{ inputs.android_version == 'android13' || inputs.android_version == 'android14' || inputs.android_version == 'android15' }}
        run: |
          cd bootimgs

          # Create gzip of the Image file
          gzip -n -k -f -9 ./Image > ./Image.gz
          
          # Функция для создания boot образов
          create_boot_image() {
            local kernel_image=$1
            local output_name=$2
            local suffix=$3
            
            echo "Building $output_name..."
            $MKBOOTIMG --header_version 4 --kernel $kernel_image --output $output_name
            $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image $output_name --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
            cp ./$output_name ../${{ inputs.kernelsu_variant }}-$KSUVER-${{ inputs.android_version }}-${{ inputs.kernel_version }}.${{ inputs.sub_level }}-${{ inputs.os_patch_level }}-boot${suffix}.img
          }
          
          # Создаем boot образы параллельно  
          create_boot_image "Image" "boot.img" "" &
          create_boot_image "Image.gz" "boot-gz.img" "-gz" &
          create_boot_image "Image.lz4" "boot-lz4.img" "-lz4" &
          
          wait
          
      - name: Compress all img files with gzip
        run: |
          # Параллельное сжатие всех img файлов
          for image in *.img; do
            gzip -vnf9 "$image" &
          done
          wait
  
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.kernelsu_variant }}-kernel-${{ env.CONFIG }}
          path: |
            *.zip
            *.img.gz
            *Image*

      - name: Save ccache for next build
        if: always()
        run: |
          echo "Final ccache statistics:"
          ccache -s
          echo "ccache directory size:"
          du -sh $CCACHE_DIR
