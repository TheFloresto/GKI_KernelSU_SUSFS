name: Build GKI
permissions:
  contents: write
  actions: write 

on:
  workflow_call:
    inputs:
      android_version:
        required: true
        type: string
      kernel_version:
        required: true
        type: string
      sub_level:
        required: true
        type: string
      os_patch_level:
        required: true
        type: string
      kernelsu_variant:
        required: true
        type: string
      kernelsu_branch:
        required: true
        type: string
      kernelsu_branch_other:
        required: false
        type: string
      revision:
        required: false
        type: string

jobs:
  build-gki:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      CCACHE_MAXSIZE: "5G"

    steps:
      - name: Maximize Build Space and Setup Environment
        run: |
          # Ожидание завершения автоматических обновлений Ubuntu
          echo "Waiting for automatic apt updates to complete..."
          while sudo fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1; do
            echo "Waiting for dpkg lock to be released..."
            sleep 5
          done
          
          # Удаление больших пакетов параллельно (без apt команд)
          sudo rm -rf /usr/share/dotnet &
          sudo rm -rf /usr/local/lib/android &  
          sudo rm -rf /opt/ghc &
          sudo rm -rf /opt/hostedtoolcache/CodeQL &
          sudo rm -rf /usr/share/swift &
          sudo rm -rf /usr/local/julia* &
          
          # Ожидание освобождения блокировок apt перед началом работы
          sudo systemctl stop unattended-upgrades || true
          sudo killall -9 apt apt-get dpkg >/dev/null 2>&1 || true
          
          # Последовательные apt операции
          echo "Setting package holds..."
          sudo apt-mark hold firefox libc-bin
          
          echo "Updating package lists..."
          sudo apt update
          
          echo "Removing unnecessary packages..."
          sudo apt purge man-db -y
          sudo rm -rf /var/lib/man-db/auto-update
          
          echo "Installing build dependencies..."
          sudo apt-get install -y --no-install-recommends \
            curl bison flex make binutils git perl gcc python3 \
            python-is-python3 bc libssl-dev libelf-dev \
            bc aria2 zip unzip ccache
          
          # Ждем завершения параллельных операций удаления файлов
          wait
          echo "Environment setup completed!"

      - name: Setup SWAP
        run: |
         sudo swapoff -a
         sudo fallocate -l 20G /swapfile
         sudo chmod 600 /swapfile
         sudo mkswap /swapfile
         sudo swapon -p 1 /swapfile
         echo 'vm.swappiness=1' | sudo tee -a /etc/sysctl.conf
         echo 'vm.vfs_cache_pressure=50' | sudo tee -a /etc/sysctl.conf
         echo 'vm.overcommit_memory=1' | sudo tee -a /etc/sysctl.conf
         sudo sysctl -p
         free -h
          
      - name: Set CONFIG Environment Variable
        run: |
          CONFIG="${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ inputs.sub_level }}"
          echo "CONFIG=$CONFIG" >> $GITHUB_ENV

      - name: Install ccache and Setup Optimized Cache
        run: |
          sudo apt update && sudo apt install -y ccache
          
          # Create ccache directory (always needed)
          mkdir -p ~/.ccache
          
          # Create bazel cache directory only for Android 14/15
          if [[ "${{ inputs.android_version }}" == "android14" || "${{ inputs.android_version }}" == "android15" ]]; then
            mkdir -p ~/.cache/bazel
            echo "BAZEL_CACHE_DIR=$HOME/.cache/bazel" >> $GITHUB_ENV
          fi
          
          # Optimized ccache settings
          ccache --version
          ccache --max-size="$CCACHE_MAXSIZE"
          ccache --set-config=compression=true
          ccache --set-config=compression_level=6
          ccache --set-config=sloppiness=file_macro,locale,time_macros,include_file_mtime,include_file_ctime
          ccache --set-config=hash_dir=false
          ccache --set-config=hard_link=true
          ccache --set-config=max_files=0
          ccache --set-config=file_clone=true
          
          echo "CCACHE_DIR=$HOME/.ccache" >> $GITHUB_ENV

      - name: Restore ccache from previous builds
        if: ${{ inputs.android_version == 'android12' || inputs.android_version == 'android13' }}
        uses: actions/cache@v4
        id: ccache-restore
        with:
          path: ~/.ccache
          key: ccache-${{ env.CONFIG }}-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            ccache-${{ env.CONFIG }}-${{ runner.os }}-
            ccache-${{ env.CONFIG }}-
            ccache-

      - name: Restore Bazel cache from previous builds (Android 14/15 only)
        if: ${{ inputs.android_version == 'android14' || inputs.android_version == 'android15' }}
        uses: actions/cache@v4
        id: bazel-restore
        with:
          path: ~/.cache/bazel
          key: bazel-${{ env.CONFIG }}-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            bazel-${{ env.CONFIG }}-${{ runner.os }}-
            bazel-${{ env.CONFIG }}-
            bazel-

      - name: Download toolchain
        run: |
          AOSP_MIRROR=https://android.googlesource.com
          BRANCH=main-kernel-build-2024
          git clone $AOSP_MIRROR/kernel/prebuilts/build-tools -b $BRANCH --depth 1 kernel-build-tools
          git clone $AOSP_MIRROR/platform/system/tools/mkbootimg -b $BRANCH --depth 1 mkbootimg

      - name: Set environment variables
        run: |
          echo "AVBTOOL=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/bin/avbtool" >> $GITHUB_ENV
          echo "MKBOOTIMG=$GITHUB_WORKSPACE/mkbootimg/mkbootimg.py" >> $GITHUB_ENV
          echo "UNPACK_BOOTIMG=$GITHUB_WORKSPACE/mkbootimg/unpack_bootimg.py" >> $GITHUB_ENV

      - name: Set boot sign key
        env:
          BOOT_SIGN_KEY: ${{ secrets.BOOT_SIGN_KEY }}
        run: |
          if [ ! -z "$BOOT_SIGN_KEY" ]; then
            echo "$BOOT_SIGN_KEY" > ./kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem
            echo "BOOT_SIGN_KEY_PATH=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem" >> $GITHUB_ENV
          else
            echo "BOOT_SIGN_KEY_PATH=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem" >> $GITHUB_ENV
          fi

      - name: Install Repo
        run: |
          mkdir -p ./git-repo
          curl https://storage.googleapis.com/git-repo-downloads/repo > ./git-repo/repo
          chmod a+rx ./git-repo/repo
          echo "REPO=$GITHUB_WORKSPACE/./git-repo/repo" >> $GITHUB_ENV

      - name: Clone AnyKernel3 and Other Dependencies
        run: |
          ANYKERNEL_BRANCH="gki-2.0"
          SUSFS_BRANCH="gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}"
          git clone https://github.com/TheFloresto/AnyKernel3.git -b "$ANYKERNEL_BRANCH"
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b "$SUSFS_BRANCH"
          git clone https://github.com/TheFloresto/kernel_patches.git -b main

      - name: Initialize and Sync Kernel Source
        run: |
          mkdir -p "$CONFIG"
          cd "$CONFIG"
          FORMATTED_BRANCH="${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ inputs.os_patch_level }}"
          $REPO init --depth=1 --u https://android.googlesource.com/kernel/manifest -b common-${FORMATTED_BRANCH} --repo-rev=v2.16
          REMOTE_BRANCH=$(git ls-remote https://android.googlesource.com/kernel/common ${FORMATTED_BRANCH})
          DEFAULT_MANIFEST_PATH=.repo/manifests/default.xml
          if grep -q deprecated <<< $REMOTE_BRANCH; then
            sed -i "s/\"${FORMATTED_BRANCH}\"/\"deprecated\/${FORMATTED_BRANCH}\"/g" $DEFAULT_MANIFEST_PATH
          fi
          $REPO sync -c -j$(nproc --all) --no-tags --fail-fast

      - name: Determine the branch for KernelSU
        run: |
          case "${{ inputs.kernelsu_branch }}" in
            "Stable")
              echo "BRANCH=-" >> $GITHUB_ENV
              ;;
            "Dev")
              if [[ "${{ inputs.kernelsu_variant }}" =~ ^(KSU|MKSU)$ ]]; then
                echo "BRANCH=-s main" >> $GITHUB_ENV
              elif [[ "${{ inputs.kernelsu_variant }}" == "NEXT" ]]; then
                echo "BRANCH=-s next" >> $GITHUB_ENV
              elif [[ "${{ inputs.kernelsu_variant }}" == "WILD" ]]; then
                echo "BRANCH=-s wild" >> $GITHUB_ENV
              fi
              ;;
            "Other")
              if [[ -n "${{ inputs.kernelsu_branch_other }}" ]]; then
                echo "BRANCH=-s ${{ inputs.kernelsu_branch_other }}" >> $GITHUB_ENV
              else
                echo "Error: Custom branch not provided for 'Other'" >&2
                exit 1
              fi
              ;;
          esac
      
      - name: Add KernelSU
        run: |
          cd "$CONFIG"
          case "${{ inputs.kernelsu_variant }}" in
            "WILD")
              curl -LSs "https://raw.githubusercontent.com/WildKernels/Wild_KSU/wild/kernel/setup.sh" | bash ${{ env.BRANCH }}
              ;;
            "KSU")
              curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash ${{ env.BRANCH }}
              ;;
            "NEXT")
              curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash ${{ env.BRANCH }}
              ;;
            "MKSU")
              curl -LSs "https://raw.githubusercontent.com/5ec1cff/KernelSU/main/kernel/setup.sh" | bash ${{ env.BRANCH }}
              ;;
          esac
          
      - name: Apply SUSFS Patches for KernelSU Variants
        run: |
          cd "$CONFIG"
          
          # Copy SUSFS patches
          cp -v ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch ./common/
          cd common
          patch -p1 --forward < 50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch
          cd ..
          cp -v ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp -v ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
          
          case "${{ inputs.kernelsu_variant }}" in
            "WILD")
              cd ./Wild_KSU
              ;;
            "KSU")
              cd ./KernelSU
              cp -v ../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./
              patch -p1 --forward < 10_enable_susfs_for_ksu.patch
              ;;
            "NEXT")
              cd ./KernelSU-Next
              cp -v ../../kernel_patches/next/0001-Susfs-1.5.9.patch ./
              patch -p1 --forward < 0001-Susfs-1.5.9.patch
              ;;
            "MKSU")
              cd ./KernelSU
              ;;
          esac

      - name: Getting KernelSU Version
        run: |
          cd "$CONFIG"
          
          case "${{ inputs.kernelsu_variant }}" in
            "WILD")
              cd ./Wild_KSU
              BASE_VERSION=10200
              ;;
            "KSU")
              cd ./KernelSU
              BASE_VERSION=10200
              ;;
            "NEXT")
              cd ./KernelSU-Next
              BASE_VERSION=10200
              ;;
            "MKSU")
              cd ./KernelSU
              BASE_VERSION=10200
              ;;
          esac
          
          cd ./kernel
          KSU_VERSION=$(expr $(/usr/bin/git rev-list --count HEAD) "+" $BASE_VERSION)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV

      - name: Apply Hide Stuff Patches
        run: |
          cd "$CONFIG/common"
          cp -v ../../kernel_patches/69_hide_stuff.patch ./
          patch -p1 --forward -F 3 < 69_hide_stuff.patch

      - name: Apply Hooks Patches
        run: |
          cd "$CONFIG/common"
          
          if [ "${{ inputs.kernelsu_variant }}" == "NEXT" ]; then
            cp -v ../../kernel_patches/next/60_scope-minimized_manual_hooks.patch  ./
            patch -p1 --forward -F 3 < 60_scope-minimized_manual_hooks.patch
          elif [ "${{ inputs.kernelsu_variant }}" == "WILD" ]; then
            cp -v ../../kernel_patches/wild/syscall_hooks.patch ./
            patch -p1 --forward -F 3 < syscall_hooks.patch
          fi

      - name: Fix WiFi and Bluetooth on Samsung 6.6 GKI devices
        if: ${{ ( inputs.kernel_version == '6.6' ) }}
        run: |
          SYMBOL_LIST=$CONFIG/common/android/abi_gki_aarch64_galaxy
          echo "kdp_set_cred_non_rcu" >> $SYMBOL_LIST
          echo "kdp_usecount_dec_and_test" >> $SYMBOL_LIST
          echo "kdp_usecount_inc" >> $SYMBOL_LIST
          cd $CONFIG/common
          PATCH="../../kernel_patches/samsung/min_kdp/add-min_kdp-symbols.patch"
          if patch -p1 --dry-run < $PATCH; then
            patch -p1 --no-backup-if-mismatch < $PATCH
          fi
          cd drivers
          cp "../../../kernel_patches/samsung/min_kdp/min_kdp.c" min_kdp.c
          echo "obj-y += min_kdp.o" >> Makefile

      - name: Add Configuration Settings
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          echo "Adding configuration settings to gki_defconfig..."

          # Add KSU configuration settings
          echo "CONFIG_KSU=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          
          if [ "${{ inputs.kernelsu_variant }}" == "NEXT" ] || [ "${{ inputs.kernelsu_variant }}" == "WILD" ]; then
            echo "CONFIG_KSU_KPROBES_HOOK=n" | tee -a ./common/arch/arm64/configs/gki_defconfig
          fi

      - name: Add SUSFS Configuration Settings
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"

          # Add SUSFS configuration settings
          echo "CONFIG_KSU_SUSFS=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y" | tee -a ./common/arch/arm64/configs/gki_defconfig

          if [ "${{ inputs.kernelsu_variant }}" == "NEXT" ] || [ "${{ inputs.kernelsu_variant }}" == "WILD" ]; then
            echo "CONFIG_KSU_SUSFS_SUS_SU=n" | tee -a ./common/arch/arm64/configs/gki_defconfig
          else
            echo "CONFIG_KSU_SUSFS_SUS_SU=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          fi

          # Add additional tmpfs config setting
          echo "CONFIG_TMPFS_XATTR=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TMPFS_POSIX_ACL=y" | tee -a ./common/arch/arm64/configs/gki_defconfig

          # Add additional config setting
          echo "CONFIG_IP_NF_TARGET_TTL=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP6_NF_TARGET_HL=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP6_NF_MATCH_HL=y" | tee -a ./common/arch/arm64/configs/gki_defconfig

          # Add BBR Config
          echo "CONFIG_TCP_CONG_ADVANCED=y" | tee -a ./common/arch/arm64/configs/gki_defconfig 
          echo "CONFIG_TCP_CONG_BBR=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_NET_SCH_FQ=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_BIC=n" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_WESTWOOD=n" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_HTCP=n" | tee -a ./common/arch/arm64/configs/gki_defconfig

          # Remove check_defconfig
          sed -i '2s/check_defconfig//' ./common/build.config.gki

      - name: Change Kernel Name
        run: |
          cd "$CONFIG"
          CURRENT_DATE=$(date -u +"%a %b %d %H:%M:%S UTC %Y")

          if [ -f "build/build.sh" ]; then
              perl -pi -e 's/-dirty//' ./common/scripts/setlocalversion
              sed -i '$s|echo "\$res"|echo "\$res-@NoFloresto+@mr_vokintos"|' ./common/scripts/setlocalversion
              perl -pi -e "s{UTS_VERSION=\"\\\$\(echo \\\$UTS_VERSION \\\$CONFIG_FLAGS \\\$TIMESTAMP \| cut -b -\\\$UTS_LEN\)\"}{UTS_VERSION=\"#1 SMP PREEMPT $CURRENT_DATE\"}" ./common/scripts/mkcompile_h
          else
              perl -pi -e 's/-maybe-dirty//g' ./build/kernel/kleaf/impl/stamp.bzl
              echo "CONFIG_LOCALVERSION=\"-@NoFloresto+@mr_vokintos\"" >> ./common/arch/arm64/configs/gki_defconfig
              perl -pi -e "s/build-timestamp = \\\$\(or \\\$\(KBUILD_BUILD_TIMESTAMP\), \\\$\(build-timestamp-auto\)\)/build-timestamp = \"$CURRENT_DATE\"/" ./common/init/Makefile
              rm -rf ./common/android/abi_gki_protected_exports_*
              perl -pi -e 's/^\s*"protected_exports_list"\s*:\s*"android\/abi_gki_protected_exports_aarch64",\s*$//;' ./common/BUILD.bazel
          fi

      - name: Clean old cache references
        run: |
          cd "$CONFIG"
          # Удаляем старые ссылки на неправильные пути в кэше
          if [ -d "out" ]; then
            find out -type l -delete || true
          fi
          if [ -d "bazel-bin" ]; then
            find bazel-bin -type l -delete || true
          fi
          if [ -d "bazel-out" ]; then
            find bazel-out -type l -delete || true
          fi

      - name: Build with Advanced Optimizations
        run : |
          set -e
          set -x
          cd "$CONFIG"

          # Get CPU count and calculate optimal jobs (double the cores)
          CPU_COUNT=$(nproc --all)
          OPTIMAL_JOBS=$((CPU_COUNT * 2))
          
          echo "Detected $CPU_COUNT CPU cores, using $OPTIMAL_JOBS jobs"
          echo "GitHub Actions typically provides 2-4 cores, so using $OPTIMAL_JOBS parallel jobs"

          if [[ "$CONFIG" == *"6.6"* ]]; then
            echo "Fetching .bazelrc with sm8635-polly-66 configuration..."
            curl -LSs https://raw.githubusercontent.com/TheFloresto/kernel_patches/main/next/sm8635-polly-66.bazelrc -o .bazelrc || exit 1
            EXTRA_BAZEL_FLAGS="--config=sm8635-polly-66"
          else
            echo "Fetching .bazelrc with sm8635-polly configuration..."
            curl -LSs https://raw.githubusercontent.com/TheFloresto/kernel_patches/main/next/sm8635-polly.bazelrc -o .bazelrc || exit 1
            EXTRA_BAZEL_FLAGS="--config=sm8635-polly"
          fi

          # Use ccache in PATH for both build systems
          export PATH="/usr/lib/ccache:$PATH"
          export CCACHE_DIR="${{ env.CCACHE_DIR }}"
          
          echo "ccache status before build:"
          ccache -s

          if [ -f "build/build.sh" ]; then
            echo "Building with legacy build system (Android 12/13)..."
            LTO=full BUILD_CONFIG=common/build.config.gki.aarch64 \
            CC="ccache clang" \
            KCFLAGS="-O2 -pipe" \
            JOBS=$OPTIMAL_JOBS \
            build/build.sh || exit 1
          else
            echo "Building with Bazel (Android 14/15 - optimized)..."
            
            # Очистка старых bazel файлов если они есть
            rm -rf bazel-* || true
            
            tools/bazel clean --expunge || true
            
            tools/bazel build //common:kernel_aarch64_dist \
              --sandbox_writable_path="${{ env.CCACHE_DIR }}" \
              --sandbox_writable_path="${{ env.BAZEL_CACHE_DIR }}" \
              --disk_cache="${{ env.BAZEL_CACHE_DIR }}" \
              --remote_download_outputs=minimal \
              --config=fast \
              --lto=full \
              --jobs=$OPTIMAL_JOBS \
              --experimental_remote_cache_async \
              --local_ram_resources="HOST_RAM*0.8" \
              --local_cpu_resources="HOST_CPUS" \
              $([[ "${{ inputs.kernel_version }}" != "6.6" ]] && echo "--experimental_multi_threaded_digest") \
              $EXTRA_BAZEL_FLAGS || exit 1
          fi
          
          echo "Build completed successfully! Final ccache statistics:"
          ccache -s

      - name: Create Bootimgs Folder and Copy Images for Android 12/13
        if: ${{ inputs.android_version == 'android12' || inputs.android_version == 'android13' }}
        run: |
          mkdir bootimgs
          cp ./$CONFIG/out/${{ inputs.android_version }}-${{ inputs.kernel_version }}/dist/Image ./bootimgs
          cp ./$CONFIG/out/${{ inputs.android_version }}-${{ inputs.kernel_version }}/dist/Image.lz4 ./bootimgs
          cp ./$CONFIG/out/${{ inputs.android_version }}-${{ inputs.kernel_version }}/dist/Image ./
          cp ./$CONFIG/out/${{ inputs.android_version }}-${{ inputs.kernel_version }}/dist/Image.lz4 ./
          gzip -n -k -f -9 ./Image > ./Image.gz

      - name: Create Bootimgs Folder and Copy Images for Android 14/15
        if: ${{ inputs.android_version == 'android14' || inputs.android_version == 'android15' }}
        run: |
          mkdir bootimgs
          cp ./$CONFIG/bazel-bin/common/kernel_aarch64/Image ./bootimgs
          cp ./$CONFIG/bazel-bin/common/kernel_aarch64/Image.lz4 ./bootimgs
          cp ./$CONFIG/bazel-bin/common/kernel_aarch64/Image ./
          cp ./$CONFIG/bazel-bin/common/kernel_aarch64/Image.lz4 ./
          gzip -n -k -f -9 ./Image > ./Image.gz

      - name: Create ZIP Files for Different Formats
        run: |
          cd ./AnyKernel3
          
          ZIP_NAME="${{ inputs.kernelsu_variant }}-$KSUVER-${{ inputs.android_version }}-${{ inputs.kernel_version }}.${{ inputs.sub_level }}-${{ inputs.os_patch_level }}-AK3.zip"
          mv ../Image ./Image
          zip -r "../$ZIP_NAME" ./*
          rm ./Image
          
          ZIP_NAME="${{ inputs.kernelsu_variant }}-$KSUVER-${{ inputs.android_version }}-${{ inputs.kernel_version }}.${{ inputs.sub_level }}-${{ inputs.os_patch_level }}-AK3-lz4.zip"
          mv ../Image.lz4 ./Image.lz4
          zip -r "../$ZIP_NAME" ./*
          rm ./Image.lz4
          
          ZIP_NAME="${{ inputs.kernelsu_variant }}-$KSUVER-${{ inputs.android_version }}-${{ inputs.kernel_version }}.${{ inputs.sub_level }}-${{ inputs.os_patch_level }}-AK3-gz.zip"
          mv ../Image.gz ./Image.gz
          zip -r "../$ZIP_NAME" ./*
          rm ./Image.gz

      - name: Android 12 boot image build script
        if: ${{ inputs.android_version == 'android12' }}
        run: |
          cd bootimgs
          
          GKI_URL=https://dl.google.com/android/gki/gki-certified-boot-android12-5.10-"${{ inputs.os_patch_level }}"_"${{ inputs.revision }}".zip
          FALLBACK_URL=https://dl.google.com/android/gki/gki-certified-boot-android12-5.10-2023-01_r1.zip
          
          status=$(curl -sL -w "%{http_code}" "$GKI_URL" -o /dev/null)
          
          if [ "$status" = "200" ]; then
              curl -Lo gki-kernel.zip "$GKI_URL"
          else
              curl -Lo gki-kernel.zip "$FALLBACK_URL"
          fi
          
          unzip gki-kernel.zip && rm gki-kernel.zip
          FULL_PATH=$(pwd)/boot-5.10.img
          $UNPACK_BOOTIMG --boot_img="$FULL_PATH"
          gzip -n -k -f -9 ./Image > ./Image.gz
          
          $MKBOOTIMG --header_version 4 --kernel Image --output boot.img --ramdisk out/ramdisk --os_version 12.0.0 --os_patch_level "${{ inputs.os_patch_level }}"
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot.img ../${{ inputs.kernelsu_variant }}-$KSUVER-${{ inputs.android_version }}-${{ inputs.kernel_version }}.${{ inputs.sub_level }}-${{ inputs.os_patch_level }}-boot.img
          
          $MKBOOTIMG --header_version 4 --kernel Image.gz --output boot-gz.img --ramdisk out/ramdisk --os_version 12.0.0 --os_patch_level "${{ inputs.os_patch_level }}"
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot-gz.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot-gz.img ../${{ inputs.kernelsu_variant }}-$KSUVER-${{ inputs.android_version }}-${{ inputs.kernel_version }}.${{ inputs.sub_level }}-${{ inputs.os_patch_level }}-boot-gz.img
          
          $MKBOOTIMG --header_version 4 --kernel Image.lz4 --output boot-lz4.img --ramdisk out/ramdisk --os_version 12.0.0 --os_patch_level "${{ inputs.os_patch_level }}"
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot-lz4.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot-lz4.img ../${{ inputs.kernelsu_variant }}-$KSUVER-${{ inputs.android_version }}-${{ inputs.kernel_version }}.${{ inputs.sub_level }}-${{ inputs.os_patch_level }}-boot-lz4.img

      - name: Android 13/14/15 boot image build script
        if: ${{ inputs.android_version == 'android13' || inputs.android_version == 'android14' || inputs.android_version == 'android15' }}
        run: |
          cd bootimgs
          gzip -n -k -f -9 ./Image > ./Image.gz
          
          $MKBOOTIMG --header_version 4 --kernel Image --output boot.img
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot.img ../${{ inputs.kernelsu_variant }}-$KSUVER-${{ inputs.android_version }}-${{ inputs.kernel_version }}.${{ inputs.sub_level }}-${{ inputs.os_patch_level }}-boot.img
          
          $MKBOOTIMG --header_version 4 --kernel Image.gz --output boot-gz.img
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot-gz.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot-gz.img ../${{ inputs.kernelsu_variant }}-$KSUVER-${{ inputs.android_version }}-${{ inputs.kernel_version }}.${{ inputs.sub_level }}-${{ inputs.os_patch_level }}-boot-gz.img
          
          $MKBOOTIMG --header_version 4 --kernel Image.lz4 --output boot-lz4.img
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot-lz4.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot-lz4.img ../${{ inputs.kernelsu_variant }}-$KSUVER-${{ inputs.android_version }}-${{ inputs.kernel_version }}.${{ inputs.sub_level }}-${{ inputs.os_patch_level }}-boot-lz4.img
          
      - name: Compress all img files with gzip
        run: |
          for image in *.img; do
            gzip -vnf9 "$image"
          done
  
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.kernelsu_variant }}-kernel-${{ env.CONFIG }}
          path: |
            *.zip
            *.img.gz
            *Image*
            
