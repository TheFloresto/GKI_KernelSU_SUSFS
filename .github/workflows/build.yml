name: Build Script
permissions:
  contents: write
  actions: write 

on:
  workflow_call:
    inputs:
      android_version:
        required: true
        type: string
      kernel_version:
        required: true
        type: string
      sub_level:
        required: true
        type: string
      os_patch_level:
        required: true
        type: string
      kernelsu_variant:
        required: true
        type: string
      kernelsu_branch:
        required: true
        type: string
      kernelsu_branch_other:
        required: false
        type: string
      revision:
        required: false
        type: string

jobs:
  build-gki:
    runs-on: ubuntu-latest
    timeout-minutes: 180
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"

    steps:
      - name: Maximize Build Space
        uses: AdityaGarg8/remove-unwanted-software@v5
        with:
          remove-dotnet: 'true'          # Frees ~2 GB
          remove-android: 'true'         # Frees ~9 GB
          remove-haskell: 'true'         # Frees ~5.2 GB
          remove-codeql: 'true'          # Frees ~5.4 GB
          remove-docker-images: 'true'   # Frees ~3.2 GB
          remove-large-packages: 'true'  # Frees ~3.1 GB
          remove-swapfile: 'true'        # Frees ~4 GB
          remove-cached-tools: 'false'   # Avoid unless confirmed safe
          verbose: 'true'                # Enable detailed logging

      - name: Setup SWAP
        shell: bash
        run: |
          sudo swapoff -a
          sudo fallocate -l 15G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon -p 1 /swapfile
          echo 'vm.swappiness=1' | sudo tee -a /etc/sysctl.conf
          echo 'vm.vfs_cache_pressure=50' | sudo tee -a /etc/sysctl.conf
          echo 'vm.overcommit_memory=1' | sudo tee -a /etc/sysctl.conf
          sudo sysctl -p
          free -h      

      - name: Set CONFIG Environment Variable
        shell: bash
        run: |
          # Set CONFIG dynamically based on inputs values
          CONFIG="${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ inputs.sub_level }}"
          # Set CONFIG as an environment variable for future steps
          echo "CONFIG=$CONFIG" >> $GITHUB_ENV
          echo "CONFIG set to: $CONFIG"

      - name: Install ccache and dependencies
        shell: bash
        run: sudo apt update && sudo apt install -y libelf-dev libssl-dev build-essential ccache dwarves lz4

      - name: Set up ccache
        shell: bash
        run: |
          mkdir -p ~/.cache/bazel
          ccache --version
          ccache --max-size=2G
          ccache --set-config=compression=true
          echo "CCACHE_DIR=$HOME/.ccache" >> $GITHUB_ENV

      - name: Download toolchain
        shell: bash
        run: |
          AOSP_MIRROR=https://android.googlesource.com
          BRANCH=main-kernel-build-2024
          git clone $AOSP_MIRROR/kernel/prebuilts/build-tools -b $BRANCH --depth 1 kernel-build-tools
          git clone $AOSP_MIRROR/platform/system/tools/mkbootimg -b $BRANCH --depth 1 mkbootimg

      - name: Setup ZyCromerZ Clang Toolchain
        shell: bash  
        run: |
          echo "Downloading ZyCromerZ Clang 22.0.0..."
          mkdir -p clang-zyc
          cd clang-zyc
          curl -LO https://github.com/ZyCromerZ/Clang/releases/download/22.0.0git-20250805-release/Clang-22.0.0git-20250805.tar.gz
          tar -xzf Clang-22.0.0git-20250805.tar.gz
          cd ..
          echo "CLANG_SOURCE=zyc" >> $GITHUB_ENV
          echo "CLANG_PATH=$GITHUB_WORKSPACE/clang-zyc/bin" >> $GITHUB_ENV
          echo "CLANG_VERSION=zyc-22.0.0" >> $GITHUB_ENV
          echo "CLANG_BIN_PATH=$GITHUB_WORKSPACE/clang-zyc/bin" >> $GITHUB_ENV

      - name: Set environment variables
        shell: bash
        run: |
          echo "AVBTOOL=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/bin/avbtool" >> $GITHUB_ENV
          echo "MKBOOTIMG=$GITHUB_WORKSPACE/mkbootimg/mkbootimg.py" >> $GITHUB_ENV
          echo "UNPACK_BOOTIMG=$GITHUB_WORKSPACE/mkbootimg/unpack_bootimg.py" >> $GITHUB_ENV

      - name: Set boot sign key
        shell: bash
        env:
          BOOT_SIGN_KEY: ${{ secrets.BOOT_SIGN_KEY }}
        run: |
          if [ ! -z "$BOOT_SIGN_KEY" ]; then
            echo "$BOOT_SIGN_KEY" > ./kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem
            echo "BOOT_SIGN_KEY_PATH=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem" >> $GITHUB_ENV
          else
            echo "BOOT_SIGN_KEY is not set. Using AOSP sign key..."
            echo "BOOT_SIGN_KEY_PATH=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem" >> $GITHUB_ENV
          fi

      - name: Install Repo
        shell: bash
        run: |
          mkdir -p ./git-repo
          echo "Downloading repo tool..."
          curl https://storage.googleapis.com/git-repo-downloads/repo > ./git-repo/repo
          chmod a+rx ./git-repo/repo
          echo "REPO=$GITHUB_WORKSPACE/./git-repo/repo" >> $GITHUB_ENV

      - name: Clone AnyKernel3 and Other Dependencies
        shell: bash
        run: |
          echo "Cloning AnyKernel3 and other dependencies..."
          ANYKERNEL_BRANCH="gki-2.0"
          SUSFS_BRANCH="gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}"
          echo "Using branch for AnyKernel3: $ANYKERNEL_BRANCH"
          echo "Using branch for SUSFS: $SUSFS_BRANCH"
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b "$SUSFS_BRANCH"      
          git clone https://github.com/TheFloresto/kernel_patches.git -b main       
          git clone https://github.com/TheFloresto/AnyKernel3.git -b "$ANYKERNEL_BRANCH"

      - name: Initialize and Sync Kernel Source
        shell: bash
        run: |
          echo "Creating folder for configuration: $CONFIG..."
          mkdir -p "$CONFIG"
          cd "$CONFIG"
          echo "Initializing and syncing kernel source..."
          FORMATTED_BRANCH="${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ inputs.os_patch_level }}"
          $REPO init --depth=1 --u https://android.googlesource.com/kernel/manifest -b common-${FORMATTED_BRANCH} --repo-rev=v2.16
          REMOTE_BRANCH=$(git ls-remote https://android.googlesource.com/kernel/common ${FORMATTED_BRANCH})
          DEFAULT_MANIFEST_PATH=.repo/manifests/default.xml
          if grep -q deprecated <<< $REMOTE_BRANCH; then
            echo "Found deprecated branch: $FORMATTED_BRANCH"
            sed -i "s/\"${FORMATTED_BRANCH}\"/\"deprecated\/${FORMATTED_BRANCH}\"/g" $DEFAULT_MANIFEST_PATH
          fi
          $REPO --version
          $REPO --trace sync -c -j$(nproc --all) --no-tags --fail-fast
          
      - name: Clean Up ABI Protected Exports
        shell: bash
        run: |
         cd "$CONFIG"
         rm -rf ./common/android/abi_gki_protected_exports_*
         perl -pi -e 's/^\s*"protected_exports_list"\s*:\s*"android\/abi_gki_protected_exports_aarch64",\s*$//;' ./common/BUILD.bazel
         df -h
         
      - name: Fix Less Than 6.6.50 Builds
        shell: bash
        run: |
          cd "$CONFIG/common"
          if [ "${{ inputs.android_version }}" = "android15" ] && [ "${{ inputs.kernel_version }}" = "6.6" ]; then
            if ! grep -qxF '#include <trace/hooks/fs.h>' ./fs/namespace.c; then
                sed -i '/#include <trace\/hooks\/blk.h>/a #include <trace\/hooks\/fs.h>' ./fs/namespace.c
            else
                echo "Line already present. Skipping insert."
            fi
          fi

      - name: Determine the branch for KernelSU
        shell: bash
        run: |
          case "${{ inputs.kernelsu_branch }}" in
            "Stable")
              echo "BRANCH=-" >> $GITHUB_ENV
              ;;
            "Dev")
              if [[ "${{ inputs.kernelsu_variant }}" =~ ^(KSU|MKSU)$ ]]; then
                echo "BRANCH=-s main" >> $GITHUB_ENV
              elif [[ "${{ inputs.kernelsu_variant }}" == "NEXT" ]]; then
                echo "BRANCH=-s next" >> $GITHUB_ENV
              elif [[ "${{ inputs.kernelsu_variant }}" == "WILD" ]]; then
                echo "BRANCH=-s wild" >> $GITHUB_ENV
              fi
              ;;
            "Other")
              if [[ -n "${{ inputs.kernelsu_branch_other }}" ]]; then
                echo "BRANCH=-s ${{ inputs.kernelsu_branch_other }}" >> $GITHUB_ENV
              else
                echo "Error: Custom branch not provided for 'Other'" >&2
                exit 1
              fi
              ;;
          esac
      
      - name: Add KernelSU
        shell: bash
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
      
          case "${{ inputs.kernelsu_variant }}" in
            "WILD")
              echo "Adding Wild KSU..."
              curl -LSs "https://raw.githubusercontent.com/WildKernels/Wild_KSU/wild/kernel/setup.sh" | bash ${{ env.BRANCH }}
              ;;
            "KSU")
              echo "Adding KernelSU Official..."
              curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash ${{ env.BRANCH }}
              ;;
            "NEXT")
              echo "Adding KernelSU Next..."
              curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash ${{ env.BRANCH }}
              ;;
            "MKSU")
              echo "Adding KernelSU MKSU..."
              curl -LSs "https://raw.githubusercontent.com/5ec1cff/KernelSU/main/kernel/setup.sh" | bash ${{ env.BRANCH }}
              ;;
          esac

      - name: Apply SUSFS Patches for KernelSU Variants
        shell: bash
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          
          echo "Applying SUSFS patches..."
          
          # Copy SUSFS patches
          cp -v ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch ./common/
          cd common
          patch -p1 --forward < 50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch
          cd ..
          cp -v ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp -v ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
          
          case "${{ inputs.kernelsu_variant }}" in
            "WILD")
              echo "Applying SUSFS patches for Wild KSU..."
              cd ./Wild_KSU
              ;;
            "KSU")
              echo "Applying SUSFS patches for Official KernelSU..."
              cd ./KernelSU
              cp -v ../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./
              patch -p1 --forward < 10_enable_susfs_for_ksu.patch
              ;;
            "NEXT")
              echo "Applying SUSFS patches for KernelSU Next..."
              cd ./KernelSU-Next
              cp -v ../../kernel_patches/next/0001-Susfs-1.5.9.patch ./
              patch -p1 --forward < 0001-Susfs-1.5.9.patch

              cp -v ../../kernel_patches/next/0001-james.patch ./
              patch -p1 --forward < 0001-james.patch
              ;;
            "MKSU")
              echo "Applying SUSFS patches for MKSU..."
              cd ./KernelSU
              ;;
          esac

      - name: Getting KernelSU Version
        shell: bash
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          
          case "${{ inputs.kernelsu_variant }}" in
            "WILD")
              echo "Getting KernelSU version for Wild KSU..."
              cd ./Wild_KSU
              BASE_VERSION=10200
              ;;
            "KSU")
              echo "Getting KernelSU version for Official KernelSU..."
              cd ./KernelSU
              BASE_VERSION=10200
              ;;
            "NEXT")
              echo "Getting KernelSU version for KernelSU Next..."
              cd ./KernelSU-Next
              BASE_VERSION=10200
              ;;
            "MKSU")
              echo "Getting KernelSU version for MKSU..."
              cd ./KernelSU
              BASE_VERSION=10200
              ;;
          esac
          
          cd ./kernel
          KSU_VERSION=$(expr $(/usr/bin/git rev-list --count HEAD) "+" $BASE_VERSION)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV          

      - name: Apply Hide Stuff Patches
        shell: bash
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG/common"
          cp -v ../../kernel_patches/69_hide_stuff.patch ./
          patch -p1 --forward < 69_hide_stuff.patch

      - name: Apply Hooks Patches
        shell: bash
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG/common"
          
          if [ "${{ inputs.kernelsu_variant }}" == "NEXT" ]; then
            echo "Applying hooks for KernelSU-Next..."
            cp -v ../../kernel_patches/next/60_scope-minimized_manual_hooks.patch ./
            patch -p1 --forward < 60_scope-minimized_manual_hooks.patch
          elif [ "${{ inputs.kernelsu_variant }}" == "WILD" ]; then
            echo "Applying hooks for Wild KSU..."
            cp -v ../../kernel_patches/wild/syscall_hooks.patch ./
            patch -p1 --forward < syscall_hooks.patch
          fi

      - name: Fix WiFi and Bluetooth on Samsung 6.6 GKI devices
        if: ${{ ( inputs.kernel_version == '6.6' ) }}
        shell: bash
        run: |
          echo "[+] Adding Samsung KDP exported symbols to abi_gki_aarch64_galaxy"
          SYMBOL_LIST=$CONFIG/common/android/abi_gki_aarch64_galaxy
          echo "kdp_set_cred_non_rcu" >> $SYMBOL_LIST
          echo "kdp_usecount_dec_and_test" >> $SYMBOL_LIST
          echo "kdp_usecount_inc" >> $SYMBOL_LIST
          echo "[+] Adding Samsung KDP exported symbols definition to abi_gki_aarch64.stg"
          cd $CONFIG/common
          PATCH="../../kernel_patches/samsung/min_kdp/add-min_kdp-symbols.patch"
          if patch -p1 --dry-run < $PATCH; then
            echo "[+] Successfully added Samsung KDP exported symbols definition to abi_gki_aarch64.stg"
            patch -p1 --no-backup-if-mismatch < $PATCH
          fi
          echo "[+] Adding Samsung minimal KDP driver"
          cd drivers
          cp "../../../kernel_patches/samsung/min_kdp/min_kdp.c" min_kdp.c
          echo "obj-y += min_kdp.o" >> Makefile

      - name: Add Configuration Settings
        shell: bash
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          echo "Adding configuration settings to gki_defconfig..."

          # Add KSU configuration settings
          echo "CONFIG_KSU=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          
          if [ "${{ inputs.kernelsu_variant }}" == "NEXT" ] || [ "${{ inputs.kernelsu_variant }}" == "WILD" ]; then
           echo "CONFIG_KSU_KPROBES_HOOK=n" | tee -a ./common/arch/arm64/configs/gki_defconfig
          fi                   

      - name: Add SUSFS Configuration Settings
        shell: bash
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"

          # Add SUSFS configuration settings          
          echo "CONFIG_KSU_SUSFS=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          
          if [ "${{ inputs.kernelsu_variant }}" == "NEXT" ] || [ "${{ inputs.kernelsu_variant }}" == "WILD" ]; then
            echo "CONFIG_KSU_SUSFS_SUS_SU=n" | tee -a ./common/arch/arm64/configs/gki_defconfig
          else
            echo "CONFIG_KSU_SUSFS_SUS_SU=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          fi

          # Add additional tmpfs config setting
          echo "CONFIG_TMPFS_XATTR=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TMPFS_POSIX_ACL=y" | tee -a ./common/arch/arm64/configs/gki_defconfig

          # Add additional config setting
          echo "CONFIG_IP_NF_TARGET_TTL=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP6_NF_TARGET_HL=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP6_NF_MATCH_HL=y" | tee -a ./common/arch/arm64/configs/gki_defconfig

          # Add BBR Config
          echo "CONFIG_TCP_CONG_ADVANCED=y" | tee -a ./common/arch/arm64/configs/gki_defconfig 
          echo "CONFIG_TCP_CONG_BBR=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_NET_SCH_FQ=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_BIC=n" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_WESTWOOD=n" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_HTCP=n" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_NET_SCH_FQ=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_NET_SCH_FQ_CODEL=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SWITCH_MANAGER=y" | tee -a ./common/arch/arm64/configs/gki_defconfig

          # Remove check_defconfig
          sed -i '2s/check_defconfig//' ./common/build.config.gki

      - name: Set Build Info Environment Variables
        shell: bash
        run: |
          # Получаем текущую дату в UTC формате
          BUILD_DATE=$(date -u '+%a %b %d %H:%M:%S UTC %Y')
          echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV
          
          # Задаем информацию о пользователе и хосте
          BUILD_USER="TheFloresto"
          BUILD_HOST="thefloresto-labs" 
          echo "BUILD_USER=$BUILD_USER" >> $GITHUB_ENV
          echo "BUILD_HOST=$BUILD_HOST" >> $GITHUB_ENV

      - name: Change Kernel Name
        shell: bash
        run: |
          cd "$CONFIG"
          
          # Проверяем какая система сборки используется
          if [ -f "build/build.sh" ]; then
              echo "Using legacy build system for kernel ${{ inputs.kernel_version }}"
              
              # Для старых версий ядра - модифицируем setlocalversion напрямую
              perl -pi -e 's/-dirty//' ./common/scripts/setlocalversion
              perl -pi -e 's|echo "\$res"|echo "\$res-@NoFloresto"|' ./common/scripts/setlocalversion
              
              # Также добавляем в defconfig для двойной гарантии
              echo 'CONFIG_LOCALVERSION="-@NoFloresto"' >> ./common/arch/arm64/configs/gki_defconfig
              echo 'CONFIG_LOCALVERSION_AUTO=n' >> ./common/arch/arm64/configs/gki_defconfig
              
              # Устанавливаем кастомную дату сборки
              perl -pi -e "s{UTS_VERSION=\"\\\$\\(echo \\\$UTS_VERSION \\\$CONFIG_FLAGS \\\$TIMESTAMP \\| cut -b -\\\$UTS_LEN\\)\"}{UTS_VERSION=\"#1 SMP PREEMPT ${{ env.BUILD_DATE }}\"}g" ./common/scripts/mkcompile_h
              
              # Задаем кастомного пользователя и хост
              perl -pi -e "s/LINUX_COMPILE_BY=.*/LINUX_COMPILE_BY=\"${{ env.BUILD_USER }}\"/" ./common/scripts/mkcompile_h
              perl -pi -e "s/LINUX_COMPILE_HOST=.*/LINUX_COMPILE_HOST=\"${{ env.BUILD_HOST }}\"/" ./common/scripts/mkcompile_h
              
          else
              echo "Using Bazel build system for kernel ${{ inputs.kernel_version }}"
              
              # Remove -maybe-dirty
              perl -pi -e 's/-maybe-dirty//g' ./build/kernel/kleaf/impl/stamp.bzl
              perl -pi.bak -e 's/^/            # / if /if \[\[ -n "\$android_release" \]\] && \[\[ -n "\$KMI_GENERATION" \]\]; then/ .. /echo \$scmversion/' ./build/kernel/kleaf/impl/stamp.bzl
              
              # Set Kernel Name для Bazel
              echo 'CONFIG_LOCALVERSION="-@NoFloresto"' >> ./common/arch/arm64/configs/gki_defconfig
              echo 'CONFIG_LOCALVERSION_AUTO=n' >> ./common/arch/arm64/configs/gki_defconfig
              
              # Set Kernel Timestamp
              perl -pi -e "s/build-timestamp = \\\$\\(or \\\$\\(KBUILD_BUILD_TIMESTAMP\\), \\\$\\(build-timestamp-auto\\)\\)/build-timestamp = \"${{ env.BUILD_DATE }}\"/" ./common/init/Makefile
              
              # Установим пользователя и хост для bazel сборки
              echo "CONFIG_BUILD_USER=\"${{ env.BUILD_USER }}\"" >> ./common/arch/arm64/configs/gki_defconfig
              echo "CONFIG_BUILD_HOST=\"${{ env.BUILD_HOST }}\"" >> ./common/arch/arm64/configs/gki_defconfig
          fi
          
          # Проверяем что изменения применились
          echo "=== Checking setlocalversion modifications ==="
          if [ -f "./common/scripts/setlocalversion" ]; then
              grep -A3 -B3 "@NoFloresto" ./common/scripts/setlocalversion || echo "No @NoFloresto found in setlocalversion"
          fi
          
          echo "=== Checking defconfig modifications ==="
          grep "LOCALVERSION" ./common/arch/arm64/configs/gki_defconfig || echo "No LOCALVERSION found in defconfig"
    
      - name: Add Build based configs
        shell: bash
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          echo "CONFIG_LTO_CLANG_THIN=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_LTO_CLANG=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3=n" | tee -a "./common/arch/arm64/configs/gki_defconfig"

          echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y" | tee -a ./common/arch/arm64/configs/gki_defconfig
          # Ativar ccache
          echo "CONFIG_CCACHE=y" | tee -a ./common/arch/arm64/configs/gki_defconfig

      - name: Override Clang Detection for ZyC
        shell: bash
        run: |
         # Force use ZyC Clang instead of auto-detection
         echo "Forcing ZyC Clang usage..."
         echo "CLANG_VERSION=zyc-22.0.0" >> $GITHUB_ENV
         echo "CLANG_BIN_PATH=$GITHUB_WORKSPACE/clang-zyc/bin" >> $GITHUB_ENV
         echo "Using ZyC Clang: $GITHUB_WORKSPACE/clang-zyc/bin/clang"

      - name: Build Kernel
        shell: bash
        run: |
          KERNEL_PATH="$GITHUB_WORKSPACE/$CONFIG"
          CLANG_BIN_PATH="${{ env.CLANG_BIN_PATH }}"
          CLANG_VERSION="${{ env.CLANG_VERSION }}"
          if [ -d "$CLANG_BIN_PATH" ] && [ -x "$CLANG_BIN_PATH/clang" ]; then
            echo "Adding Clang to PATH: $CLANG_BIN_PATH"
            export PATH="$CLANG_BIN_PATH:$PATH"
            SELECTED_CLANG="$CLANG_BIN_PATH/clang"
          elif command -v clang >/dev/null 2>&1; then
            SELECTED_CLANG="$(command -v clang)"
            echo "Using system Clang: $SELECTED_CLANG"
            exit 1
          else
            echo "Error: No valid Clang binary found"
            exit 1
          fi
          echo "Using Clang version: $($SELECTED_CLANG --version | head -n1)"
          LLVM_TOOLS="clang ld.lld llvm-ar llvm-objcopy llvm-objdump llvm-nm"
          MISSING_TOOLS=""
          for tool in $LLVM_TOOLS; do
            if ! command -v $tool >/dev/null 2>&1; then
              MISSING_TOOLS="$MISSING_TOOLS $tool"
            fi
          done
          if [ -n "$MISSING_TOOLS" ]; then
            echo "Installing missing LLVM tools:$MISSING_TOOLS"
            sudo apt-get update
            sudo apt-get install -yq --no-install-recommends llvm
            for tool in $MISSING_TOOLS; do
              if ! command -v $tool >/dev/null 2>&1; then
                echo "Error: Failed to install $tool"
                exit 1
              fi
            done
          fi
          KERNEL_VERSION="${{ inputs.kernel_version }}"
          if [[ "$KERNEL_VERSION" == "5.10" ]]; then
            USE_LLVM_IAS=true
          fi
          cd "$KERNEL_PATH/common" || exit 1
          
          # Устанавливаем переменные окружения для кастомной информации о сборке
          export KBUILD_BUILD_USER="${{ env.BUILD_USER }}"
          export KBUILD_BUILD_HOST="${{ env.BUILD_HOST }}"
          export KBUILD_BUILD_TIMESTAMP="${{ env.BUILD_DATE }}"
          
          MAKE_ARGS="LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-android- \
            RUSTC=$GITHUB_WORKSPACE/clang-zyc/bin/rustc \
            PAHOLE=$KERNEL_PATH/prebuilts/kernel-build-tools/linux-x86/bin/pahole \
            LD=ld.lld HOSTLD=ld.lld"
          if [[ -v USE_LLVM_IAS ]]; then
            MAKE_ARGS="LLVM_IAS=1 $MAKE_ARGS"
          fi

          if [[ "${{ inputs.android_version }}" == "android15" && "${{ inputs.kernel_version }}" == "6.6" ]]; then
           KCFLAGS_EXTRA="-Wno-error -O2 -flto=thin -fno-stack-protector"
          else
            KCFLAGS_EXTRA="-Wno-error -O2 -flto=thin -fno-stack-protector -ffunction-sections -fdata-sections"
          fi
          
          make -j$(nproc --all) O=out $MAKE_ARGS KCFLAGS+="$KCFLAGS_EXTRA" gki_defconfig || exit 1
          make -j$(nproc --all) O=out $MAKE_ARGS KCFLAGS+="$KCFLAGS_EXTRA" || exit 1

          
          echo "Kernel build completed successfully!"
          
      - name: Create Bootimgs Folder and Copy Images
        shell: bash
        run: |
          mkdir -p bootimgs

          echo "Creating bootimgs folder and copying images..."
          CONFIG_DIR="$GITHUB_WORKSPACE/$CONFIG"
          KERNEL_PATH="$CONFIG_DIR"
          
          # Copy kernel images
          cp "$KERNEL_PATH/common/out/arch/arm64/boot/Image" ./bootimgs/
          cp "$KERNEL_PATH/common/out/arch/arm64/boot/Image" ./
          
          # Create compressed versions
          echo "Creating compressed versions..."
          lz4 -9 -f ./Image ./Image.lz4
          gzip -n -k -f -9 ./Image
          
          # Copy to bootimgs folder
          cp ./Image.lz4 ./bootimgs/
          cp ./Image.gz ./bootimgs/

      - name: Create AnyKernel3 ZIP Files for Different Formats
        shell: bash
        run: |
          echo "Creating AnyKernel3 zip files for all formats..."
          cd ./AnyKernel3
          
          # Create and upload zip for each format
          ZIP_NAME="${{ inputs.kernelsu_variant }}-$KSUVER-${{ inputs.android_version }}-${{ inputs.kernel_version }}.${{ inputs.sub_level }}-${{ inputs.os_patch_level }}-AK3.zip"
          echo "Creating zip file: $ZIP_NAME..."
          cp ../Image ./Image
          zip -r "../$ZIP_NAME" ./*
          rm ./Image
          
          ZIP_NAME="${{ inputs.kernelsu_variant }}-$KSUVER-${{ inputs.android_version }}-${{ inputs.kernel_version }}.${{ inputs.sub_level }}-${{ inputs.os_patch_level }}-AK3-lz4.zip"
          echo "Creating zip file: $ZIP_NAME..."
          cp ../Image.lz4 ./Image.lz4
          zip -r "../$ZIP_NAME" ./*
          rm ./Image.lz4
          
          ZIP_NAME="${{ inputs.kernelsu_variant }}-$KSUVER-${{ inputs.android_version }}-${{ inputs.kernel_version }}.${{ inputs.sub_level }}-${{ inputs.os_patch_level }}-AK3-gz.zip"
          echo "Creating zip file: $ZIP_NAME..."
          cp ../Image.gz ./Image.gz
          zip -r "../$ZIP_NAME" ./*
          rm ./Image.gz

      - name: Android 12 boot image build script
        if: ${{ inputs.android_version == 'android12' }}
        shell: bash   
        run: |
          echo "Building Android 12 boot images..."
          cd bootimgs
          
          GKI_URL=https://dl.google.com/android/gki/gki-certified-boot-android12-5.10-"${{ inputs.os_patch_level }}"_"${{ inputs.revision }}".zip
          FALLBACK_URL=https://dl.google.com/android/gki/gki-certified-boot-android12-5.10-2023-01_r1.zip
          
          # Check if the GKI URL is available
          echo "Checking if GKI kernel URL is reachable: $GKI_URL"
          status=$(curl -sL -w "%{http_code}" "$GKI_URL" -o /dev/null)
          
          if [ "$status" = "200" ]; then
              echo "[+] Downloading from GKI_URL"
              curl -Lo gki-kernel.zip "$GKI_URL"
          else
              echo "[+] $GKI_URL not found, using $FALLBACK_URL"
              curl -Lo gki-kernel.zip "$FALLBACK_URL"
          fi
          
          # Unzip the downloaded kernel and remove the zip
          echo "Unzipping the downloaded kernel..."
          unzip gki-kernel.zip && rm gki-kernel.zip
          
          echo "Unpacking boot.img..."
          FULL_PATH=$(pwd)/boot-5.10.img
          echo "Unpacking using: $FULL_PATH"
          
          echo "Running unpack_bootimg.py..."
          $UNPACK_BOOTIMG --boot_img="$FULL_PATH"
          
          echo "Building boot.img"
          $MKBOOTIMG --header_version 4 --kernel Image --output boot.img --ramdisk out/ramdisk --os_version 12.0.0 --os_patch_level "${{ inputs.os_patch_level }}"
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot.img ../${{ inputs.kernelsu_variant }}-$KSUVER-${{ inputs.android_version }}-${{ inputs.kernel_version }}.${{ inputs.sub_level }}-${{ inputs.os_patch_level }}-boot.img
          
          echo "Building boot-gz.img"
          $MKBOOTIMG --header_version 4 --kernel Image.gz --output boot-gz.img --ramdisk out/ramdisk --os_version 12.0.0 --os_patch_level "${{ inputs.os_patch_level }}"
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot-gz.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot-gz.img ../${{ inputs.kernelsu_variant }}-$KSUVER-${{ inputs.android_version }}-${{ inputs.kernel_version }}.${{ inputs.sub_level }}-${{ inputs.os_patch_level }}-boot-gz.img
          
          echo "Building boot-lz4.img"
          $MKBOOTIMG --header_version 4 --kernel Image.lz4 --output boot-lz4.img --ramdisk out/ramdisk --os_version 12.0.0 --os_patch_level "${{ inputs.os_patch_level }}"
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot-lz4.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot-lz4.img ../${{ inputs.kernelsu_variant }}-$KSUVER-${{ inputs.android_version }}-${{ inputs.kernel_version }}.${{ inputs.sub_level }}-${{ inputs.os_patch_level }}-boot-lz4.img

      - name: Android 13/14/15 boot image build script
        if: ${{ inputs.android_version == 'android13' || inputs.android_version == 'android14' || inputs.android_version == 'android15' }}
        shell: bash
        run: |
          cd bootimgs
          
          echo "Building boot.img"
          $MKBOOTIMG --header_version 4 --kernel Image --output boot.img
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot.img ../${{ inputs.kernelsu_variant }}-$KSUVER-${{ inputs.android_version }}-${{ inputs.kernel_version }}.${{ inputs.sub_level }}-${{ inputs.os_patch_level }}-boot.img
          
          echo "Building boot-gz.img"
          $MKBOOTIMG --header_version 4 --kernel Image.gz --output boot-gz.img
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot-gz.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot-gz.img ../${{ inputs.kernelsu_variant }}-$KSUVER-${{ inputs.android_version }}-${{ inputs.kernel_version }}.${{ inputs.sub_level }}-${{ inputs.os_patch_level }}-boot-gz.img
          
          echo "Building boot-lz4.img"
          $MKBOOTIMG --header_version 4 --kernel Image.lz4 --output boot-lz4.img
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot-lz4.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot-lz4.img ../${{ inputs.kernelsu_variant }}-$KSUVER-${{ inputs.android_version }}-${{ inputs.kernel_version }}.${{ inputs.sub_level }}-${{ inputs.os_patch_level }}-boot-lz4.img
          
      - name: Compress all img files with gzip
        shell: bash
        run: |
          for image in *.img; do
            if [ -f "$image" ]; then
              gzip -vnf9 "$image"
            fi
          done
  
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.kernelsu_variant }}-kernel-${{ env.CONFIG }}
          path: |
            *.zip
            *.img.gz
            
