name: Build and Release GKI Kernels

permissions:
  contents: write
  actions: write

on:
  workflow_dispatch:
    inputs:
      make_release:
        description: 'Do you want to create a release?'
        required: true
        type: boolean
        default: false
      release_type:
        description: "Choose Release Type"
        required: true
        type: choice
        options:
          - Actions
          - Pre-Release
          - Release
        default: Pre-Release
      ksun_branch:
        description: "Choose KernelSU Next Branch"
        required: true
        type: choice
        options:
          - stable
          - next
        default: next
      android_version:
        description: "Choose Android Version"
        required: true
        type: choice
        options:
          - android12-5.10
          - android13-5.10
          - android13-5.15
          - android14-5.15
          - android14-6.1
          - android15-6.6
        default: android14-6.1
      susfs_branch:
        description: "Choose SusFS Branch"
        type: string
        default: "gki-android14-6.1"
      patch_mode:
        description: "Patch Mode"
        required: true
        type: choice
        options:
          - standard
          - custom
        default: standard
      custom_patch:
        description: "Custom Patch Tag (if custom mode, e.g. 6.1-2025-07)"
        type: string
        default: ""

jobs:
  build-gki:
    name: Build GKI (${{ inputs.android_version }}, KSU-${{ inputs.ksun_branch }}, Patch-${{ inputs.patch_mode == 'standard' && 'standard' || inputs.custom_patch }})
    runs-on: ubuntu-latest
    timeout-minutes: 180
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      USE_CCACHE: "true"
    
    outputs:
      timestamp: ${{ steps.set-env.outputs.timestamp }}
      new_tag: ${{ steps.set-env.outputs.new_tag }}
      kernel_full_version: ${{ steps.kernel-version.outputs.kernel_full_version }}
      kernel_sublevel: ${{ steps.kernel-version.outputs.kernel_sublevel }}
      artifact_name: ${{ steps.set-env.outputs.artifact_name }}
      patch_info: ${{ steps.patch-params.outputs.patch_info }}
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Maximize Build Space
        uses: AdityaGarg8/remove-unwanted-software@v5
        with:
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'
          remove-large-packages: 'true'
          remove-swapfile: 'true'
          remove-cached-tools: 'false'
          verbose: 'true'

      - name: Setup Build Environment
        run: |
          sudo apt-get update
          sudo apt-get install -y git curl wget zip unzip build-essential bc bison flex libssl-dev libncurses5-dev libelf-dev ccache python3 python3-pip
          
      - name: Setup Repo Tool
        run: |
          mkdir -p ~/.bin
          PATH="${HOME}/.bin:${PATH}"
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/.bin/repo
          chmod a+rx ~/.bin/repo
          echo "${HOME}/.bin" >> $GITHUB_PATH

      - name: Setup Git Config
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

      - name: Set up ccache
        run: |
          mkdir -p ~/.cache/bazel
          ccache --version
          ccache --max-size=4G
          ccache --set-config=compression=true
          echo "CCACHE_DIR=$HOME/.ccache" >> $GITHUB_ENV

      - name: Set Environment Variables
        id: set-env
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M)
          
          # Determine patch suffix for naming
          if [ "${{ inputs.patch_mode }}" = "standard" ]; then
            PATCH_SUFFIX="std"
          else
            PATCH_SUFFIX="${{ inputs.custom_patch }}"
          fi
          
          NEW_TAG=GKI-${{ inputs.android_version }}-KSUN-$(date +%Y%m%d-%H%M)
          ARTIFACT_NAME=kernel-gki-${{ inputs.android_version }}-${{ inputs.ksun_branch }}-${PATCH_SUFFIX}-$TIMESTAMP
          
          echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV
          echo "PATCH_SUFFIX=$PATCH_SUFFIX" >> $GITHUB_ENV
          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "artifact_name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT

      - name: Determine Build Parameters
        id: build-params
        run: |
          case "${{ inputs.android_version }}" in
            "android12-5.10")
              KERNEL_VERSION="5.10"
              MANIFEST_BRANCH="common-android12-5.10"
              ;;
            "android13-5.10")
              KERNEL_VERSION="5.10"
              MANIFEST_BRANCH="common-android13-5.10"
              ;;
            "android13-5.15")
              KERNEL_VERSION="5.15"
              MANIFEST_BRANCH="common-android13-5.15"
              ;;
            "android14-5.15")
              KERNEL_VERSION="5.15"
              MANIFEST_BRANCH="common-android14-5.15"
              ;;
            "android14-6.1")
              KERNEL_VERSION="6.1"
              MANIFEST_BRANCH="common-android14-6.1"
              ;;
            "android15-6.6")
              KERNEL_VERSION="6.6"
              MANIFEST_BRANCH="common-android15-6.6"
              ;;
            *)
              echo "Unsupported Android version: ${{ inputs.android_version }}"
              exit 1
              ;;
          esac
          
          echo "kernel_version=$KERNEL_VERSION" >> $GITHUB_OUTPUT
          echo "manifest_branch=$MANIFEST_BRANCH" >> $GITHUB_OUTPUT

      - name: Determine Patch Parameters
        id: patch-params
        run: |
          echo "Patch mode: ${{ inputs.patch_mode }}"
          
          if [ "${{ inputs.patch_mode }}" = "standard" ]; then
            # Standard mode - use default branch
            PATCH_BRANCH="${{ steps.build-params.outputs.manifest_branch }}"
            PATCH_TAG="standard"
            PATCH_INFO="Standard (${{ steps.build-params.outputs.manifest_branch }})"
            echo "Using standard patches from: $PATCH_BRANCH"
            
          elif [ "${{ inputs.patch_mode }}" = "custom" ]; then
            # Custom mode - use user-defined patch
            if [ -z "${{ inputs.custom_patch }}" ]; then
              echo "Error: Custom patch is empty!"
              exit 1
            fi
            PATCH_VALUE="${{ inputs.custom_patch }}"
            PATCH_BRANCH="common-android-mainline"
            PATCH_TAG="android-mainline-$PATCH_VALUE"
            PATCH_INFO="Custom ($PATCH_TAG)"
            echo "Using custom patch: $PATCH_TAG"
            
          else
            echo "Error: Unknown patch mode: ${{ inputs.patch_mode }}"
            exit 1
          fi
          
          echo "patch_branch=$PATCH_BRANCH" >> $GITHUB_OUTPUT
          echo "patch_tag=$PATCH_TAG" >> $GITHUB_OUTPUT
          echo "patch_info=$PATCH_INFO" >> $GITHUB_OUTPUT
          
          echo "Final patch configuration:"
          echo "  Branch: $PATCH_BRANCH"
          echo "  Tag: $PATCH_TAG"
          echo "  Info: $PATCH_INFO"

      - name: Download toolchain
        run: |
          AOSP_MIRROR=https://android.googlesource.com
          BRANCH=main-kernel-build-2024
          git clone $AOSP_MIRROR/kernel/prebuilts/build-tools -b $BRANCH --depth 1 kernel-build-tools
          git clone $AOSP_MIRROR/platform/system/tools/mkbootimg -b $BRANCH --depth 1 mkbootimg

      - name: Set environment variables for tools
        run: |
          echo "AVBTOOL=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/bin/avbtool" >> $GITHUB_ENV
          echo "MKBOOTIMG=$GITHUB_WORKSPACE/mkbootimg/mkbootimg.py" >> $GITHUB_ENV
          echo "UNPACK_BOOTIMG=$GITHUB_WORKSPACE/mkbootimg/unpack_bootimg.py" >> $GITHUB_ENV

      - name: Set boot sign key
        env:
          BOOT_SIGN_KEY: ${{ secrets.BOOT_SIGN_KEY }}
        run: |
          if [ ! -z "$BOOT_SIGN_KEY" ]; then
            echo "$BOOT_SIGN_KEY" > ./kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem
            echo "BOOT_SIGN_KEY_PATH=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem" >> $GITHUB_ENV
          else
            echo "BOOT_SIGN_KEY is not set. Using AOSP sign key..."
            echo "BOOT_SIGN_KEY_PATH=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem" >> $GITHUB_ENV
          fi

      - name: Clone Dependencies
        run: |
          echo "Cloning SuSFS, patches, and AnyKernel3..."
          git clone https://gitlab.com/simonpunk/susfs4ksu -b ${{ inputs.susfs_branch }}
          git clone https://github.com/infectedmushi/kernel_patches -b main
          git clone https://github.com/deepongi-labs/AnyKernel3-p8a -b gki-2.0

      - name: Initialize and Sync Kernel Sources
        run: |
          echo "Initializing repo..."
          
          # Use the determined patch branch
          REPO_BRANCH="${{ steps.patch-params.outputs.patch_branch }}"
          echo "Using repository branch: $REPO_BRANCH"
          
          repo init --depth=1 --u https://android.googlesource.com/kernel/manifest -b $REPO_BRANCH
          
          # Check for deprecated branch
          REMOTE_BRANCH=$(git ls-remote https://android.googlesource.com/kernel/common $REPO_BRANCH || echo "")
          DEFAULT_MANIFEST_PATH=.repo/manifests/default.xml
          if echo "$REMOTE_BRANCH" | grep -q "deprecated"; then
            echo "Found deprecated branch: $REPO_BRANCH"
            sed -i "s/\"$REPO_BRANCH\"/\"deprecated\/$REPO_BRANCH\"/g" $DEFAULT_MANIFEST_PATH
          fi
          
          echo "Syncing sources..."
          repo sync -c -j$(nproc) --no-tags --fail-fast

      - name: Get Latest Kernel Version and Update Makefile
        id: kernel-version
        run: |
          cd common
          echo "Getting latest kernel version..."
          
          # Determine source for Makefile based on patch mode
          if [ "${{ inputs.patch_mode }}" = "standard" ]; then
            # Standard mode - use android version branch
            MAKEFILE_BRANCH="${{ inputs.android_version }}"
            echo "Using standard Makefile from branch: $MAKEFILE_BRANCH"
            curl -s "https://android.googlesource.com/kernel/common/+/refs/heads/$MAKEFILE_BRANCH/Makefile?format=TEXT" | base64 -d > Makefile.latest
          else
            # Custom mode - use mainline with tag
            MAKEFILE_TAG="${{ steps.patch-params.outputs.patch_tag }}"
            echo "Using patched Makefile from tag: $MAKEFILE_TAG"
            curl -s "https://android.googlesource.com/kernel/common/+/refs/tags/$MAKEFILE_TAG/Makefile?format=TEXT" | base64 -d > Makefile.latest
          fi
          
          # Extract versions from Makefile
          VERSION=$(grep "^VERSION = " Makefile.latest | head -1 | cut -d' ' -f3)
          PATCHLEVEL=$(grep "^PATCHLEVEL = " Makefile.latest | head -1 | cut -d' ' -f3)
          SUBLEVEL=$(grep "^SUBLEVEL = " Makefile.latest | head -1 | cut -d' ' -f3)
          
          echo "Latest kernel version: $VERSION.$PATCHLEVEL.$SUBLEVEL"
          KERNEL_FULL_VERSION="$VERSION.$PATCHLEVEL.$SUBLEVEL"
          echo "KERNEL_FULL_VERSION=$KERNEL_FULL_VERSION" >> $GITHUB_ENV
          echo "KERNEL_SUBLEVEL=$SUBLEVEL" >> $GITHUB_ENV
          echo "kernel_full_version=$KERNEL_FULL_VERSION" >> $GITHUB_OUTPUT
          echo "kernel_sublevel=$SUBLEVEL" >> $GITHUB_OUTPUT
          
          # Backup current Makefile and replace
          cp Makefile Makefile.backup
          mv Makefile.latest Makefile
          
          echo "Makefile updated successfully"
          echo "Current kernel version info:"
          head -10 Makefile | grep -E "VERSION|PATCHLEVEL|SUBLEVEL"

      - name: Apply Patch-specific Changes
        run: |
          cd common
          
          if [ "${{ inputs.patch_mode }}" != "standard" ]; then
            echo "Applying patch-specific changes for: ${{ steps.patch-params.outputs.patch_tag }}"
            
            # Check if we need to cherry-pick or merge specific patches
            PATCH_TAG="${{ steps.patch-params.outputs.patch_tag }}"
            
            # Try to checkout the specific tag if it exists
            if git ls-remote --tags origin | grep -q "refs/tags/$PATCH_TAG"; then
              echo "Found tag $PATCH_TAG, attempting to merge changes..."
              git fetch origin tag $PATCH_TAG --no-tags
              
              # Create a temporary branch and try to merge the changes
              git checkout -b temp-patch-branch
              git merge FETCH_HEAD --no-edit || {
                echo "Merge conflicts detected, trying to resolve automatically..."
                git status
                # You might want to add specific conflict resolution here
              }
            else
              echo "Tag $PATCH_TAG not found, continuing with current state..."
            fi
          fi

      - name: Setup KernelSU Next
        run: |
          cd common
          echo "Adding KSU-Next..."
          curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/${{ inputs.ksun_branch }}/kernel/setup.sh" | bash -s ${{ inputs.ksun_branch }}

      - name: Apply SusFS Patches
        run: |
          cd common
          echo "Applying SUSFS patches..."
          cp -v ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ inputs.android_version }}.patch ./
          cp -rv ../susfs4ksu/kernel_patches/fs/* ./fs/
          cp -rv ../susfs4ksu/kernel_patches/include/linux/* ./include/linux/
          
          patch -p1 --forward --fuzz=3 < 50_add_susfs_in_gki-${{ inputs.android_version }}.patch
          
          cd KernelSU-Next
          cp -v ../../kernel_patches/next/0001-kernel-implement-susfs-v1.5.8-KernelSU-Next-v1.0.8.patch ./
          patch -p1 --fuzz=3 < 0001-kernel-implement-susfs-v1.5.8-KernelSU-Next-v1.0.8.patch
          cd ..

      - name: Apply Additional Patches
        run: |
          cd common
          echo "Applying additional patches..."
          cp -v ../kernel_patches/69_hide_stuff.patch ./
          cp -v ../kernel_patches/next/scope_min_manual_hooks_v1.4.patch ./
          patch -p1 -F 3 < 69_hide_stuff.patch
          patch -p1 -F 3 < scope_min_manual_hooks_v1.4.patch
          
          echo "Removing exports..."
          sed -i '/^[[:space:]]*"protected_exports_list"[[:space:]]*:[[:space:]]*"android\/abi_gki_protected_exports_aarch64",$/d' ./BUILD.bazel
          rm -f android/abi_gki_protected_exports_*

      - name: Configure Kernel
        run: |
          cd common
          echo "Adding KSU configuration to gki_defconfig..."
          cat >> arch/arm64/configs/gki_defconfig << EOF
          CONFIG_KSU=y
          CONFIG_KSU_KPROBES_HOOK=n
          CONFIG_KSU_SUSFS=y
          CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y
          CONFIG_KSU_SUSFS_SUS_PATH=y
          CONFIG_KSU_SUSFS_SUS_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SUS_KSTAT=y
          CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n
          CONFIG_KSU_SUSFS_TRY_UMOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SPOOF_UNAME=y
          CONFIG_KSU_SUSFS_ENABLE_LOG=y
          CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y
          CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y
          CONFIG_KSU_SUSFS_OPEN_REDIRECT=y
          CONFIG_KSU_SUSFS_SUS_SU=n
          CONFIG_TMPFS_XATTR=y
          CONFIG_TMPFS_POSIX_ACL=y
          CONFIG_IP_NF_TARGET_TTL=y
          CONFIG_IP6_NF_TARGET_HL=y
          CONFIG_IP6_NF_MATCH_HL=y
          CONFIG_TCP_CONG_ADVANCED=y
          CONFIG_TCP_CONG_BBR=y
          CONFIG_NET_SCH_FQ=y
          CONFIG_TCP_CONG_BIC=n
          CONFIG_TCP_CONG_WESTWOOD=n
          CONFIG_TCP_CONG_HTCP=n
          EOF

      - name: Build Kernel
        run: |
          cd common
          echo "Building kernel..."
          
          # Modify version string without patch suffix
          sed -i '$s|echo "\$res"|echo "\$res-TheFloresto"|' scripts/setlocalversion
          sed -i "/stable_scmversion_cmd/s/-maybe-dirty//g" ../build/kernel/kleaf/impl/stamp.bzl
          sed -i '2s/check_defconfig//' build.config.gki
          sed -i "s|build-timestamp = \$(or \$(KBUILD_BUILD_TIMESTAMP), \$(build-timestamp-auto))|build-timestamp = \"$(date -u +"%a %b %d %T UTC %Y")\"|" init/Makefile
          
          cd ..
          tools/bazel build --disk_cache=~/.cache/bazel-disk --experimental_multi_threaded_digest --config=fast --lto=thin //common:kernel_aarch64_dist
          
          echo "Kernel build completed!"
          ccache --show-stats

      - name: Prepare Artifacts
        run: |
          mkdir -p bootimgs
          
          # Copy kernel images
          cp -v bazel-bin/common/kernel_aarch64/Image.lz4 bootimgs/
          cp -v bazel-bin/common/kernel_aarch64/Image.gz bootimgs/ || gzip -c bazel-bin/common/kernel_aarch64/Image > bootimgs/Image.gz
          cp -v bazel-bin/common/kernel_aarch64/Image bootimgs/
          
          # Copy boot images if they exist
          cp -v bazel-bin/common/kernel_aarch64_gki_artifacts/boot.img bootimgs/ || echo "boot.img not found"
          cp -v bazel-bin/common/kernel_aarch64_gki_artifacts/boot-gz.img bootimgs/ || echo "boot-gz.img not found"
          cp -v bazel-bin/common/kernel_aarch64_gki_artifacts/boot-lz4.img bootimgs/ || echo "boot-lz4.img not found"

      - name: Create boot images if needed
        run: |
          if [ ! -f "bootimgs/boot.img" ] || [ ! -f "bootimgs/boot-gz.img" ] || [ ! -f "bootimgs/boot-lz4.img" ]; then
            echo "Creating boot images manually..."
            cd bootimgs
            
            echo "Building boot.img (RAW)"
            $MKBOOTIMG --header_version 4 --kernel Image --output boot.img
            $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
            
            echo "Building boot.img (GZ)"
            $MKBOOTIMG --header_version 4 --kernel Image.gz --output boot-gz.img
            $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot-gz.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
            
            echo "Building boot.img (LZ4)"
            $MKBOOTIMG --header_version 4 --kernel Image.lz4 --output boot-lz4.img
            $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot-lz4.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
            
            cd ..
          fi

      - name: Create AnyKernel3 ZIPs
        run: |
          ANDROID_VER=$(echo "${{ inputs.android_version }}" | cut -d'-' -f1)
          KERNEL_VER="${{ steps.build-params.outputs.kernel_version }}"
          
          # Create LZ4 ZIP
          cd AnyKernel3-p8a
          cp ../bootimgs/Image.lz4 ./
          ZIP_NAME_LZ4="AK3-GKI-${ANDROID_VER}-${KERNEL_VER}.${{ env.KERNEL_SUBLEVEL }}-KSUN-LZ4-${{ env.TIMESTAMP }}.zip"
          zip -r "$ZIP_NAME_LZ4" ./*
          mv "$ZIP_NAME_LZ4" ../
          rm Image.lz4
          
          # Create GZ ZIP
          cp ../bootimgs/Image.gz ./
          ZIP_NAME_GZ="AK3-GKI-${ANDROID_VER}-${KERNEL_VER}.${{ env.KERNEL_SUBLEVEL }}-KSUN-GZ-${{ env.TIMESTAMP }}.zip"
          zip -r "$ZIP_NAME_GZ" ./*
          mv "$ZIP_NAME_GZ" ../
          rm Image.gz
          
          # Create RAW ZIP
          cp ../bootimgs/Image ./
          ZIP_NAME_RAW="AK3-GKI-${ANDROID_VER}-${KERNEL_VER}.${{ env.KERNEL_SUBLEVEL }}-KSUN-RAW-${{ env.TIMESTAMP }}.zip"
          zip -r "$ZIP_NAME_RAW" ./*
          mv "$ZIP_NAME_RAW" ../
          rm Image
          
          cd ..
          
          # Rename boot images
          mv bootimgs/boot.img "GKI-${ANDROID_VER}-${KERNEL_VER}.${{ env.KERNEL_SUBLEVEL }}-KSUN-RAW-${{ env.TIMESTAMP }}.img"
          mv bootimgs/boot-gz.img "GKI-${ANDROID_VER}-${KERNEL_VER}.${{ env.KERNEL_SUBLEVEL }}-KSUN-GZ-${{ env.TIMESTAMP }}.img"
          mv bootimgs/boot-lz4.img "GKI-${ANDROID_VER}-${KERNEL_VER}.${{ env.KERNEL_SUBLEVEL }}-KSUN-LZ4-${{ env.TIMESTAMP }}.img"

      - name: Get commit hashes for release
        if: ${{ inputs.make_release && inputs.release_type != 'Actions' }}
        run: |
          # Get SUSFS commit hashes
          cd susfs4ksu
          echo "SUSFS_COMMIT_HASH=$(git rev-parse HEAD)" >> $GITHUB_ENV
          echo "SUSFS_COMMIT_URL=https://gitlab.com/simonpunk/susfs4ksu/-/commit/$(git rev-parse HEAD)" >> $GITHUB_ENV
          cd ..
          
          # Get KernelSU-Next commit hash
          cd common/KernelSU-Next
          echo "NEXT_REF=$(git rev-parse HEAD | cut -c1-7)" >> $GITHUB_ENV
          echo "NEXT_URL=https://github.com/rifsxd/KernelSU-Next/commit/$(git rev-parse HEAD)" >> $GITHUB_ENV
          cd ../..

      # Always upload artifacts to be available for the release job
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: |
            *.zip
            *.img
          retention-days: 7

  trigger-release:
    needs: build-gki
    runs-on: ubuntu-latest
    if: ${{ inputs.make_release && inputs.release_type != 'Actions' }}
    env:
      REPO_OWNER: ${{ github.repository_owner }}
      REPO_NAME: ${{ github.event.repository.name }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Wait a bit to ensure artifact is available
      - name: Wait for artifact availability
        run: sleep 30

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-gki.outputs.artifact_name }}
          path: ./artifacts

      - name: List downloaded artifacts
        run: |
          echo "Downloaded artifacts:"
          find ./artifacts -type f -name "*.zip" -o -name "*.img" | sort
          ls -la ./artifacts/

      - name: Generate and Create New Tag
        run: |
          BASE_TAG="v1.5.8-gki-r0"
          
          # Check if any tags exist at all
          LATEST_TAG=$(gh api repos/$REPO_OWNER/$REPO_NAME/tags --jq '.[0].name' 2>/dev/null || echo "")
          
          if [[ -z "$LATEST_TAG" ]]; then
            # No tags exist, use base tag
            NEW_TAG="$BASE_TAG"
            echo "No existing tags found. Creating first tag: $NEW_TAG"
          elif [[ "$LATEST_TAG" == *"gki-r"* ]]; then
            # Extract the revision number and increment it
            REVISION=$(echo "$LATEST_TAG" | grep -o 'r[0-9]*' | sed 's/r//')
            NEW_REVISION=$((REVISION + 1))
            NEW_TAG=$(echo "$LATEST_TAG" | sed "s/r[0-9]*/r$NEW_REVISION/")
            echo "Found existing GKI tag: $LATEST_TAG"
            echo "Creating new tag: $NEW_TAG"
          else
            # Existing tags don't match our pattern, use base tag
            NEW_TAG="$BASE_TAG"
            echo "Existing tags don't match GKI pattern. Creating: $NEW_TAG"
          fi
          
          echo "NEW_TAG=${NEW_TAG}" >> $GITHUB_ENV
          
          # Check if tag already exists
          if git ls-remote --tags origin | grep -q "refs/tags/$NEW_TAG"; then
            echo "Tag $NEW_TAG already exists, skipping tag creation"
          else
            echo "Creating new tag: $NEW_TAG"
            git tag $NEW_TAG
