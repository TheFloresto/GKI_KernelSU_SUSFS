name: Сборка и релиз GKI ядер

permissions:
  contents: write
  actions: write

on:
  workflow_dispatch:
    inputs:
      make_release:
        description: 'Создать релиз?'
        required: true
        type: boolean
        default: false
      kernel_version_to_build:
        description: 'Выберите версию ядра для сборки'
        required: true
        type: choice
        options:
          - android12-5.10
          - android13-5.10
          - android13-5.15
          - android14-5.15
          - android14-6.1
          - android15-6.6
          - all
        default: all
      ksun_branch:
        description: 'Выберите ветку KernelSU Next'
        required: true
        type: choice
        options:
          - stable
          - next
        default: next
      lto_mode:
        description: 'Выберите режим LTO'
        required: true
        type: choice
        options:
          - thin
          - full
        default: thin
      android12_5_10_susfs_branch:
        description: 'Выберите ветку SusFS для android12-5.10'
        type: string
        default: 'gki-android12-5.10'
      android13_5_10_susfs_branch:
        description: 'Выберите ветку SusFS для android13-5.10'
        type: string
        default: 'gki-android13-5.10'
      android13_5_15_susfs_branch:
        description: 'Выберите ветку SusFS для android13-5.15'
        type: string
        default: 'gki-android13-5.15'
      android14_5_15_susfs_branch:
        description: 'Выберите ветку SusFS для android14-5.15'
        type: string
        default: 'gki-android14-5.15'
      android14_6_1_susfs_branch:
        description: 'Выберите ветку SusFS для android14-6.1'
        type: string
        default: 'gki-android14-6.1'
      android15_6_6_susfs_branch:
        description: 'Выберите ветку SusFS для android15-6.6'
        type: string
        default: 'gki-android15-6.6'
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    - cron: '0 2 * * 0'  # Еженедельная сборка по воскресеньям в 2:00 UTC

env:
  # Значения по умолчанию для автоматических запусков
  DEFAULT_KSUN_BRANCH: next
  DEFAULT_LTO_MODE: thin
  DEFAULT_MAKE_RELEASE: false
  DEFAULT_KERNEL_VERSION: all
  CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
  CCACHE_NOHASHDIR: "true"
  CCACHE_HARDLINK: "true"

jobs:
  build-gki-kernels:
    name: Сборка GKI ядер
    strategy:
      fail-fast: false
      matrix:
        include:
          - android_version: android12
            kernel_version: "5.10"
            branch: common-android12-5.10
            kernel_key: android12-5.10
          - android_version: android13
            kernel_version: "5.10"
            branch: common-android13-5.10
            kernel_key: android13-5.10
          - android_version: android13
            kernel_version: "5.15"
            branch: common-android13-5.15
            kernel_key: android13-5.15
          - android_version: android14
            kernel_version: "5.15"
            branch: common-android14-5.15
            kernel_key: android14-5.15
          - android_version: android14
            kernel_version: "6.1"
            branch: common-android14-6.1
            kernel_key: android14-6.1
          - android_version: android15
            kernel_version: "6.6"
            branch: common-android15-6.6
            kernel_key: android15-6.6
    runs-on: ubuntu-latest
    timeout-minutes: 120
    
    steps:
      - name: Проверка необходимости сборки этой версии ядра
        id: should-build
        run: |
          SELECTED_VERSION="${{ github.event.inputs.kernel_version_to_build || env.DEFAULT_KERNEL_VERSION }}"
          CURRENT_VERSION="${{ matrix.kernel_key }}"
          
          if [[ "$SELECTED_VERSION" == "all" || "$SELECTED_VERSION" == "$CURRENT_VERSION" ]]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "Сборка версии ядра: $CURRENT_VERSION"
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
            echo "Пропуск версии ядра: $CURRENT_VERSION (выбрано: $SELECTED_VERSION)"
          fi

      - name: Установка информации о сборке
        if: steps.should-build.outputs.should_build == 'true'
        id: build-info
        run: |
          KSUN_BRANCH="${{ github.event.inputs.ksun_branch || env.DEFAULT_KSUN_BRANCH }}"
          LTO_MODE="${{ github.event.inputs.lto_mode || env.DEFAULT_LTO_MODE }}"
          echo "Сборка GKI (${{ matrix.android_version }}, ${{ matrix.kernel_version }}, ${KSUN_BRANCH}, LTO: ${LTO_MODE})"
          echo "ksun_branch=${KSUN_BRANCH}" >> $GITHUB_OUTPUT
          echo "lto_mode=${LTO_MODE}" >> $GITHUB_OUTPUT

      - name: Максимизация дискового пространства
        if: steps.should-build.outputs.should_build == 'true'
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 4096
          swap-size-mb: 1024
          remove-dotnet: 'true'          # Освобождает ~2 ГБ
          remove-android: 'true'         # Освобождает ~9 ГБ
          remove-haskell: 'true'         # Освобождает ~5.2 ГБ
          remove-codeql: 'true'          # Освобождает ~5.4 ГБ
          remove-docker-images: 'true'   # Освобождает ~3.2 ГБ
          remove-large-packages: 'true'  # Освобождает ~3.1 ГБ
          remove-swapfile: 'true'        # Освобождает ~4 ГБ
          verbose: 'true'                # Включить подробное логирование

      - name: Установка переменной окружения CONFIG
        if: steps.should-build.outputs.should_build == 'true'
        run: |
          # Динамическое создание CONFIG на основе значений matrix
          CONFIG="${{ matrix.android_version }}-${{ matrix.kernel_version }}"
          
          # Установка CONFIG как переменной окружения для последующих шагов
          echo "CONFIG=$CONFIG" >> $GITHUB_ENV
          
          echo "CONFIG установлено в: $CONFIG"

      - name: Установка ccache
        if: steps.should-build.outputs.should_build == 'true'
        run: |
          sudo apt update
          sudo apt install -y ccache

      - name: Установка bazel
        if: steps.should-build.outputs.should_build == 'true'
        run: |
          BAZEL_VERSION="6.5.0"
          echo "Установка bazel версии $BAZEL_VERSION..."
          curl -LO "https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-linux-x86_64"
          chmod +x bazel-$BAZEL_VERSION-linux-x86_64
          sudo mv bazel-$BAZEL_VERSION-linux-x86_64 /usr/local/bin/bazel
          bazel version || { echo "Ошибка: не удалось установить bazel"; exit 1; }
          echo "BAZEL_PATH=/usr/local/bin/bazel" >> $GITHUB_ENV

      - name: Настройка ccache
        if: steps.should-build.outputs.should_build == 'true'
        run: |
          mkdir -p ~/.cache/bazel
          ccache --version
          ccache --max-size=2G
          ccache --set-config=compression=true
          echo "CCACHE_DIR=$HOME/.ccache" >> $GITHUB_ENV

      - name: Загрузка инструментария
        if: steps.should-build.outputs.should_build == 'true'
        run: |
          AOSP_MIRROR=https://android.googlesource.com
          BRANCH=main-kernel-build-2024
          git clone $AOSP_MIRROR/kernel/prebuilts/build-tools -b $BRANCH --depth 1 kernel-build-tools
          git clone $AOSP_MIRROR/platform/system/tools/mkbootimg -b $BRANCH --depth 1 mkbootimg
          # Проверка наличия bazel в инструментарии (на случай, если он там есть)
          if [ -f "./kernel-build-tools/tools/bazel" ]; then
            echo "bazel найден в kernel-build-tools/tools/bazel"
            chmod +x ./kernel-build-tools/tools/bazel
            echo "BAZEL_PATH=$GITHUB_WORKSPACE/kernel-build-tools/tools/bazel" >> $GITHUB_ENV
          else
            echo "bazel не найден в kernel-build-tools, используется /usr/local/bin/bazel"
          fi

      - name: Установка переменных окружения для инструментария
        if: steps.should-build.outputs.should_build == 'true'
        run: |
          echo "AVBTOOL=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/bin/avbtool" >> $GITHUB_ENV
          echo "MKBOOTIMG=$GITHUB_WORKSPACE/mkbootimg/mkbootimg.py" >> $GITHUB_ENV
          echo "UNPACK_BOOTIMG=$GITHUB_WORKSPACE/mkbootimg/unpack_bootimg.py" >> $GITHUB_ENV

      - name: Установка ключа подписи загрузки
        if: steps.should-build.outputs.should_build == 'true'
        env:
          BOOT_SIGN_KEY: ${{ secrets.BOOT_SIGN_KEY }}
        run: |
          if [ ! -z "$BOOT_SIGN_KEY" ]; then
            echo "$BOOT_SIGN_KEY" > ./kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem
            echo "BOOT_SIGN_KEY_PATH=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem" >> $GITHUB_ENV
          else
            echo "BOOT_SIGN_KEY не установлен. Используется ключ AOSP..."
            echo "BOOT_SIGN_KEY_PATH=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem" >> $GITHUB_ENV
          fi

      - name: Установка Repo
        if: steps.should-build.outputs.should_build == 'true'
        run: |
          mkdir -p ./git-repo
          echo "Загрузка инструмента repo..."
          curl https://storage.googleapis.com/git-repo-downloads/repo > ./git-repo/repo
          chmod a+rx ./git-repo/repo
          echo "REPO=$GITHUB_WORKSPACE/./git-repo/repo" >> $GITHUB_ENV

      - name: Клонирование зависимостей
        if: steps.should-build.outputs.should_build == 'true'
        run: |
          echo "Клонирование SuSFS, патчей ядра и AnyKernel3..."
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b ${{ github.event.inputs[format('{0}_susfs_branch', matrix.kernel_key)] || format('gki-{0}', matrix.kernel_key) }}
          git clone https://github.com/infectedmushi/kernel_patches -b main
          git clone https://github.com/deepongi-labs/AnyKernel3-p8a -b gki-2.0

      - name: Проверка дискового пространства перед синхронизацией
        if: steps.should-build.outputs.should_build == 'true'
        run: |
          echo "Дисковое пространство перед синхронизацией исходного кода ядра:"
          df -h

      - name: Инициализация и синхронизация исходного кода ядра
        if: steps.should-build.outputs.should_build == 'true'
        run: |
          echo "Создание папки для конфигурации: $CONFIG..."
          mkdir -p "$CONFIG"
          cd "$CONFIG"
          echo "Инициализация и синхронизация исходного кода ядра..."
          $REPO init --depth=1 --u https://android.googlesource.com/kernel/manifest -b ${{ matrix.branch }} --repo-rev=v2.16
          REMOTE_BRANCH=$(git ls-remote https://android.googlesource.com/kernel/common ${{ matrix.branch }})
          DEFAULT_MANIFEST_PATH=.repo/manifests/default.xml
          if grep -q deprecated <<< $REMOTE_BRANCH; then
            echo "Обнаружена устаревшая ветка: ${{ matrix.branch }}"
            sed -i "s/\"${{ matrix.branch }}\"/\"deprecated\/${{ matrix.branch }}\"/g" $DEFAULT_MANIFEST_PATH
          fi
          $REPO --version
          $REPO --trace sync -c -j$(nproc --all) --no-tags --fail-fast

      - name: Настройка KernelSU Next
        if: steps.should-build.outputs.should_build == 'true'
        run: |
          cd "$CONFIG/common"
          echo "Добавление KSU-Next..."
          KSUN_BRANCH="${{ steps.build-info.outputs.ksun_branch }}"
          curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/${KSUN_BRANCH}/kernel/setup.sh" | bash -s ${KSUN_BRANCH}

      - name: Применение патчей SuSFS
        if: steps.should-build.outputs.should_build == 'true'
        run: |
          cd "$CONFIG/common"
          echo "Применение патчей SUSFS..."
          
          # Проверка наличия файла патча для данной версии ядра
          PATCH_FILE="../susfs4ksu/kernel_patches/50_add_susfs_in_${{ github.event.inputs[format('{0}_susfs_branch', matrix.kernel_key)] || format('gki-{0}', matrix.kernel_key) }}.patch"
          if [ -f "$PATCH_FILE" ]; then
            cp -v "$PATCH_FILE" ./
            cp -v ../susfs4ksu/kernel_patches/fs/* ./fs/ 2>/dev/null || true
            cp -v ../susfs4ksu/kernel_patches/include/linux/* ./include/linux/ 2>/dev/null || true
            patch -p1 --forward --fuzz=3 < "50_add_susfs_in_${{ github.event.inputs[format('{0}_susfs_branch', matrix.kernel_key)] || format('gki-{0}', matrix.kernel_key) }}.patch"
          else
            echo "Предупреждение: патч SuSFS не найден для этой версии ядра"
          fi

      - name: Применение патчей KernelSU Next
        if: steps.should-build.outputs.should_build == 'true'
        run: |
          cd "$CONFIG/common/KernelSU-Next"
          KSUN_BRANCH="${{ steps.build-info.outputs.ksun_branch }}"
          if [ -f "../../kernel_patches/${KSUN_BRANCH}/0001-kernel-implement-susfs-v1.5.8-KernelSU-Next-v1.0.8.patch" ]; then
            cp -v ../../kernel_patches/${KSUN_BRANCH}/0001-kernel-implement-susfs-v1.5.8-KernelSU-Next-v1.0.8.patch ./
            patch -p1 --fuzz=3 < 0001-kernel-implement-susfs-v1.5.8-KernelSU-Next-v1.0.8.patch
          fi
          
          # Применение дополнительных патчей KSU
          curl -Ls "https://github.com/cvnertnc/KernelSU-Next/commit/6a7707dc38fc9217dbdc79fe471220383dec2369.patch" | patch -p1 --fuzz=3 || true

      - name: Применение дополнительных патчей
        if: steps.should-build.outputs.should_build == 'true'
        run: |
          cd "$CONFIG/common"
          echo "Применение патчей hide stuff и manual hooks..."
          if [ -f "../kernel_patches/69_hide_stuff.patch" ]; then
            cp -v ../kernel_patches/69_hide_stuff.patch ./
            patch -p1 -F 3 < 69_hide_stuff.patch || true
          fi
          
          echo "Удаление экспортов..."
          sed -i '/^[[:space:]]*"protected_exports_list"[[:space:]]*:[[:space:]]*"android\/abi_gki_protected_exports_aarch64",$/d' ./BUILD.bazel 2>/dev/null || true
          rm -f android/abi_gki_protected_exports_* 2>/dev/null || true

      - name: Конфигурация ядра
        if: steps.should-build.outputs.should_build == 'true'
        run: |
          cd "$CONFIG/common"
          echo "Добавление конфигураций ядра..."
          
          # Конфигурации KernelSU
          cat >> ./arch/arm64/configs/gki_defconfig << EOF
          CONFIG_KSU=y
          CONFIG_KSU_KPROBES_HOOK=n
          EOF
          
          # Конфигурации SuSFS
          cat >> ./arch/arm64/configs/gki_defconfig << EOF
          CONFIG_KSU_SUSFS=y
          CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y
          CONFIG_KSU_SUSFS_SUS_PATH=y
          CONFIG_KSU_SUSFS_SUS_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SUS_KSTAT=y
          CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n
          CONFIG_KSU_SUSFS_TRY_UMOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SPOOF_UNAME=y
          CONFIG_KSU_SUSFS_ENABLE_LOG=y
          CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y
          CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y
          CONFIG_KSU_SUSFS_OPEN_REDIRECT=y
          CONFIG_KSU_SUSFS_SUS_SU=n
          EOF
          
          # Дополнительные конфигурации
          cat >> ./arch/arm64/configs/gki_defconfig << EOF
          CONFIG_TMPFS_XATTR=y
          CONFIG_TMPFS_POSIX_ACL=y
          CONFIG_IP_NF_TARGET_TTL=y
          CONFIG_IP6_NF_TARGET_HL=y
          CONFIG_IP6_NF_MATCH_HL=y
          CONFIG_TCP_CONG_ADVANCED=y
          CONFIG_TCP_CONG_BBR=y
          CONFIG_NET_SCH_FQ=y
          CONFIG_TCP_CONG_BIC=n
          CONFIG_TCP_CONG_WESTWOOD=n
          CONFIG_TCP_CONG_HTCP=n
          EOF

      - name: Изменение имени ядра
        if: steps.should-build.outputs.should_build == 'true'
        run: |
          cd "$CONFIG/common"
          # Изменение UTS_VERSION
          perl -pi -e 's{UTS_VERSION="\$\(echo \$UTS_VERSION \$CONFIG_FLAGS \$TIMESTAMP \| cut -b -\$UTS_LEN\)"}{UTS_VERSION="#1 SMP PREEMPT Sun Apr 20 04:20:00 UTC 2025"}' ./scripts/mkcompile_h
          
          sed -i '$s|echo "\$res"|echo "\$res-TheFloresto+"|' ./scripts/setlocalversion
          sed -i "/stable_scmversion_cmd/s/-maybe-dirty//g" ../build/kernel/kleaf/impl/stamp.bzl 2>/dev/null || true
          sed -i '2s/check_defconfig//' ./build.config.gki 2>/dev/null || true
          sed -i "s|build-timestamp = \$(or \$(KBUILD_BUILD_TIMESTAMP), \$(build-timestamp-auto))|build-timestamp = \"Sun Apr 20 04:20:00 UTC 2025\"|" ./init/Makefile

      - name: Сборка ядра
        if: steps.should-build.outputs.should_build == 'true'
        run: |
          set -e
          set -x
          cd "$CONFIG/common"
          export USE_CCACHE=1
          export CCACHE_DIR=$HOME/.ccache
          
          LTO_MODE="${{ steps.build-info.outputs.lto_mode }}"
          echo "Сборка ядра с режимом LTO: $LTO_MODE"
          
          if [ -f "../build/build.sh" ]; then
            echo "Сборка с использованием build.sh..."
            LTO=thin BUILD_CONFIG=common/build.config.gki.aarch64 build/build.sh CC="/usr/bin/ccache clang" || exit 1
          else
            echo "Сборка с использованием bazel..."
            ${BAZEL_PATH} build --disk_cache=/home/runner/.cache/bazel --config=fast --lto=$LTO_MODE //common:kernel_aarch64_dist || exit 1
          fi
          ccache --show-stats

      - name: Создание папки bootimgs и копирование образов для Android 12/13
        if: ${{ steps.should-build.outputs.should_build == 'true' && (matrix.android_version == 'android12' || matrix.android_version == 'android13') }}
        run: |
          mkdir -p bootimgs
          echo "Создание папки bootimgs и копирование образов..."
          cp -v ./$CONFIG/out/${{ matrix.android_version }}-${{ matrix.kernel_version }}/dist/Image ./bootimgs
          cp -v ./$CONFIG/out/${{ matrix.android_version }}-${{ matrix.kernel_version }}/dist/Image.lz4 ./bootimgs
          cp -v ./$CONFIG/out/${{ matrix.android_version }}-${{ matrix.kernel_version }}/dist/Image ./
          cp -v ./$CONFIG/out/${{ matrix.android_version }}-${{ matrix.kernel_version }}/dist/Image.lz4 ./
          
          # Создание gzip-образа файла Image
          gzip -n -k -f -9 ./Image > ./Image.gz

      - name: Создание папки bootimgs и копирование образов для Android 14/15
        if: ${{ steps.should-build.outputs.should_build == 'true' && (matrix.android_version == 'android14' || matrix.android_version == 'android15') }}
        run: |
          mkdir -p bootimgs
