name: Build and Release GKI Kernels

permissions:
  contents: write
  actions: write

on:
  workflow_dispatch:
    inputs:
      make_release:
        description: 'Do you want to create a release?'
        required: true
        type: boolean
        default: false
      ksun_branch:
        description: "Choose KernelSU Next Branch"
        required: true
        type: choice
        options:
          - stable
          - next
        default: next
      android_version:
        description: "Choose Android Version"
        required: true
        type: choice
        options:
          - android12-5.10
          - android13-5.10
          - android13-5.15
          - android14-5.15
          - android14-6.1
          - android15-6.6
        default: android14-6.1
      susfs_branch:
        description: "Choose SusFS Branch"
        type: string
        default: "gki-android14-6.1"
      release_type: # Добавлено из 2.yml
        description: "Choose Release Type"
        required: true
        type: choice
        options:
          - Actions
          - Pre-Release
          - Release
        default: Pre-Release

jobs:
  build-gki:
    name: Build GKI (${{ inputs.android_version }}, KSU-${{ inputs.ksun_branch }})
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Build Environment
        run: |
          sudo apt-get update
          sudo apt-get install -y git curl wget zip unzip build-essential bc bison flex libssl-dev libncurses5-dev libelf-dev
          
      - name: Setup Repo Tool
        run: |
          mkdir -p ~/.bin
          PATH="${HOME}/.bin:${PATH}"
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/.bin/repo
          chmod a+rx ~/.bin/repo
          echo "${HOME}/.bin" >> $GITHUB_PATH

      - name: Setup Git Config
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

      - name: Determine Build Parameters
        id: build-params
        run: |
          case "${{ inputs.android_version }}" in
            "android12-5.10")
              KERNEL_VERSION="5.10"
              MANIFEST_BRANCH="common-android12-5.10"
              ;;
            "android13-5.10")
              KERNEL_VERSION="5.10"
              MANIFEST_BRANCH="common-android13-5.10"
              ;;
            "android13-5.15")
              KERNEL_VERSION="5.15"
              MANIFEST_BRANCH="common-android13-5.15"
              ;;
            "android14-5.15")
              KERNEL_VERSION="5.15"
              MANIFEST_BRANCH="common-android14-5.15"
              ;;
            "android14-6.1")
              KERNEL_VERSION="6.1"
              MANIFEST_BRANCH="common-android14-6.1-2025-06"
              ;;
            "android15-6.6")
              KERNEL_VERSION="6.6"
              MANIFEST_BRANCH="common-android15-6.6"
              ;;
            *)
              echo "Unsupported Android version: ${{ inputs.android_version }}"
              exit 1
              ;;
          esac
          
          echo "kernel_version=$KERNEL_VERSION" >> $GITHUB_OUTPUT
          echo "manifest_branch=$MANIFEST_BRANCH" >> $GITHUB_OUTPUT
          
          # Добавляем переменные для формирования NEW_TAG, аналогично 2.yml
          ANDROID_VER_SHORT=$(echo "${{ inputs.android_version }}" | cut -d'-' -f1)
          KERNEL_VER_SHORT=$(echo "${{ steps.build-params.outputs.kernel_version }}" | cut -d'.' -f1) # Берем только мажорную версию
          KERNEL_SUB_LEVEL_PLACEHOLDER="0" # Заглушка, так как в 1.yml нет sub_level
          echo "NEW_TAG=A${ANDROID_VER_SHORT}-${KERNEL_VER_SHORT}.${KERNEL_SUB_LEVEL_PLACEHOLDER}-KSUN-$(date +%Y%m%d-%H%M)" >> $GITHUB_ENV
          echo "TIMESTAMP=$(date +%Y%m%d-%H%M)" >> $GITHUB_ENV


      - name: Clone Dependencies
        run: |
          echo "Cloning SuSFS, patches, and AnyKernel3..."
          git clone https://gitlab.com/pershoot/susfs4ksu -b ${{ inputs.susfs_branch }}
          git clone https://github.com/infectedmushi/kernel_patches -b main
          git clone https://github.com/deepongi-labs/AnyKernel3-p8a -b gki-2.0

      - name: Initialize and Sync Kernel Sources
        run: |
          echo "Initializing repo..."
          repo init --depth=1 --u https://android.googlesource.com/kernel/manifest -b ${{ steps.build-params.outputs.manifest_branch }}
          echo "Syncing sources..."
          repo sync -c -j$(nproc) --no-tags --fail-fast

      - name: Setup KernelSU Next
        run: |
          cd common
          echo "Adding KSU-Next..."
          curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/${{ inputs.ksun_branch }}/kernel/setup.sh" | bash -s ${{ inputs.ksun_branch }}

      - name: Apply SusFS Patches
        run: |
          cd common
          echo "Applying SUSFS patches..."
          cp -v ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ inputs.android_version }}.patch ./
          cp -rv ../susfs4ksu/kernel_patches/fs/* ./fs/
          cp -rv ../susfs4ksu/kernel_patches/include/linux/* ./include/linux/
          
          patch -p1 --forward --fuzz=3 < 50_add_susfs_in_gki-${{ inputs.android_version }}.patch
          
          cd KernelSU-Next
          cp -v ../../kernel_patches/next/0001-kernel-implement-susfs-v1.5.8-KernelSU-Next-v1.0.8.patch ./
          patch -p1 --fuzz=3 < 0001-kernel-implement-susfs-v1.5.8-KernelSU-Next-v1.0.8.patch
          cd ..

      - name: Apply Additional Patches
        run: |
          cd common
          echo "Applying additional patches..."
          cp -v ../kernel_patches/69_hide_stuff.patch ./
          cp -v ../kernel_patches/next/scope_min_manual_hooks_v1.4.patch ./
          patch -p1 -F 3 < 69_hide_stuff.patch
          patch -p1 -F 3 < scope_min_manual_hooks_v1.4.patch
          
          echo "Removing exports..."
          sed -i '/^[[:space:]]*"protected_exports_list"[[:space:]]*:[[:space:]]*"android\/abi_gki_protected_exports_aarch64",$/d' ./BUILD.bazel
          rm -f android/abi_gki_protected_exports_*

      - name: Configure Kernel
        run: |
          cd common
          echo "Adding KSU configuration to gki_defconfig..."
          cat >> arch/arm64/configs/gki_defconfig << EOF
          CONFIG_KSU=y
          CONFIG_KSU_KPROBES_HOOK=n
          CONFIG_KSU_SUSFS=y
          CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y
          CONFIG_KSU_SUSFS_SUS_PATH=y
          CONFIG_KSU_SUSFS_SUS_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SUS_KSTAT=y
          CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n
          CONFIG_KSU_SUSFS_TRY_UMOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SPOOF_UNAME=y
          CONFIG_KSU_SUSFS_ENABLE_LOG=y
          CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y
          CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y
          CONFIG_KSU_SUSFS_OPEN_REDIRECT=y
          CONFIG_KSU_SUSFS_SUS_SU=n
          CONFIG_TMPFS_XATTR=y
          CONFIG_TMPFS_POSIX_ACL=y
          CONFIG_IP_NF_TARGET_TTL=y
          CONFIG_IP6_NF_TARGET_HL=y
          CONFIG_IP6_NF_MATCH_HL=y
          CONFIG_TCP_CONG_ADVANCED=y
          CONFIG_TCP_CONG_BBR=y
          CONFIG_NET_SCH_FQ=y
          CONFIG_TCP_CONG_BIC=n
          CONFIG_TCP_CONG_WESTWOOD=n
          CONFIG_TCP_CONG_HTCP=n
          EOF

      - name: Build Kernel
        run: |
          cd common
          echo "Building kernel..."
          
          # Modify version string
          sed -i '$s|echo "\$res"|echo "\$res-TheFloresto+"|' scripts/setlocalversion
          sed -i "/stable_scmversion_cmd/s/-maybe-dirty//g" ../build/kernel/kleaf/impl/stamp.bzl
          sed -i '2s/check_defconfig//' build.config.gki
          sed -i "s|build-timestamp = \$(or \$(KBUILD_BUILD_TIMESTAMP), \$(build-timestamp-auto))|build-timestamp = \"$(date -u +"%a %b %d %T UTC %Y")\"|" init/Makefile
          
          cd ..
          tools/bazel build --disk_cache=~/.cache/bazel-disk --experimental_multi_threaded_digest --config=fast --lto=thin //common:kernel_aarch64_dist

      - name: Prepare Artifacts
        run: |
          mkdir -p bootimgs
          cp -v bazel-bin/common/kernel_aarch64/Image.lz4 bootimgs/
          cp -v bazel-bin/common/kernel_aarch64/Image.gz bootimgs/
          cp -v bazel-bin/common/kernel_aarch64/Image bootimgs/
          cp -v bazel-bin/common/kernel_aarch64_gki_artifacts/boot.img bootimgs/
          cp -v bazel-bin/common/kernel_aarch64_gki_artifacts/boot-gz.img bootimgs/
          cp -v bazel-bin/common/kernel_aarch64_gki_artifacts/boot-lz4.img bootimgs/

      - name: Create AnyKernel3 ZIPs
        run: |
          # Используем TIMESTAMP из определенного ранее в job
          ANDROID_VER=$(echo "${{ inputs.android_version }}" | cut -d'-' -f1)
          KERNEL_VER="${{ steps.build-params.outputs.kernel_version }}"
          
          # Create LZ4 ZIP
          cd AnyKernel3-p8a
          cp ../bootimgs/Image.lz4 ./
          ZIP_NAME_LZ4="AK3-GKI-${ANDROID_VER}-${KERNEL_VER}-KSUN-LZ4-${{ env.TIMESTAMP }}.zip"
          zip -r "$ZIP_NAME_LZ4" ./*
          mv "$ZIP_NAME_LZ4" ../
          rm Image.lz4
          
          # Create GZ ZIP
          cp ../bootimgs/Image.gz ./
          ZIP_NAME_GZ="AK3-GKI-${ANDROID_VER}-${KERNEL_VER}-KSUN-GZ-${{ env.TIMESTAMP }}.zip"
          zip -r "$ZIP_NAME_GZ" ./*
          mv "$ZIP_NAME_GZ" ../
          rm Image.gz
          
          # Create RAW ZIP
          cp ../bootimgs/Image ./
          ZIP_NAME_RAW="AK3-GKI-${ANDROID_VER}-${KERNEL_VER}-KSUN-RAW-${{ env.TIMESTAMP }}.zip"
          zip -r "$ZIP_NAME_RAW" ./*
          mv "$ZIP_NAME_RAW" ../
          rm Image
          
          cd ..
          
          # Rename boot images
          mv bootimgs/boot.img "GKI-${ANDROID_VER}-${KERNEL_VER}-KSUN-RAW-${{ env.TIMESTAMP }}.img"
          mv bootimgs/boot-gz.img "GKI-${ANDROID_VER}-${KERNEL_VER}-KSUN-GZ-${{ env.TIMESTAMP }}.img"
          mv bootimgs/boot-lz4.img "GKI-${ANDROID_VER}-${KERNEL_VER}-KSUN-LZ4-${{ env.TIMESTAMP }}.img"

      - name: Upload Artifacts (Actions only) # Изменено для соответствия логике 2.yml
        if: ${{ inputs.release_type == 'Actions' }}
        uses: actions/upload-artifact@v4
        with:
          name: kernel-gki-${{ inputs.android_version }}-${{ inputs.ksun_branch }}-${{ env.TIMESTAMP }}
          path: |
            *.zip
            *.img
          retention-days: 7

  trigger-release:
    needs: build-gki
    runs-on: ubuntu-latest
    if: ${{ inputs.make_release && inputs.release_type != 'Actions' }} # Запускать только если make_release true и не 'Actions'
    env:
      REPO_OWNER: ${{ github.repository_owner }}
      REPO_NAME: ${{ github.event.repository.name }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get commit hashes for release
        run: |
          # Клонируем репозитории для получения хешей коммитов
          git clone https://gitlab.com/pershoot/susfs4ksu -b ${{ inputs.susfs_branch }}
          git clone https://github.com/infectedmushi/kernel_patches -b main # Чтобы получить KernelSU-Next
          git clone https://android.googlesource.com/kernel/manifest -b ${{ steps.build-params.outputs.manifest_branch }} common # Для KSU-Next
          cd common
          curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/${{ inputs.ksun_branch }}/kernel/setup.sh" | bash -s ${{ inputs.ksun_branch }}
          cd ..

          # Get SUSFS commit hashes
          cd susfs4ksu
          echo "SUSFS_COMMIT_HASH=$(git rev-parse HEAD)" >> $GITHUB_ENV
          echo "SUSFS_COMMIT_URL=https://gitlab.com/pershoot/susfs4ksu/-/commit/$(git rev-parse HEAD)" >> $GITHUB_ENV
          cd ..
          
          # Get KernelSU-Next commit hash
          cd common/KernelSU-Next
          echo "NEXT_REF=$(git rev-parse HEAD | cut -c1-7)" >> $GITHUB_ENV
          echo "NEXT_URL=https://github.com/rifsxd/KernelSU-Next/commit/$(git rev-parse HEAD)" >> $GITHUB_ENV
          cd ../..

      - name: Generate and Create New Tag
        run: |
          # Используем NEW_TAG, сформированный в job build-gki
          echo "New tag: ${{ env.NEW_TAG }}"
          git tag ${{ env.NEW_TAG }}
          git push origin ${{ env.NEW_TAG }}
          
      - name: Set release body # Добавлено из 2.yml
        run: |
          ANDROID_VER_SHORT=$(echo "${{ inputs.android_version }}" | cut -d'-' -f1)
          KERNEL_VER_FULL="${{ steps.build-params.outputs.kernel_version }}" # Полная версия ядра из build-params
          KERNEL_SUB_LEVEL_PLACEHOLDER="0" # Заглушка, так как в 1.yml нет sub_level
          
          cat << 'EOF' > release_body.md
          ## GKI Kernels With KernelSU Next & SUSFS v1.5.8
          
          **Branch type for KSU:** KernelSU-Next
          **Current Kernel Tag:** ${{ env.NEW_TAG }}
          
          ### Features:
          - KernelSU-Next
          - SUSFS v1.5.8
          - Wireguard Support
          - Maphide LineageOS Detections
          - Futile Maphide for jit-zygote-cache Detections  
          - Magic Mount Support
          - CMD_SUSFS_HIDE_SUS_MNTS_FOR_ALL_PROCS Support for all kernels
          - Manual Hooks [scope_min_manual_hooks_v1.4]
          - BBR v1 Support
          
          ### Notes:
          - KernelSU-Next, SUS SU Mode 2 will show as disabled or not compatible due to non-kprobe hooks and is not needed anymore!
          - Official Kernel Flasher is broken with latest susfs, try:
            - https://github.com/fatalcoder524/KernelFlasher/
            - https://github.com/libxzr/HorizonKernelFlasher!
          
          ### Module:
          - SUSFS Module: https://github.com/sidex15/ksu_module_susfs
          
          ### Managers:
          - KernelSU: https://github.com/tiann/KernelSU / https://t.me/KernelSU_group
          - 5ec1cff's KernelSU: https://github.com/5ec1cff/KernelSU / https://t.me/mksu_ci
          - KernelSU-Next: https://github.com/rifsxd/KernelSU-Next / https://t.me/ksunext_group
          - rsuntk: https://github.com/rsuntk/KernelSU / https://t.me/rsukrnlsu
          - backslashxx: https://github.com/backslashxx/KernelSU
          
          ### Commit Hashes (at the time of release):
          - KernelSU Next: [${{ env.NEXT_REF }}](${{ env.NEXT_URL }})
          - SUSFS4KSU ${{ inputs.susfs_branch }}: [${{ env.SUSFS_COMMIT_HASH }}](${{ env.SUSFS_COMMIT_URL }})
          
          ### Build Info:
          - Android Version: ${{ ANDROID_VER_SHORT }}
          - Kernel Version: ${{ KERNEL_VER_FULL }}.${{ KERNEL_SUB_LEVEL_PLACEHOLDER }}
          - Build Date: $(date -u +"%Y-%m-%d %H:%M UTC")
          EOF

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./downloaded-artifacts
          name: kernel-gki-${{ inputs.android_version }}-${{ inputs.ksun_branch }}-${{ env.TIMESTAMP }} # Используем имя артефакта, соответствующее имени, которое было использовано при загрузке

      - name: Create GitHub Release # Изменено для соответствия логике 2.yml
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.NEW_TAG }}
          name: ${{ env.NEW_TAG }}
          body_path: release_body.md
          prerelease: ${{ inputs.release_type == 'Pre-Release' }}
          files: |
            ./downloaded-artifacts/**/*.zip
            ./downloaded-artifacts/**/*.img
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Display Files Uploaded
        run: |
          echo "GitHub release created with the following files:"
          find ./downloaded-artifacts -type f \( -name "*.zip" -o -name "*.img" \) -exec basename {} \;
