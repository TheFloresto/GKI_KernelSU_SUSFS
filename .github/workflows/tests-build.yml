name: Build and Release GKI Kernels

permissions:
  contents: write
  actions: write

on:
  workflow_dispatch:
    inputs:
      make_release:
        description: 'Do you want to create a release?'
        required: true
        type: boolean
        default: false
      kernel_version_to_build:
        description: "Choose which kernel version to build"
        required: true
        type: choice
        options:
          - android12-5.10
          - android13-5.10
          - android13-5.15
          - android14-5.15
          - android14-6.1
          - android15-6.6
          - all
        default: all
      ksun_branch:
        description: "Choose KernelSU Next Branch"
        required: true
        type: choice
        options:
          - stable
          - next
        default: next
      lto_mode:
        description: "Choose LTO Mode"
        required: true
        type: choice
        options:
          - thin
          - full
        default: thin
      android12_5_10_susfs_branch:
        description: "Choose SusFS Branch for android12-5.10"
        type: string
        default: "gki-android12-5.10"
      android13_5_10_susfs_branch:
        description: "Choose SusFS Branch for android13-5.10"
        type: string
        default: "gki-android13-5.10"
      android13_5_15_susfs_branch:
        description: "Choose SusFS Branch for android13-5.15"
        type: string
        default: "gki-android13-5.15"
      android14_5_15_susfs_branch:
        description: "Choose SusFS Branch for android14-5.15"
        type: string
        default: "gki-android14-5.15"
      android14_6_1_susfs_branch:
        description: "Choose SusFS Branch for android14-6.1"
        type: string
        default: "gki-android14-6.1"
      android15_6_6_susfs_branch:
        description: "Choose SusFS Branch for android15-6.6"
        type: string
        default: "gki-android15-6.6"
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    - cron: '0 2 * * 0'  # Weekly builds on Sunday at 2 AM UTC

env:
  # Default values for automatic triggers
  DEFAULT_KSUN_BRANCH: next
  DEFAULT_LTO_MODE: thin
  DEFAULT_MAKE_RELEASE: false
  DEFAULT_KERNEL_VERSION: all

jobs:
  build-gki-kernels:
    name: Build GKI Kernels
    strategy:
      fail-fast: false
      matrix:
        include:
          - android_version: android12
            kernel_version: "5.10"
            branch: common-android12-5.10
            kernel_key: android12-5.10
          - android_version: android13
            kernel_version: "5.10"
            branch: common-android13-5.10
            kernel_key: android13-5.10
          - android_version: android13
            kernel_version: "5.15"
            branch: common-android13-5.15
            kernel_key: android13-5.15
          - android_version: android14
            kernel_version: "5.15"
            branch: common-android14-5.15
            kernel_key: android14-5.15
          - android_version: android14
            kernel_version: "6.1"
            branch: common-android14-6.1
            kernel_key: android14-6.1
          - android_version: android15
            kernel_version: "6.6"
            branch: common-android15-6.6
            kernel_key: android15-6.6
    runs-on: ubuntu-latest
    
    steps:
      - name: Check if this kernel version should be built
        id: should-build
        run: |
          SELECTED_VERSION="${{ github.event.inputs.kernel_version_to_build || env.DEFAULT_KERNEL_VERSION }}"
          CURRENT_VERSION="${{ matrix.kernel_key }}"
          
          if [[ "$SELECTED_VERSION" == "all" || "$SELECTED_VERSION" == "$CURRENT_VERSION" ]]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "Building kernel version: $CURRENT_VERSION"
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
            echo "Skipping kernel version: $CURRENT_VERSION (selected: $SELECTED_VERSION)"
          fi

      - name: Set build info
        if: steps.should-build.outputs.should_build == 'true'
        id: build-info
        run: |
          KSUN_BRANCH="${{ github.event.inputs.ksun_branch || env.DEFAULT_KSUN_BRANCH }}"
          LTO_MODE="${{ github.event.inputs.lto_mode || env.DEFAULT_LTO_MODE }}"
          echo "Building GKI (${{ matrix.android_version }}, ${{ matrix.kernel_version }}, ${KSUN_BRANCH}, LTO: ${LTO_MODE})"
          echo "ksun_branch=${KSUN_BRANCH}" >> $GITHUB_OUTPUT
          echo "lto_mode=${LTO_MODE}" >> $GITHUB_OUTPUT

      - name: Maximize build space
        if: steps.should-build.outputs.should_build == 'true'
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 4096
          swap-size-mb: 1024
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: Select Appropriate SusFS Branch
        if: steps.should-build.outputs.should_build == 'true'
        id: get-susfs-branch
        run: |
          KERNEL_STRING="${{ matrix.android_version }}-${{ matrix.kernel_version }}"
          
          case "$KERNEL_STRING" in
            "android12-5.10")
              SUSFS_BRANCH="${{ github.event.inputs.android12_5_10_susfs_branch || 'gki-android12-5.10' }}"
              ;;
            "android13-5.10")
              SUSFS_BRANCH="${{ github.event.inputs.android13_5_10_susfs_branch || 'gki-android13-5.10' }}"
              ;;
            "android13-5.15")
              SUSFS_BRANCH="${{ github.event.inputs.android13_5_15_susfs_branch || 'gki-android13-5.15' }}"
              ;;
            "android14-5.15")
              SUSFS_BRANCH="${{ github.event.inputs.android14_5_15_susfs_branch || 'gki-android14-5.15' }}"
              ;;
            "android14-6.1")
              SUSFS_BRANCH="${{ github.event.inputs.android14_6_1_susfs_branch || 'gki-android14-6.1' }}"
              ;;
            "android15-6.6")
              SUSFS_BRANCH="${{ github.event.inputs.android15_6_6_susfs_branch || 'gki-android15-6.6' }}"
              ;;
            *)
              echo "Invalid kernel version or unsupported: $KERNEL_STRING"
              exit 1
              ;;
          esac
          
          if [[ -z "$SUSFS_BRANCH" ]]; then
            SUSFS_BRANCH="gki-${{ matrix.android_version }}-${{ matrix.kernel_version }}"
          fi
          
          echo "susfs_branch=$SUSFS_BRANCH" >> $GITHUB_OUTPUT

      - name: Setup Build Environment
        if: steps.should-build.outputs.should_build == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential bc bison flex libssl-dev libncurses5-dev \
            libncursesw5-dev zip unzip git curl wget python3 python3-pip \
            rsync ccache repo

      - name: Setup ccache
        if: steps.should-build.outputs.should_build == 'true'
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: gki-${{ matrix.android_version }}-${{ matrix.kernel_version }}
          max-size: 2G

      - name: Checkout Code
        if: steps.should-build.outputs.should_build == 'true'
        uses: actions/checkout@v4

      - name: Remove old files and folders
        if: steps.should-build.outputs.should_build == 'true'
        run: |
          rm -rf susfs4ksu kernel_patches AnyKernel3-p8a common bootimgs

      - name: Clone dependencies
        if: steps.should-build.outputs.should_build == 'true'
        run: |
          echo "Cloning SuSFS, kernel patches, and AnyKernel3..."
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b ${{ steps.get-susfs-branch.outputs.susfs_branch }}
          git clone https://github.com/infectedmushi/kernel_patches -b main
          git clone https://github.com/deepongi-labs/AnyKernel3-p8a -b gki-2.0

      - name: Initialize and sync kernel source
        if: steps.should-build.outputs.should_build == 'true'
        run: |
          echo "Repo init and sync for ${{ matrix.branch }}..."
          repo init --depth=1 --u https://android.googlesource.com/kernel/manifest -b ${{ matrix.branch }}
          repo sync -c -j$(nproc --all) --no-tags --fail-fast

      - name: Setup KernelSU Next
        if: steps.should-build.outputs.should_build == 'true'
        run: |
          cd common
          echo "Adding KSU-Next..."
          KSUN_BRANCH="${{ steps.build-info.outputs.ksun_branch }}"
          curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/${KSUN_BRANCH}/kernel/setup.sh" | bash -s ${KSUN_BRANCH}

      - name: Apply SuSFS patches
        if: steps.should-build.outputs.should_build == 'true'
        run: |
          cd common
          echo "Applying SUSFS patches..."
          
          # Check if the patch file exists for this kernel version
          PATCH_FILE="../susfs4ksu/kernel_patches/50_add_susfs_in_${{ steps.get-susfs-branch.outputs.susfs_branch }}.patch"
          if [ -f "$PATCH_FILE" ]; then
            cp -v "$PATCH_FILE" ./
            cp -v ../susfs4ksu/kernel_patches/fs/* ./fs/ 2>/dev/null || true
            cp -v ../susfs4ksu/kernel_patches/include/linux/* ./include/linux/ 2>/dev/null || true
            patch -p1 --forward --fuzz=3 < "50_add_susfs_in_${{ steps.get-susfs-branch.outputs.susfs_branch }}.patch"
          else
            echo "Warning: SuSFS patch not found for this kernel version"
          fi

      - name: Apply KernelSU Next patches
        if: steps.should-build.outputs.should_build == 'true'
        run: |
          cd common/KernelSU-Next
          KSUN_BRANCH="${{ steps.build-info.outputs.ksun_branch }}"
          if [ -f "../../kernel_patches/${KSUN_BRANCH}/0001-kernel-implement-susfs-v1.5.8-KernelSU-Next-v1.0.8.patch" ]; then
            cp -v ../../kernel_patches/${KSUN_BRANCH}/0001-kernel-implement-susfs-v1.5.8-KernelSU-Next-v1.0.8.patch ./
            patch -p1 --fuzz=3 < 0001-kernel-implement-susfs-v1.5.8-KernelSU-Next-v1.0.8.patch
          fi
          
          # Apply additional KSU patches
          curl -Ls "https://github.com/cvnertnc/KernelSU-Next/commit/6a7707dc38fc9217dbdc79fe471220383dec2369.patch" | patch -p1 --fuzz=3 || true

      - name: Apply additional patches
        if: steps.should-build.outputs.should_build == 'true'
        run: |
          cd common
          echo "Applying hide stuff and manual hooks patches..."
          if [ -f "../kernel_patches/69_hide_stuff.patch" ]; then
            cp -v ../kernel_patches/69_hide_stuff.patch ./
            patch -p1 -F 3 < 69_hide_stuff.patch || true
          fi
          
          echo "Removing exports..."
          sed -i '/^[[:space:]]*"protected_exports_list"[[:space:]]*:[[:space:]]*"android\/abi_gki_protected_exports_aarch64",$/d' ./BUILD.bazel 2>/dev/null || true
          rm -f android/abi_gki_protected_exports_* 2>/dev/null || true

      - name: Configure kernel
        if: steps.should-build.outputs.should_build == 'true'
        run: |
          cd common
          echo "Adding kernel configurations..."
          
          # KernelSU configurations
          cat >> ./arch/arm64/configs/gki_defconfig << EOF
          CONFIG_KSU=y
          CONFIG_KSU_KPROBES_HOOK=n
          EOF
          
          # SuSFS configurations
          cat >> ./arch/arm64/configs/gki_defconfig << EOF
          CONFIG_KSU_SUSFS=y
          CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y
          CONFIG_KSU_SUSFS_SUS_PATH=y
          CONFIG_KSU_SUSFS_SUS_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SUS_KSTAT=y
          CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n
          CONFIG_KSU_SUSFS_TRY_UMOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SPOOF_UNAME=y
          CONFIG_KSU_SUSFS_ENABLE_LOG=y
          CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y
          CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y
          CONFIG_KSU_SUSFS_OPEN_REDIRECT=y
          CONFIG_KSU_SUSFS_SUS_SU=n
          EOF
          
          # Additional configurations
          cat >> ./arch/arm64/configs/gki_defconfig << EOF
          CONFIG_TMPFS_XATTR=y
          CONFIG_TMPFS_POSIX_ACL=y
          CONFIG_IP_NF_TARGET_TTL=y
          CONFIG_IP6_NF_TARGET_HL=y
          CONFIG_IP6_NF_MATCH_HL=y
          CONFIG_TCP_CONG_ADVANCED=y
          CONFIG_TCP_CONG_BBR=y
          CONFIG_NET_SCH_FQ=y
          CONFIG_TCP_CONG_BIC=n
          CONFIG_TCP_CONG_WESTWOOD=n
          CONFIG_TCP_CONG_HTCP=n
          EOF

      - name: Modify build scripts
        if: steps.should-build.outputs.should_build == 'true'
        run: |
          cd common
          # Modify version string
          sed -i '$s|echo "\$res"|echo "\$res-TheFloresto+"|' ./scripts/setlocalversion
          
          # Remove dirty flag
          sed -i "/stable_scmversion_cmd/s/-maybe-dirty//g" ../build/kernel/kleaf/impl/stamp.bzl 2>/dev/null || true
          
          # Skip defconfig check
          sed -i '2s/check_defconfig//' ./build.config.gki 2>/dev/null || true
          
          # Set build timestamp
          sed -i "s|build-timestamp = \$(or \$(KBUILD_BUILD_TIMESTAMP), \$(build-timestamp-auto))|build-timestamp = \"$(date -u +"%a %b %d %T UTC %Y")\"|" ./init/Makefile

      - name: Build kernel
        if: steps.should-build.outputs.should_build == 'true'
        run: |
          cd common
          export USE_CCACHE=1
          export CCACHE_DIR=$HOME/.ccache
          
          LTO_MODE="${{ steps.build-info.outputs.lto_mode }}"
          echo "Building kernel with LTO mode: $LTO_MODE"
          
          case "$LTO_MODE" in
            "full")
              ../tools/bazel build --config=fast --lto=full //common:kernel_aarch64_dist
              ;;
            "thin")
              ../tools/bazel build --config=fast --lto=thin //common:kernel_aarch64_dist
              ;;
          esac

      - name: Copy build artifacts
        if: steps.should-build.outputs.should_build == 'true'
        run: |
          echo "Copying build artifacts..."
          mkdir -p bootimgs
          
          # Copy kernel images
          cp -v ./bazel-bin/common/kernel_aarch64/Image.lz4 ./bootimgs/
          cp -v ./bazel-bin/common/kernel_aarch64/Image.gz ./bootimgs/
          cp -v ./bazel-bin/common/kernel_aarch64/Image ./bootimgs/
          
          # Copy boot images
          cp -v ./bazel-bin/common/kernel_aarch64_gki_artifacts/boot.img ./bootimgs/
          cp -v ./bazel-bin/common/kernel_aarch64_gki_artifacts/boot-gz.img ./bootimgs/
          cp -v ./bazel-bin/common/kernel_aarch64_gki_artifacts/boot-lz4.img ./bootimgs/

      - name: Create AnyKernel3 packages
        if: steps.should-build.outputs.should_build == 'true'
        run: |
          TIMESTAMP=$(date +"%Y%m%d-%H%M")
          
          # Create LZ4 package
          cd AnyKernel3-p8a
          cp ../bootimgs/Image.lz4 ./Image.lz4
          ZIP_NAME_LZ4="AK3-${{ matrix.android_version }}-${{ matrix.kernel_version }}-KSUN-LZ4-${TIMESTAMP}.zip"
          zip -r "$ZIP_NAME_LZ4" ./*
          mv "$ZIP_NAME_LZ4" ../
          rm -f ./Image.lz4
          
          # Create GZ package
          cp ../bootimgs/Image.gz ./Image.gz
          ZIP_NAME_GZ="AK3-${{ matrix.android_version }}-${{ matrix.kernel_version }}-KSUN-GZ-${TIMESTAMP}.zip"
          zip -r "$ZIP_NAME_GZ" ./*
          mv "$ZIP_NAME_GZ" ../
          rm -f ./Image.gz
          
          # Create RAW package
          cp ../bootimgs/Image ./Image
          ZIP_NAME_RAW="AK3-${{ matrix.android_version }}-${{ matrix.kernel_version }}-KSUN-RAW-${TIMESTAMP}.zip"
          zip -r "$ZIP_NAME_RAW" ./*
          mv "$ZIP_NAME_RAW" ../
          rm -f ./Image
          
          cd ..
          
          # Rename boot images
          mv bootimgs/boot.img "${{ matrix.android_version }}-${{ matrix.kernel_version }}-KSUN-RAW-${TIMESTAMP}.img"
          mv bootimgs/boot-gz.img "${{ matrix.android_version }}-${{ matrix.kernel_version }}-KSUN-GZ-${TIMESTAMP}.img"
          mv bootimgs/boot-lz4.img "${{ matrix.android_version }}-${{ matrix.kernel_version }}-KSUN-LZ4-${TIMESTAMP}.img"

      - name: Upload artifacts
        if: steps.should-build.outputs.should_build == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: gki-kernel-${{ matrix.android_version }}-${{ matrix.kernel_version }}
          path: |
            *.zip
            *.img
          retention-days: 30

  trigger-release:
    needs: build-gki-kernels
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.make_release == 'true' }}
    env:
      REPO_OWNER: ${{ github.repository_owner }}
      REPO_NAME: ${{ github.event.repository.name }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      RELEASE_NAME: "*TEST BUILD* GKI Kernels With KernelSU Next & SUSFS v1.5.8 *TEST BUILD*"
      RELEASE_NOTES: |
        This release contains KernelSU Next and SUSFS v1.5.8 for various GKI kernel versions
        
        Module: 
        -> https://github.com/sidex15/ksu_module_susfs

        Non-Official Managers:
        -> https://github.com/KernelSU-Next/KernelSU-Next

        Features:
        [+] KernelSU-Next
        [+] SUSFS v1.5.8
        [+] Wireguard Support
        [+] Maphide LineageOS Detections
        [+] Futile Maphide for jit-zygote-cache Detections
        [+] Magic Mount Support
        [+] Ptrace message leak fix for kernels < 5.16
        [+] Manual Hooks [scope_min_manual_hooks_v1.4]
        [+] CONFIG_TMPFS_XATTR Support [Mountify Support]
        [+] BBR v1 Support

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate and Create New Tag
        run: |
          BASE_TAG="v1.5.8-gki-r0"
          LATEST_TAG=$(gh api repos/$REPO_OWNER/$REPO_NAME/tags --jq '.[0].name' 2>/dev/null || echo "")
          
          if [ -z "$LATEST_TAG" ] || [[ ! "$LATEST_TAG" =~ gki ]]; then
            NEW_TAG="$BASE_TAG"
          else
            NEW_TAG=$(echo "$LATEST_TAG" | awk -F'-r' '{suffix=$2; if (!suffix) suffix=0; suffix++; printf "%s-r%d", $1, suffix}')
          fi
          
          echo "New tag: $NEW_TAG"
          echo "NEW_TAG=${NEW_TAG}" >> $GITHUB_ENV
          
          git tag $NEW_TAG
          git push origin $NEW_TAG

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./downloaded-artifacts

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.NEW_TAG }}
          prerelease: true
          release_name: ${{ env.RELEASE_NAME }}
          body: ${{ env.RELEASE_NOTES }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Assets Dynamically
        run: |
          for dir in ./downloaded-artifacts/gki-kernel-*; do
            if [ -d "$dir" ]; then
              for file in "$dir"/*; do
                if [ -f "$file" ]; then
                  echo "Uploading $file..."
                  gh release upload ${{ env.NEW_TAG }} "$file"
                fi
              done
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Display Files Uploaded
        run: |
          echo "GitHub release created with the following files:"
          find ./downloaded-artifacts -type f -name "*.zip" -o -name "*.img" | sort
